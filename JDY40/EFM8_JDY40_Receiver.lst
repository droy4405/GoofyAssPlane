0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Sun Mar 17 17:45:53 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_Receiver
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _SendATCommand
0000             29            public _waitms_or_RI1
0000             30            public _RXU1
0000             31            public _getstr1
0000             32            public _getchar1_with_timeout
0000             33            public _getchar1
0000             34            public _sendstr1
0000             35            public _putchar1
0000             36            public _UART1_Init
0000             37            public _waitms
0000             38            public _Timer3us
0000             39            public _Timer5_ISR
0000             40            public __c51_external_startup
0000             41            public _buff
0000             42            public _count20ms
0000             43            public _pwm_state
0000             44            public _pwm_reload
0000             45   ;--------------------------------------------------------
0000             46   ; Special Function Registers
0000             47   ;--------------------------------------------------------
0000             48   _ACC            DATA 0xe0
0000             49   _ADC0ASAH       DATA 0xb6
0000             50   _ADC0ASAL       DATA 0xb5
0000             51   _ADC0ASCF       DATA 0xa1
0000             52   _ADC0ASCT       DATA 0xc7
0000             53   _ADC0CF0        DATA 0xbc
0000             54   _ADC0CF1        DATA 0xb9
0000             55   _ADC0CF2        DATA 0xdf
0000             56   _ADC0CN0        DATA 0xe8
0000             57   _ADC0CN1        DATA 0xb2
0000             58   _ADC0CN2        DATA 0xb3
0000             59   _ADC0GTH        DATA 0xc4
0000             60   _ADC0GTL        DATA 0xc3
0000             61   _ADC0H          DATA 0xbe
0000             62   _ADC0L          DATA 0xbd
0000             63   _ADC0LTH        DATA 0xc6
0000             64   _ADC0LTL        DATA 0xc5
0000             65   _ADC0MX         DATA 0xbb
0000             66   _B              DATA 0xf0
0000             67   _CKCON0         DATA 0x8e
0000             68   _CKCON1         DATA 0xa6
0000             69   _CLEN0          DATA 0xc6
0000             70   _CLIE0          DATA 0xc7
0000             71   _CLIF0          DATA 0xe8
0000             72   _CLKSEL         DATA 0xa9
0000             73   _CLOUT0         DATA 0xd1
0000             74   _CLU0CF         DATA 0xb1
0000             75   _CLU0FN         DATA 0xaf
0000             76   _CLU0MX         DATA 0x84
0000             77   _CLU1CF         DATA 0xb3
0000             78   _CLU1FN         DATA 0xb2
0000             79   _CLU1MX         DATA 0x85
0000             80   _CLU2CF         DATA 0xb6
0000             81   _CLU2FN         DATA 0xb5
0000             82   _CLU2MX         DATA 0x91
0000             83   _CLU3CF         DATA 0xbf
0000             84   _CLU3FN         DATA 0xbe
0000             85   _CLU3MX         DATA 0xae
0000             86   _CMP0CN0        DATA 0x9b
0000             87   _CMP0CN1        DATA 0x99
0000             88   _CMP0MD         DATA 0x9d
0000             89   _CMP0MX         DATA 0x9f
0000             90   _CMP1CN0        DATA 0xbf
0000             91   _CMP1CN1        DATA 0xac
0000             92   _CMP1MD         DATA 0xab
0000             93   _CMP1MX         DATA 0xaa
0000             94   _CRC0CN0        DATA 0xce
0000             95   _CRC0CN1        DATA 0x86
0000             96   _CRC0CNT        DATA 0xd3
0000             97   _CRC0DAT        DATA 0xcb
0000             98   _CRC0FLIP       DATA 0xcf
0000             99   _CRC0IN         DATA 0xca
0000            100   _CRC0ST         DATA 0xd2
0000            101   _DAC0CF0        DATA 0x91
0000            102   _DAC0CF1        DATA 0x92
0000            103   _DAC0H          DATA 0x85
0000            104   _DAC0L          DATA 0x84
0000            105   _DAC1CF0        DATA 0x93
0000            106   _DAC1CF1        DATA 0x94
0000            107   _DAC1H          DATA 0x8a
0000            108   _DAC1L          DATA 0x89
0000            109   _DAC2CF0        DATA 0x95
0000            110   _DAC2CF1        DATA 0x96
0000            111   _DAC2H          DATA 0x8c
0000            112   _DAC2L          DATA 0x8b
0000            113   _DAC3CF0        DATA 0x9a
0000            114   _DAC3CF1        DATA 0x9c
0000            115   _DAC3H          DATA 0x8e
0000            116   _DAC3L          DATA 0x8d
0000            117   _DACGCF0        DATA 0x88
0000            118   _DACGCF1        DATA 0x98
0000            119   _DACGCF2        DATA 0xa2
0000            120   _DERIVID        DATA 0xad
0000            121   _DEVICEID       DATA 0xb5
0000            122   _DPH            DATA 0x83
0000            123   _DPL            DATA 0x82
0000            124   _EIE1           DATA 0xe6
0000            125   _EIE2           DATA 0xf3
0000            126   _EIP1           DATA 0xbb
0000            127   _EIP1H          DATA 0xee
0000            128   _EIP2           DATA 0xed
0000            129   _EIP2H          DATA 0xf6
0000            130   _EMI0CN         DATA 0xe7
0000            131   _FLKEY          DATA 0xb7
0000            132   _HFO0CAL        DATA 0xc7
0000            133   _HFO1CAL        DATA 0xd6
0000            134   _HFOCN          DATA 0xef
0000            135   _I2C0ADM        DATA 0xff
0000            136   _I2C0CN0        DATA 0xba
0000            137   _I2C0DIN        DATA 0xbc
0000            138   _I2C0DOUT       DATA 0xbb
0000            139   _I2C0FCN0       DATA 0xad
0000            140   _I2C0FCN1       DATA 0xab
0000            141   _I2C0FCT        DATA 0xf5
0000            142   _I2C0SLAD       DATA 0xbd
0000            143   _I2C0STAT       DATA 0xb9
0000            144   _IE             DATA 0xa8
0000            145   _IP             DATA 0xb8
0000            146   _IPH            DATA 0xf2
0000            147   _IT01CF         DATA 0xe4
0000            148   _LFO0CN         DATA 0xb1
0000            149   _P0             DATA 0x80
0000            150   _P0MASK         DATA 0xfe
0000            151   _P0MAT          DATA 0xfd
0000            152   _P0MDIN         DATA 0xf1
0000            153   _P0MDOUT        DATA 0xa4
0000            154   _P0SKIP         DATA 0xd4
0000            155   _P1             DATA 0x90
0000            156   _P1MASK         DATA 0xee
0000            157   _P1MAT          DATA 0xed
0000            158   _P1MDIN         DATA 0xf2
0000            159   _P1MDOUT        DATA 0xa5
0000            160   _P1SKIP         DATA 0xd5
0000            161   _P2             DATA 0xa0
0000            162   _P2MASK         DATA 0xfc
0000            163   _P2MAT          DATA 0xfb
0000            164   _P2MDIN         DATA 0xf3
0000            165   _P2MDOUT        DATA 0xa6
0000            166   _P2SKIP         DATA 0xcc
0000            167   _P3             DATA 0xb0
0000            168   _P3MDIN         DATA 0xf4
0000            169   _P3MDOUT        DATA 0x9c
0000            170   _PCA0CENT       DATA 0x9e
0000            171   _PCA0CLR        DATA 0x9c
0000            172   _PCA0CN0        DATA 0xd8
0000            173   _PCA0CPH0       DATA 0xfc
0000            174   _PCA0CPH1       DATA 0xea
0000            175   _PCA0CPH2       DATA 0xec
0000            176   _PCA0CPH3       DATA 0xf5
0000            177   _PCA0CPH4       DATA 0x85
0000            178   _PCA0CPH5       DATA 0xde
0000            179   _PCA0CPL0       DATA 0xfb
0000            180   _PCA0CPL1       DATA 0xe9
0000            181   _PCA0CPL2       DATA 0xeb
0000            182   _PCA0CPL3       DATA 0xf4
0000            183   _PCA0CPL4       DATA 0x84
0000            184   _PCA0CPL5       DATA 0xdd
0000            185   _PCA0CPM0       DATA 0xda
0000            186   _PCA0CPM1       DATA 0xdb
0000            187   _PCA0CPM2       DATA 0xdc
0000            188   _PCA0CPM3       DATA 0xae
0000            189   _PCA0CPM4       DATA 0xaf
0000            190   _PCA0CPM5       DATA 0xcc
0000            191   _PCA0H          DATA 0xfa
0000            192   _PCA0L          DATA 0xf9
0000            193   _PCA0MD         DATA 0xd9
0000            194   _PCA0POL        DATA 0x96
0000            195   _PCA0PWM        DATA 0xf7
0000            196   _PCON0          DATA 0x87
0000            197   _PCON1          DATA 0xcd
0000            198   _PFE0CN         DATA 0xc1
0000            199   _PRTDRV         DATA 0xf6
0000            200   _PSCTL          DATA 0x8f
0000            201   _PSTAT0         DATA 0xaa
0000            202   _PSW            DATA 0xd0
0000            203   _REF0CN         DATA 0xd1
0000            204   _REG0CN         DATA 0xc9
0000            205   _REVID          DATA 0xb6
0000            206   _RSTSRC         DATA 0xef
0000            207   _SBCON1         DATA 0x94
0000            208   _SBRLH1         DATA 0x96
0000            209   _SBRLL1         DATA 0x95
0000            210   _SBUF           DATA 0x99
0000            211   _SBUF0          DATA 0x99
0000            212   _SBUF1          DATA 0x92
0000            213   _SCON           DATA 0x98
0000            214   _SCON0          DATA 0x98
0000            215   _SCON1          DATA 0xc8
0000            216   _SFRPAGE        DATA 0xa7
0000            217   _SFRPGCN        DATA 0xbc
0000            218   _SFRSTACK       DATA 0xd7
0000            219   _SMB0ADM        DATA 0xd6
0000            220   _SMB0ADR        DATA 0xd7
0000            221   _SMB0CF         DATA 0xc1
0000            222   _SMB0CN0        DATA 0xc0
0000            223   _SMB0DAT        DATA 0xc2
0000            224   _SMB0FCN0       DATA 0xc3
0000            225   _SMB0FCN1       DATA 0xc4
0000            226   _SMB0FCT        DATA 0xef
0000            227   _SMB0RXLN       DATA 0xc5
0000            228   _SMB0TC         DATA 0xac
0000            229   _SMOD1          DATA 0x93
0000            230   _SP             DATA 0x81
0000            231   _SPI0CFG        DATA 0xa1
0000            232   _SPI0CKR        DATA 0xa2
0000            233   _SPI0CN0        DATA 0xf8
0000            234   _SPI0DAT        DATA 0xa3
0000            235   _SPI0FCN0       DATA 0x9a
0000            236   _SPI0FCN1       DATA 0x9b
0000            237   _SPI0FCT        DATA 0xf7
0000            238   _SPI0PCF        DATA 0xdf
0000            239   _TCON           DATA 0x88
0000            240   _TH0            DATA 0x8c
0000            241   _TH1            DATA 0x8d
0000            242   _TL0            DATA 0x8a
0000            243   _TL1            DATA 0x8b
0000            244   _TMOD           DATA 0x89
0000            245   _TMR2CN0        DATA 0xc8
0000            246   _TMR2CN1        DATA 0xfd
0000            247   _TMR2H          DATA 0xcf
0000            248   _TMR2L          DATA 0xce
0000            249   _TMR2RLH        DATA 0xcb
0000            250   _TMR2RLL        DATA 0xca
0000            251   _TMR3CN0        DATA 0x91
0000            252   _TMR3CN1        DATA 0xfe
0000            253   _TMR3H          DATA 0x95
0000            254   _TMR3L          DATA 0x94
0000            255   _TMR3RLH        DATA 0x93
0000            256   _TMR3RLL        DATA 0x92
0000            257   _TMR4CN0        DATA 0x98
0000            258   _TMR4CN1        DATA 0xff
0000            259   _TMR4H          DATA 0xa5
0000            260   _TMR4L          DATA 0xa4
0000            261   _TMR4RLH        DATA 0xa3
0000            262   _TMR4RLL        DATA 0xa2
0000            263   _TMR5CN0        DATA 0xc0
0000            264   _TMR5CN1        DATA 0xf1
0000            265   _TMR5H          DATA 0xd5
0000            266   _TMR5L          DATA 0xd4
0000            267   _TMR5RLH        DATA 0xd3
0000            268   _TMR5RLL        DATA 0xd2
0000            269   _UART0PCF       DATA 0xd9
0000            270   _UART1FCN0      DATA 0x9d
0000            271   _UART1FCN1      DATA 0xd8
0000            272   _UART1FCT       DATA 0xfa
0000            273   _UART1LIN       DATA 0x9e
0000            274   _UART1PCF       DATA 0xda
0000            275   _VDM0CN         DATA 0xff
0000            276   _WDTCN          DATA 0x97
0000            277   _XBR0           DATA 0xe1
0000            278   _XBR1           DATA 0xe2
0000            279   _XBR2           DATA 0xe3
0000            280   _XOSC0CN        DATA 0x86
0000            281   _DPTR           DATA 0x8382
0000            282   _TMR2RL         DATA 0xcbca
0000            283   _TMR3RL         DATA 0x9392
0000            284   _TMR4RL         DATA 0xa3a2
0000            285   _TMR5RL         DATA 0xd3d2
0000            286   _TMR0           DATA 0x8c8a
0000            287   _TMR1           DATA 0x8d8b
0000            288   _TMR2           DATA 0xcfce
0000            289   _TMR3           DATA 0x9594
0000            290   _TMR4           DATA 0xa5a4
0000            291   _TMR5           DATA 0xd5d4
0000            292   _SBRL1          DATA 0x9695
0000            293   _PCA0           DATA 0xfaf9
0000            294   _PCA0CP0        DATA 0xfcfb
0000            295   _PCA0CP1        DATA 0xeae9
0000            296   _PCA0CP2        DATA 0xeceb
0000            297   _PCA0CP3        DATA 0xf5f4
0000            298   _PCA0CP4        DATA 0x8584
0000            299   _PCA0CP5        DATA 0xdedd
0000            300   _ADC0ASA        DATA 0xb6b5
0000            301   _ADC0GT         DATA 0xc4c3
0000            302   _ADC0           DATA 0xbebd
0000            303   _ADC0LT         DATA 0xc6c5
0000            304   _DAC0           DATA 0x8584
0000            305   _DAC1           DATA 0x8a89
0000            306   _DAC2           DATA 0x8c8b
0000            307   _DAC3           DATA 0x8e8d
0000            308   ;--------------------------------------------------------
0000            309   ; special function bits
0000            310   ;--------------------------------------------------------
0000            311   _ACC_0          BIT 0xe0
0000            312   _ACC_1          BIT 0xe1
0000            313   _ACC_2          BIT 0xe2
0000            314   _ACC_3          BIT 0xe3
0000            315   _ACC_4          BIT 0xe4
0000            316   _ACC_5          BIT 0xe5
0000            317   _ACC_6          BIT 0xe6
0000            318   _ACC_7          BIT 0xe7
0000            319   _TEMPE          BIT 0xe8
0000            320   _ADGN0          BIT 0xe9
0000            321   _ADGN1          BIT 0xea
0000            322   _ADWINT         BIT 0xeb
0000            323   _ADBUSY         BIT 0xec
0000            324   _ADINT          BIT 0xed
0000            325   _IPOEN          BIT 0xee
0000            326   _ADEN           BIT 0xef
0000            327   _B_0            BIT 0xf0
0000            328   _B_1            BIT 0xf1
0000            329   _B_2            BIT 0xf2
0000            330   _B_3            BIT 0xf3
0000            331   _B_4            BIT 0xf4
0000            332   _B_5            BIT 0xf5
0000            333   _B_6            BIT 0xf6
0000            334   _B_7            BIT 0xf7
0000            335   _C0FIF          BIT 0xe8
0000            336   _C0RIF          BIT 0xe9
0000            337   _C1FIF          BIT 0xea
0000            338   _C1RIF          BIT 0xeb
0000            339   _C2FIF          BIT 0xec
0000            340   _C2RIF          BIT 0xed
0000            341   _C3FIF          BIT 0xee
0000            342   _C3RIF          BIT 0xef
0000            343   _D1SRC0         BIT 0x88
0000            344   _D1SRC1         BIT 0x89
0000            345   _D1AMEN         BIT 0x8a
0000            346   _D01REFSL       BIT 0x8b
0000            347   _D3SRC0         BIT 0x8c
0000            348   _D3SRC1         BIT 0x8d
0000            349   _D3AMEN         BIT 0x8e
0000            350   _D23REFSL       BIT 0x8f
0000            351   _D0UDIS         BIT 0x98
0000            352   _D1UDIS         BIT 0x99
0000            353   _D2UDIS         BIT 0x9a
0000            354   _D3UDIS         BIT 0x9b
0000            355   _EX0            BIT 0xa8
0000            356   _ET0            BIT 0xa9
0000            357   _EX1            BIT 0xaa
0000            358   _ET1            BIT 0xab
0000            359   _ES0            BIT 0xac
0000            360   _ET2            BIT 0xad
0000            361   _ESPI0          BIT 0xae
0000            362   _EA             BIT 0xaf
0000            363   _PX0            BIT 0xb8
0000            364   _PT0            BIT 0xb9
0000            365   _PX1            BIT 0xba
0000            366   _PT1            BIT 0xbb
0000            367   _PS0            BIT 0xbc
0000            368   _PT2            BIT 0xbd
0000            369   _PSPI0          BIT 0xbe
0000            370   _P0_0           BIT 0x80
0000            371   _P0_1           BIT 0x81
0000            372   _P0_2           BIT 0x82
0000            373   _P0_3           BIT 0x83
0000            374   _P0_4           BIT 0x84
0000            375   _P0_5           BIT 0x85
0000            376   _P0_6           BIT 0x86
0000            377   _P0_7           BIT 0x87
0000            378   _P1_0           BIT 0x90
0000            379   _P1_1           BIT 0x91
0000            380   _P1_2           BIT 0x92
0000            381   _P1_3           BIT 0x93
0000            382   _P1_4           BIT 0x94
0000            383   _P1_5           BIT 0x95
0000            384   _P1_6           BIT 0x96
0000            385   _P1_7           BIT 0x97
0000            386   _P2_0           BIT 0xa0
0000            387   _P2_1           BIT 0xa1
0000            388   _P2_2           BIT 0xa2
0000            389   _P2_3           BIT 0xa3
0000            390   _P2_4           BIT 0xa4
0000            391   _P2_5           BIT 0xa5
0000            392   _P2_6           BIT 0xa6
0000            393   _P3_0           BIT 0xb0
0000            394   _P3_1           BIT 0xb1
0000            395   _P3_2           BIT 0xb2
0000            396   _P3_3           BIT 0xb3
0000            397   _P3_4           BIT 0xb4
0000            398   _P3_7           BIT 0xb7
0000            399   _CCF0           BIT 0xd8
0000            400   _CCF1           BIT 0xd9
0000            401   _CCF2           BIT 0xda
0000            402   _CCF3           BIT 0xdb
0000            403   _CCF4           BIT 0xdc
0000            404   _CCF5           BIT 0xdd
0000            405   _CR             BIT 0xde
0000            406   _CF             BIT 0xdf
0000            407   _PARITY         BIT 0xd0
0000            408   _F1             BIT 0xd1
0000            409   _OV             BIT 0xd2
0000            410   _RS0            BIT 0xd3
0000            411   _RS1            BIT 0xd4
0000            412   _F0             BIT 0xd5
0000            413   _AC             BIT 0xd6
0000            414   _CY             BIT 0xd7
0000            415   _RI             BIT 0x98
0000            416   _TI             BIT 0x99
0000            417   _RB8            BIT 0x9a
0000            418   _TB8            BIT 0x9b
0000            419   _REN            BIT 0x9c
0000            420   _CE             BIT 0x9d
0000            421   _SMODE          BIT 0x9e
0000            422   _RI1            BIT 0xc8
0000            423   _TI1            BIT 0xc9
0000            424   _RBX1           BIT 0xca
0000            425   _TBX1           BIT 0xcb
0000            426   _REN1           BIT 0xcc
0000            427   _PERR1          BIT 0xcd
0000            428   _OVR1           BIT 0xce
0000            429   _SI             BIT 0xc0
0000            430   _ACK            BIT 0xc1
0000            431   _ARBLOST        BIT 0xc2
0000            432   _ACKRQ          BIT 0xc3
0000            433   _STO            BIT 0xc4
0000            434   _STA            BIT 0xc5
0000            435   _TXMODE         BIT 0xc6
0000            436   _MASTER         BIT 0xc7
0000            437   _SPIEN          BIT 0xf8
0000            438   _TXNF           BIT 0xf9
0000            439   _NSSMD0         BIT 0xfa
0000            440   _NSSMD1         BIT 0xfb
0000            441   _RXOVRN         BIT 0xfc
0000            442   _MODF           BIT 0xfd
0000            443   _WCOL           BIT 0xfe
0000            444   _SPIF           BIT 0xff
0000            445   _IT0            BIT 0x88
0000            446   _IE0            BIT 0x89
0000            447   _IT1            BIT 0x8a
0000            448   _IE1            BIT 0x8b
0000            449   _TR0            BIT 0x8c
0000            450   _TF0            BIT 0x8d
0000            451   _TR1            BIT 0x8e
0000            452   _TF1            BIT 0x8f
0000            453   _T2XCLK0        BIT 0xc8
0000            454   _T2XCLK1        BIT 0xc9
0000            455   _TR2            BIT 0xca
0000            456   _T2SPLIT        BIT 0xcb
0000            457   _TF2CEN         BIT 0xcc
0000            458   _TF2LEN         BIT 0xcd
0000            459   _TF2L           BIT 0xce
0000            460   _TF2H           BIT 0xcf
0000            461   _T4XCLK0        BIT 0x98
0000            462   _T4XCLK1        BIT 0x99
0000            463   _TR4            BIT 0x9a
0000            464   _T4SPLIT        BIT 0x9b
0000            465   _TF4CEN         BIT 0x9c
0000            466   _TF4LEN         BIT 0x9d
0000            467   _TF4L           BIT 0x9e
0000            468   _TF4H           BIT 0x9f
0000            469   _T5XCLK0        BIT 0xc0
0000            470   _T5XCLK1        BIT 0xc1
0000            471   _TR5            BIT 0xc2
0000            472   _T5SPLIT        BIT 0xc3
0000            473   _TF5CEN         BIT 0xc4
0000            474   _TF5LEN         BIT 0xc5
0000            475   _TF5L           BIT 0xc6
0000            476   _TF5H           BIT 0xc7
0000            477   _RIE            BIT 0xd8
0000            478   _RXTO0          BIT 0xd9
0000            479   _RXTO1          BIT 0xda
0000            480   _RFRQ           BIT 0xdb
0000            481   _TIE            BIT 0xdc
0000            482   _TXHOLD         BIT 0xdd
0000            483   _TXNF1          BIT 0xde
0000            484   _TFRQ           BIT 0xdf
0000            485   ;--------------------------------------------------------
0000            486   ; overlayable register banks
0000            487   ;--------------------------------------------------------
0000            488            rbank0 segment data overlay
0000            489   ;--------------------------------------------------------
0000            490   ; internal ram data
0000            491   ;--------------------------------------------------------
0000            492            rseg R_DSEG
0000            493   _pwm_reload:
0000            494            ds 2
0002            495   _pwm_state:
0002            496            ds 1
0003            497   _count20ms:
0003            498            ds 1
0004            499   _main_sXAngle_1_97:
0004            500            ds 4
0008            501   _main_sYAngle_1_97:
0008            502            ds 4
000C            503   _main_i_1_97:
000C            504            ds 2
000E            505   _main_j_1_97:
000E            506            ds 2
0010            507   _main_motor_on_1_97:
0010            508            ds 2
0012            509   _main_sloc0_1_0:
0012            510            ds 4
0016            511   ;--------------------------------------------------------
0016            512   ; overlayable items in internal ram 
0016            513   ;--------------------------------------------------------
0000            514            rseg    R_OSEG
0000            515            rseg    R_OSEG
0000            516            rseg    R_OSEG
0000            517   ;--------------------------------------------------------
0000            518   ; indirectly addressable internal ram data
0000            519   ;--------------------------------------------------------
0000            520            rseg R_ISEG
0000            521   _buff:
0000            522            ds 20
0014            523   ;--------------------------------------------------------
0014            524   ; absolute internal ram data
0014            525   ;--------------------------------------------------------
0000            526            DSEG
0000            527   ;--------------------------------------------------------
0000            528   ; bit data
0000            529   ;--------------------------------------------------------
0000            530            rseg R_BSEG
0000            531   ;--------------------------------------------------------
0000            532   ; paged external ram data
0000            533   ;--------------------------------------------------------
0000            534            rseg R_PSEG
0000            535   ;--------------------------------------------------------
0000            536   ; external ram data
0000            537   ;--------------------------------------------------------
0000            538            rseg R_XSEG
0000            539   ;--------------------------------------------------------
0000            540   ; absolute external ram data
0000            541   ;--------------------------------------------------------
0000            542            XSEG
0000            543   ;--------------------------------------------------------
0000            544   ; external initialized ram data
0000            545   ;--------------------------------------------------------
0000            546            rseg R_IXSEG
0000            547            rseg R_HOME
0000            548            rseg R_GSINIT
0000            549            rseg R_CSEG
0000            550   ;--------------------------------------------------------
0000            551   ; Reset entry point and interrupt vectors
0000            552   ;--------------------------------------------------------
0000            553            CSEG at 0x0000
0000 020000     554            ljmp    _crt0
0093            555            CSEG at 0x0093
0093 020000     556            ljmp    _Timer5_ISR
0096            557   ;--------------------------------------------------------
0096            558   ; global & static initialisations
0096            559   ;--------------------------------------------------------
0000            560            rseg R_HOME
0000            561            rseg R_GSINIT
0000            562            rseg R_GSINIT
0000            563   ;--------------------------------------------------------
0000            564   ; data variables initialization
0000            565   ;--------------------------------------------------------
0000            566            rseg R_DINIT
0000            567   ;        EFM8_JDY40_Receiver.c:11: volatile unsigned char pwm_state = 0;
0000 757000     568            mov     _pwm_state,#0x00
0003            569            ; The linker places a 'ret' at the end of segment R_DINIT.
0003            570   ;--------------------------------------------------------
0003            571   ; code
0003            572   ;--------------------------------------------------------
0000            573            rseg R_CSEG
0000            574   ;------------------------------------------------------------
0000            575   ;Allocation info for local variables in function '_c51_external_startup'
0000            576   ;------------------------------------------------------------
0000            577   ;------------------------------------------------------------
0000            578   ;        EFM8_JDY40_Receiver.c:17: char _c51_external_startup (void)
0000            579   ;        -----------------------------------------
0000            580   ;         function _c51_external_startup
0000            581   ;        -----------------------------------------
0000            582   __c51_external_startup:
0000            583            using   0
0000            584   ;        EFM8_JDY40_Receiver.c:20: SFRPAGE = 0x00;
0000 75A700     585            mov     _SFRPAGE,#0x00
0003            586   ;        EFM8_JDY40_Receiver.c:21: WDTCN = 0xDE; //First key
0003 7597DE     587            mov     _WDTCN,#0xDE
0006            588   ;        EFM8_JDY40_Receiver.c:22: WDTCN = 0xAD; //Second key
0006 7597AD     589            mov     _WDTCN,#0xAD
0009            590   ;        EFM8_JDY40_Receiver.c:24: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     591            mov     _VDM0CN,#0x80
000C            592   ;        EFM8_JDY40_Receiver.c:25: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     593            mov     _RSTSRC,#0x06
000F            594   ;        EFM8_JDY40_Receiver.c:32: SFRPAGE = 0x10;
000F 75A710     595            mov     _SFRPAGE,#0x10
0012            596   ;        EFM8_JDY40_Receiver.c:33: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     597            mov     _PFE0CN,#0x20
0015            598   ;        EFM8_JDY40_Receiver.c:34: SFRPAGE = 0x00;
0015 75A700     599            mov     _SFRPAGE,#0x00
0018            600   ;        EFM8_JDY40_Receiver.c:55: CLKSEL = 0x00;
0018 75A900     601            mov     _CLKSEL,#0x00
001B            602   ;        EFM8_JDY40_Receiver.c:56: CLKSEL = 0x00;
001B 75A900     603            mov     _CLKSEL,#0x00
001E            604   ;        EFM8_JDY40_Receiver.c:57: while ((CLKSEL & 0x80) == 0);
001E            605   L002001?:
001E E5A9       606            mov     a,_CLKSEL
0020 30E700     607            jnb     acc.7,L002001?
0023            608   ;        EFM8_JDY40_Receiver.c:58: CLKSEL = 0x03;
0023 75A903     609            mov     _CLKSEL,#0x03
0026            610   ;        EFM8_JDY40_Receiver.c:59: CLKSEL = 0x03;
0026 75A903     611            mov     _CLKSEL,#0x03
0029            612   ;        EFM8_JDY40_Receiver.c:60: while ((CLKSEL & 0x80) == 0);
0029            613   L002004?:
0029 E5A9       614            mov     a,_CLKSEL
002B 30E780     615            jnb     acc.7,L002004?
002E            616   ;        EFM8_JDY40_Receiver.c:65: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     617            orl     _P0MDOUT,#0x11
0031            618   ;        EFM8_JDY40_Receiver.c:66: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     619            orl     _P2MDOUT,#0x01
0034            620   ;        EFM8_JDY40_Receiver.c:67: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     621            mov     _XBR0,#0x01
0037            622   ;        EFM8_JDY40_Receiver.c:68: XBR1     = 0X00;
0037 75E200     623            mov     _XBR1,#0x00
003A            624   ;        EFM8_JDY40_Receiver.c:69: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     625            mov     _XBR2,#0x41
003D            626   ;        EFM8_JDY40_Receiver.c:75: SCON0 = 0x10;
003D 759810     627            mov     _SCON0,#0x10
0040            628   ;        EFM8_JDY40_Receiver.c:76: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     629            mov     _TH1,#0xE6
0043            630   ;        EFM8_JDY40_Receiver.c:77: TL1 = TH1;      // Init Timer1
0043 858D8B     631            mov     _TL1,_TH1
0046            632   ;        EFM8_JDY40_Receiver.c:78: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     633            anl     _TMOD,#0x0F
0049            634   ;        EFM8_JDY40_Receiver.c:79: TMOD |=  0x20;                       
0049 438920     635            orl     _TMOD,#0x20
004C            636   ;        EFM8_JDY40_Receiver.c:80: TR1 = 1; // START Timer1
004C D28E       637            setb    _TR1
004E            638   ;        EFM8_JDY40_Receiver.c:81: TI = 1;  // Indicate TX0 ready
004E D299       639            setb    _TI
0050            640   ;        EFM8_JDY40_Receiver.c:84: SFRPAGE=0x10;
0050 75A710     641            mov     _SFRPAGE,#0x10
0053            642   ;        EFM8_JDY40_Receiver.c:85: TMR5CN0=0x00;
0053 75C000     643            mov     _TMR5CN0,#0x00
0056            644   ;        EFM8_JDY40_Receiver.c:86: pwm_reload=0x10000L-(SYSCLK*1.5e-3)/12.0; // 1.5 miliseconds pulse is the center of the servo
0056 75B0D8     645            mov     _pwm_reload,#0xD8
0059 75B1DC     646            mov     (_pwm_reload + 1),#0xDC
005C            647   ;        EFM8_JDY40_Receiver.c:87: TMR5=0xffff;   // Set to reload immediately
005C 75D4FF     648            mov     _TMR5,#0xFF
005F 75D5FF     649            mov     (_TMR5 >> 8),#0xFF
0062            650   ;        EFM8_JDY40_Receiver.c:88: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
0062 43F308     651            orl     _EIE2,#0x08
0065            652   ;        EFM8_JDY40_Receiver.c:89: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0065 D2C2       653            setb    _TR5
0067            654   ;        EFM8_JDY40_Receiver.c:91: EA=1;
0067 D2AF       655            setb    _EA
0069            656   ;        EFM8_JDY40_Receiver.c:93: SFRPAGE=0x00;
0069 75A700     657            mov     _SFRPAGE,#0x00
006C            658   ;        EFM8_JDY40_Receiver.c:95: return 0;
006C 758200     659            mov     dpl,#0x00
006F 22         660            ret
0070            661   ;------------------------------------------------------------
0070            662   ;Allocation info for local variables in function 'Timer5_ISR'
0070            663   ;------------------------------------------------------------
0070            664   ;------------------------------------------------------------
0070            665   ;        EFM8_JDY40_Receiver.c:99: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
0070            666   ;        -----------------------------------------
0070            667   ;         function Timer5_ISR
0070            668   ;        -----------------------------------------
0070            669   _Timer5_ISR:
0070 C0E0       670            push    acc
0072 C002       671            push    ar2
0074 C003       672            push    ar3
0076 C004       673            push    ar4
0078 C005       674            push    ar5
007A C0D0       675            push    psw
007C 75D000     676            mov     psw,#0x00
007F            677   ;        EFM8_JDY40_Receiver.c:101: SFRPAGE=0x10;
007F 75A710     678            mov     _SFRPAGE,#0x10
0082            679   ;        EFM8_JDY40_Receiver.c:102: TF5H = 0; // Clear Timer5 interrupt flag
0082 C2C7       680            clr     _TF5H
0084            681   ;        EFM8_JDY40_Receiver.c:106: switch (pwm_state)
0084 AA70       682            mov     r2,_pwm_state
0086 BA0040     683            cjne    r2,#0x00,L003009?
0089 8000       684            sjmp    L003001?
008B            685   L003009?:
008B            686   ;        EFM8_JDY40_Receiver.c:112: case 0:
008B BA01C0     687            cjne    r2,#0x01,L003003?
008E 8000       688            sjmp    L003002?
0090            689   L003001?:
0090            690   ;        EFM8_JDY40_Receiver.c:113: ESCOUT=1;
0090 D297       691            setb    _P1_7
0092            692   ;        EFM8_JDY40_Receiver.c:114: TMR5RL=RELOAD_10MS;
0092 75D2A0     693            mov     _TMR5RL,#0xA0
0095 75D315     694            mov     (_TMR5RL >> 8),#0x15
0098            695   ;        EFM8_JDY40_Receiver.c:115: pwm_state=1;
0098 757001     696            mov     _pwm_state,#0x01
009B            697   ;        EFM8_JDY40_Receiver.c:116: count20ms++;
009B 0530       698            inc     _count20ms
009D            699   ;        EFM8_JDY40_Receiver.c:117: break;
009D            700   ;        EFM8_JDY40_Receiver.c:119: case 1:
009D 8000       701            sjmp    L003005?
009F            702   L003002?:
009F            703   ;        EFM8_JDY40_Receiver.c:120: ESCOUT=0;
009F C297       704            clr     _P1_7
00A1            705   ;        EFM8_JDY40_Receiver.c:121: TMR5RL=RELOAD_10MS-pwm_reload;
00A1 AAB0       706            mov     r2,_pwm_reload
00A3 ABB1       707            mov     r3,(_pwm_reload + 1)
00A5 E4         708            clr     a
00A6 FC         709            mov     r4,a
00A7 FD         710            mov     r5,a
00A8 74A0       711            mov     a,#0xA0
00AA C3         712            clr     c
00AB 9A         713            subb    a,r2
00AC FA         714            mov     r2,a
00AD 7415       715            mov     a,#0x15
00AF 9B         716            subb    a,r3
00B0 FB         717            mov     r3,a
00B1 E4         718            clr     a
00B2 9C         719            subb    a,r4
00B3 FC         720            mov     r4,a
00B4 E4         721            clr     a
00B5 9D         722            subb    a,r5
00B6 FD         723            mov     r5,a
00B7 8AD2       724            mov     _TMR5RL,r2
00B9 8BD3       725            mov     (_TMR5RL >> 8),r3
00BB            726   ;        EFM8_JDY40_Receiver.c:122: pwm_state=2;
00BB 757002     727            mov     _pwm_state,#0x02
00BE            728   ;        EFM8_JDY40_Receiver.c:123: break;
00BE            729   ;        EFM8_JDY40_Receiver.c:125: default:
00BE 8000       730            sjmp    L003005?
00C0            731   L003003?:
00C0            732   ;        EFM8_JDY40_Receiver.c:126: ESCOUT=0;
00C0 C297       733            clr     _P1_7
00C2            734   ;        EFM8_JDY40_Receiver.c:127: TMR5RL=pwm_reload;
00C2 85B0D2     735            mov     _TMR5RL,_pwm_reload
00C5 85B1D3     736            mov     (_TMR5RL >> 8),(_pwm_reload + 1)
00C8            737   ;        EFM8_JDY40_Receiver.c:128: pwm_state=0;
00C8 757000     738            mov     _pwm_state,#0x00
00CB            739   ;        EFM8_JDY40_Receiver.c:130: }
00CB            740   L003005?:
00CB D0D0       741            pop     psw
00CD D005       742            pop     ar5
00CF D004       743            pop     ar4
00D1 D003       744            pop     ar3
00D3 D002       745            pop     ar2
00D5 D0E0       746            pop     acc
00D7 32         747            reti
00D8            748   ;        eliminated unneeded push/pop dpl
00D8            749   ;        eliminated unneeded push/pop dph
00D8            750   ;        eliminated unneeded push/pop b
00D8            751   ;------------------------------------------------------------
00D8            752   ;Allocation info for local variables in function 'Timer3us'
00D8            753   ;------------------------------------------------------------
00D8            754   ;us                        Allocated to registers r2 
00D8            755   ;i                         Allocated to registers r3 
00D8            756   ;------------------------------------------------------------
00D8            757   ;        EFM8_JDY40_Receiver.c:134: void Timer3us(unsigned char us)
00D8            758   ;        -----------------------------------------
00D8            759   ;         function Timer3us
00D8            760   ;        -----------------------------------------
00D8            761   _Timer3us:
00D8 AA82       762            mov     r2,dpl
00DA            763   ;        EFM8_JDY40_Receiver.c:139: CKCON0|=0b_0100_0000;
00DA 438E40     764            orl     _CKCON0,#0x40
00DD            765   ;        EFM8_JDY40_Receiver.c:141: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
00DD 7592B8     766            mov     _TMR3RL,#0xB8
00E0 7593FF     767            mov     (_TMR3RL >> 8),#0xFF
00E3            768   ;        EFM8_JDY40_Receiver.c:142: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
00E3 859294     769            mov     _TMR3,_TMR3RL
00E6 859395     770            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
00E9            771   ;        EFM8_JDY40_Receiver.c:144: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
00E9 759104     772            mov     _TMR3CN0,#0x04
00EC            773   ;        EFM8_JDY40_Receiver.c:145: for (i = 0; i < us; i++)       // Count <us> overflows
00EC 7B00       774            mov     r3,#0x00
00EE            775   L004004?:
00EE C3         776            clr     c
00EF EB         777            mov     a,r3
00F0 9A         778            subb    a,r2
00F1 5000       779            jnc     L004007?
00F3            780   ;        EFM8_JDY40_Receiver.c:147: while (!(TMR3CN0 & 0x80));  // Wait for overflow
00F3            781   L004001?:
00F3 E591       782            mov     a,_TMR3CN0
00F5 30E700     783            jnb     acc.7,L004001?
00F8            784   ;        EFM8_JDY40_Receiver.c:148: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
00F8 53917F     785            anl     _TMR3CN0,#0x7F
00FB            786   ;        EFM8_JDY40_Receiver.c:145: for (i = 0; i < us; i++)       // Count <us> overflows
00FB 0B         787            inc     r3
00FC 8000       788            sjmp    L004004?
00FE            789   L004007?:
00FE            790   ;        EFM8_JDY40_Receiver.c:150: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00FE 759100     791            mov     _TMR3CN0,#0x00
0101 22         792            ret
0102            793   ;------------------------------------------------------------
0102            794   ;Allocation info for local variables in function 'waitms'
0102            795   ;------------------------------------------------------------
0102            796   ;ms                        Allocated to registers r2 r3 
0102            797   ;j                         Allocated to registers r4 r5 
0102            798   ;k                         Allocated to registers r6 
0102            799   ;------------------------------------------------------------
0102            800   ;        EFM8_JDY40_Receiver.c:153: void waitms (unsigned int ms)
0102            801   ;        -----------------------------------------
0102            802   ;         function waitms
0102            803   ;        -----------------------------------------
0102            804   _waitms:
0102 AA82       805            mov     r2,dpl
0104 AB83       806            mov     r3,dph
0106            807   ;        EFM8_JDY40_Receiver.c:157: for(j=0; j<ms; j++)
0106 7C00       808            mov     r4,#0x00
0108 7D00       809            mov     r5,#0x00
010A            810   L005005?:
010A C3         811            clr     c
010B EC         812            mov     a,r4
010C 9A         813            subb    a,r2
010D ED         814            mov     a,r5
010E 9B         815            subb    a,r3
010F 5000       816            jnc     L005009?
0111            817   ;        EFM8_JDY40_Receiver.c:158: for (k=0; k<4; k++) Timer3us(250);
0111 7E00       818            mov     r6,#0x00
0113            819   L005001?:
0113 BE0440     820            cjne    r6,#0x04,L005018?
0116            821   L005018?:
0116 5000       822            jnc     L005007?
0118 7582FA     823            mov     dpl,#0xFA
011B C002       824            push    ar2
011D C003       825            push    ar3
011F C004       826            push    ar4
0121 C005       827            push    ar5
0123 C006       828            push    ar6
0125 120000     829            lcall   _Timer3us
0128 D006       830            pop     ar6
012A D005       831            pop     ar5
012C D004       832            pop     ar4
012E D003       833            pop     ar3
0130 D002       834            pop     ar2
0132 0E         835            inc     r6
0133 8000       836            sjmp    L005001?
0135            837   L005007?:
0135            838   ;        EFM8_JDY40_Receiver.c:157: for(j=0; j<ms; j++)
0135 0C         839            inc     r4
0136 BC0080     840            cjne    r4,#0x00,L005005?
0139 0D         841            inc     r5
013A 8000       842            sjmp    L005005?
013C            843   L005009?:
013C 22         844            ret
013D            845   ;------------------------------------------------------------
013D            846   ;Allocation info for local variables in function 'UART1_Init'
013D            847   ;------------------------------------------------------------
013D            848   ;baudrate                  Allocated to registers r2 r3 r4 r5 
013D            849   ;------------------------------------------------------------
013D            850   ;        EFM8_JDY40_Receiver.c:161: void UART1_Init (unsigned long baudrate)
013D            851   ;        -----------------------------------------
013D            852   ;         function UART1_Init
013D            853   ;        -----------------------------------------
013D            854   _UART1_Init:
013D AA82       855            mov     r2,dpl
013F AB83       856            mov     r3,dph
0141 ACF0       857            mov     r4,b
0143 FD         858            mov     r5,a
0144            859   ;        EFM8_JDY40_Receiver.c:163: SFRPAGE = 0x20;
0144 75A720     860            mov     _SFRPAGE,#0x20
0147            861   ;        EFM8_JDY40_Receiver.c:164: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
0147 75930C     862            mov     _SMOD1,#0x0C
014A            863   ;        EFM8_JDY40_Receiver.c:165: SCON1 = 0x10;
014A 75C810     864            mov     _SCON1,#0x10
014D            865   ;        EFM8_JDY40_Receiver.c:166: SBCON1 =0x00;   // disable baud rate generator
014D 759400     866            mov     _SBCON1,#0x00
0150            867   ;        EFM8_JDY40_Receiver.c:167: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
0150 8A00       868            mov     __divulong_PARM_2,r2
0152 8B01       869            mov     (__divulong_PARM_2 + 1),r3
0154 8C02       870            mov     (__divulong_PARM_2 + 2),r4
0156 8D03       871            mov     (__divulong_PARM_2 + 3),r5
0158 90A200     872            mov     dptr,#0xA200
015B 75F04A     873            mov     b,#0x4A
015E 7404       874            mov     a,#0x04
0160 120000     875            lcall   __divulong
0163 AA82       876            mov     r2,dpl
0165 AB83       877            mov     r3,dph
0167 ACF0       878            mov     r4,b
0169 FD         879            mov     r5,a
016A 750018     880            mov     __divulong_PARM_2,#0x18
016D E4         881            clr     a
016E F501       882            mov     (__divulong_PARM_2 + 1),a
0170 F502       883            mov     (__divulong_PARM_2 + 2),a
0172 F503       884            mov     (__divulong_PARM_2 + 3),a
0174 8A82       885            mov     dpl,r2
0176 8B83       886            mov     dph,r3
0178 8CF0       887            mov     b,r4
017A ED         888            mov     a,r5
017B 120000     889            lcall   __divulong
017E AA82       890            mov     r2,dpl
0180 AB83       891            mov     r3,dph
0182 ACF0       892            mov     r4,b
0184 FD         893            mov     r5,a
0185 E4         894            clr     a
0186 C3         895            clr     c
0187 9A         896            subb    a,r2
0188 FA         897            mov     r2,a
0189 E4         898            clr     a
018A 9B         899            subb    a,r3
018B FB         900            mov     r3,a
018C 7401       901            mov     a,#0x01
018E 9C         902            subb    a,r4
018F E4         903            clr     a
0190 9D         904            subb    a,r5
0191 8A95       905            mov     _SBRL1,r2
0193 8B96       906            mov     (_SBRL1 >> 8),r3
0195            907   ;        EFM8_JDY40_Receiver.c:168: TI1 = 1; // indicate ready for TX
0195 D2C9       908            setb    _TI1
0197            909   ;        EFM8_JDY40_Receiver.c:169: SBCON1 |= 0x40;   // enable baud rate generator
0197 439440     910            orl     _SBCON1,#0x40
019A            911   ;        EFM8_JDY40_Receiver.c:170: SFRPAGE = 0x00;
019A 75A700     912            mov     _SFRPAGE,#0x00
019D 22         913            ret
019E            914   ;------------------------------------------------------------
019E            915   ;Allocation info for local variables in function 'putchar1'
019E            916   ;------------------------------------------------------------
019E            917   ;c                         Allocated to registers r2 
019E            918   ;------------------------------------------------------------
019E            919   ;        EFM8_JDY40_Receiver.c:173: void putchar1 (char c) 
019E            920   ;        -----------------------------------------
019E            921   ;         function putchar1
019E            922   ;        -----------------------------------------
019E            923   _putchar1:
019E AA82       924            mov     r2,dpl
01A0            925   ;        EFM8_JDY40_Receiver.c:175: SFRPAGE = 0x20;
01A0 75A720     926            mov     _SFRPAGE,#0x20
01A3            927   ;        EFM8_JDY40_Receiver.c:176: while (!TI1);
01A3            928   L007001?:
01A3            929   ;        EFM8_JDY40_Receiver.c:177: TI1=0;
01A3 10C9D0     930            jbc     _TI1,L007008?
01A6 8000       931            sjmp    L007001?
01A8            932   L007008?:
01A8            933   ;        EFM8_JDY40_Receiver.c:178: SBUF1 = c;
01A8 8A92       934            mov     _SBUF1,r2
01AA            935   ;        EFM8_JDY40_Receiver.c:179: SFRPAGE = 0x00;
01AA 75A700     936            mov     _SFRPAGE,#0x00
01AD 22         937            ret
01AE            938   ;------------------------------------------------------------
01AE            939   ;Allocation info for local variables in function 'sendstr1'
01AE            940   ;------------------------------------------------------------
01AE            941   ;s                         Allocated to registers r2 r3 r4 
01AE            942   ;------------------------------------------------------------
01AE            943   ;        EFM8_JDY40_Receiver.c:182: void sendstr1 (char * s)
01AE            944   ;        -----------------------------------------
01AE            945   ;         function sendstr1
01AE            946   ;        -----------------------------------------
01AE            947   _sendstr1:
01AE AA82       948            mov     r2,dpl
01B0 AB83       949            mov     r3,dph
01B2 ACF0       950            mov     r4,b
01B4            951   ;        EFM8_JDY40_Receiver.c:184: while(*s)
01B4            952   L008001?:
01B4 8A82       953            mov     dpl,r2
01B6 8B83       954            mov     dph,r3
01B8 8CF0       955            mov     b,r4
01BA 120000     956            lcall   __gptrget
01BD FD         957            mov     r5,a
01BE 6000       958            jz      L008004?
01C0            959   ;        EFM8_JDY40_Receiver.c:186: putchar1(*s);
01C0 8D82       960            mov     dpl,r5
01C2 C002       961            push    ar2
01C4 C003       962            push    ar3
01C6 C004       963            push    ar4
01C8 120000     964            lcall   _putchar1
01CB D004       965            pop     ar4
01CD D003       966            pop     ar3
01CF D002       967            pop     ar2
01D1            968   ;        EFM8_JDY40_Receiver.c:187: s++;         
01D1 0A         969            inc     r2
01D2 BA0010     970            cjne    r2,#0x00,L008001?
01D5 0B         971            inc     r3
01D6 8000       972            sjmp    L008001?
01D8            973   L008004?:
01D8 22         974            ret
01D9            975   ;------------------------------------------------------------
01D9            976   ;Allocation info for local variables in function 'getchar1'
01D9            977   ;------------------------------------------------------------
01D9            978   ;c                         Allocated to registers 
01D9            979   ;------------------------------------------------------------
01D9            980   ;        EFM8_JDY40_Receiver.c:191: char getchar1 (void)
01D9            981   ;        -----------------------------------------
01D9            982   ;         function getchar1
01D9            983   ;        -----------------------------------------
01D9            984   _getchar1:
01D9            985   ;        EFM8_JDY40_Receiver.c:194: SFRPAGE = 0x20;
01D9 75A720     986            mov     _SFRPAGE,#0x20
01DC            987   ;        EFM8_JDY40_Receiver.c:195: while (!RI1);
01DC            988   L009001?:
01DC            989   ;        EFM8_JDY40_Receiver.c:196: RI1=0;
01DC 10C810     990            jbc     _RI1,L009008?
01DF 8000       991            sjmp    L009001?
01E1            992   L009008?:
01E1            993   ;        EFM8_JDY40_Receiver.c:198: SCON1&=0b_0011_1111;
01E1 53C83F     994            anl     _SCON1,#0x3F
01E4            995   ;        EFM8_JDY40_Receiver.c:199: c = SBUF1;
01E4 859282     996            mov     dpl,_SBUF1
01E7            997   ;        EFM8_JDY40_Receiver.c:200: SFRPAGE = 0x00;
01E7 75A700     998            mov     _SFRPAGE,#0x00
01EA            999   ;        EFM8_JDY40_Receiver.c:201: return (c);
01EA 22        1000            ret
01EB           1001   ;------------------------------------------------------------
01EB           1002   ;Allocation info for local variables in function 'getchar1_with_timeout'
01EB           1003   ;------------------------------------------------------------
01EB           1004   ;c                         Allocated to registers 
01EB           1005   ;timeout                   Allocated to registers r2 r3 
01EB           1006   ;------------------------------------------------------------
01EB           1007   ;        EFM8_JDY40_Receiver.c:204: char getchar1_with_timeout (void)
01EB           1008   ;        -----------------------------------------
01EB           1009   ;         function getchar1_with_timeout
01EB           1010   ;        -----------------------------------------
01EB           1011   _getchar1_with_timeout:
01EB           1012   ;        EFM8_JDY40_Receiver.c:208: SFRPAGE = 0x20;
01EB 75A720    1013            mov     _SFRPAGE,#0x20
01EE           1014   ;        EFM8_JDY40_Receiver.c:210: while (!RI1)
01EE 7A00      1015            mov     r2,#0x00
01F0 7B00      1016            mov     r3,#0x00
01F2           1017   L010003?:
01F2 20C890    1018            jb      _RI1,L010005?
01F5           1019   ;        EFM8_JDY40_Receiver.c:212: SFRPAGE = 0x00;
01F5 75A700    1020            mov     _SFRPAGE,#0x00
01F8           1021   ;        EFM8_JDY40_Receiver.c:213: Timer3us(20);
01F8 758214    1022            mov     dpl,#0x14
01FB C002      1023            push    ar2
01FD C003      1024            push    ar3
01FF 120000    1025            lcall   _Timer3us
0202 D003      1026            pop     ar3
0204 D002      1027            pop     ar2
0206           1028   ;        EFM8_JDY40_Receiver.c:214: SFRPAGE = 0x20;
0206 75A720    1029            mov     _SFRPAGE,#0x20
0209           1030   ;        EFM8_JDY40_Receiver.c:215: timeout++;
0209 0A        1031            inc     r2
020A BA00D0    1032            cjne    r2,#0x00,L010012?
020D 0B        1033            inc     r3
020E           1034   L010012?:
020E           1035   ;        EFM8_JDY40_Receiver.c:216: if(timeout==25000)
020E BAA850    1036            cjne    r2,#0xA8,L010003?
0211 BB6150    1037            cjne    r3,#0x61,L010003?
0214           1038   ;        EFM8_JDY40_Receiver.c:218: SFRPAGE = 0x00;
0214 75A700    1039            mov     _SFRPAGE,#0x00
0217           1040   ;        EFM8_JDY40_Receiver.c:219: return ('\n'); // Timeout after half second
0217 75820A    1041            mov     dpl,#0x0A
021A 22        1042            ret
021B           1043   L010005?:
021B           1044   ;        EFM8_JDY40_Receiver.c:222: RI1=0;
021B C2C8      1045            clr     _RI1
021D           1046   ;        EFM8_JDY40_Receiver.c:224: SCON1&=0b_0011_1111;
021D 53C83F    1047            anl     _SCON1,#0x3F
0220           1048   ;        EFM8_JDY40_Receiver.c:225: c = SBUF1;
0220 859282    1049            mov     dpl,_SBUF1
0223           1050   ;        EFM8_JDY40_Receiver.c:226: SFRPAGE = 0x00;
0223 75A700    1051            mov     _SFRPAGE,#0x00
0226           1052   ;        EFM8_JDY40_Receiver.c:227: return (c);
0226 22        1053            ret
0227           1054   ;------------------------------------------------------------
0227           1055   ;Allocation info for local variables in function 'getstr1'
0227           1056   ;------------------------------------------------------------
0227           1057   ;s                         Allocated to registers r2 r3 r4 
0227           1058   ;c                         Allocated to registers r5 
0227           1059   ;------------------------------------------------------------
0227           1060   ;        EFM8_JDY40_Receiver.c:230: void getstr1 (char * s)
0227           1061   ;        -----------------------------------------
0227           1062   ;         function getstr1
0227           1063   ;        -----------------------------------------
0227           1064   _getstr1:
0227 AA82      1065            mov     r2,dpl
0229 AB83      1066            mov     r3,dph
022B ACF0      1067            mov     r4,b
022D           1068   ;        EFM8_JDY40_Receiver.c:234: while(1)
022D           1069   L011004?:
022D           1070   ;        EFM8_JDY40_Receiver.c:236: c=getchar1_with_timeout();
022D C002      1071            push    ar2
022F C003      1072            push    ar3
0231 C004      1073            push    ar4
0233 120000    1074            lcall   _getchar1_with_timeout
0236 AD82      1075            mov     r5,dpl
0238 D004      1076            pop     ar4
023A D003      1077            pop     ar3
023C D002      1078            pop     ar2
023E           1079   ;        EFM8_JDY40_Receiver.c:237: if(c=='\n')
023E BD0A50    1080            cjne    r5,#0x0A,L011002?
0241           1081   ;        EFM8_JDY40_Receiver.c:239: *s=0;
0241 8A82      1082            mov     dpl,r2
0243 8B83      1083            mov     dph,r3
0245 8CF0      1084            mov     b,r4
0247 E4        1085            clr     a
0248           1086   ;        EFM8_JDY40_Receiver.c:240: return;
0248 020000    1087            ljmp    __gptrput
024B           1088   L011002?:
024B           1089   ;        EFM8_JDY40_Receiver.c:242: *s=c;
024B 8A82      1090            mov     dpl,r2
024D 8B83      1091            mov     dph,r3
024F 8CF0      1092            mov     b,r4
0251 ED        1093            mov     a,r5
0252 120000    1094            lcall   __gptrput
0255 A3        1095            inc     dptr
0256 AA82      1096            mov     r2,dpl
0258 AB83      1097            mov     r3,dph
025A           1098   ;        EFM8_JDY40_Receiver.c:243: s++;
025A 8000      1099            sjmp    L011004?
025C           1100   ;------------------------------------------------------------
025C           1101   ;Allocation info for local variables in function 'RXU1'
025C           1102   ;------------------------------------------------------------
025C           1103   ;------------------------------------------------------------
025C           1104   ;        EFM8_JDY40_Receiver.c:248: bit RXU1 (void)
025C           1105   ;        -----------------------------------------
025C           1106   ;         function RXU1
025C           1107   ;        -----------------------------------------
025C           1108   _RXU1:
025C           1109   ;        EFM8_JDY40_Receiver.c:251: SFRPAGE = 0x20;
025C 75A720    1110            mov     _SFRPAGE,#0x20
025F           1111   ;        EFM8_JDY40_Receiver.c:252: mybit=RI1;
025F A2C8      1112            mov     c,_RI1
0261           1113   ;        EFM8_JDY40_Receiver.c:253: SFRPAGE = 0x00;
0261 75A700    1114            mov     _SFRPAGE,#0x00
0264           1115   ;        EFM8_JDY40_Receiver.c:254: return mybit;
0264 22        1116            ret
0265           1117   ;------------------------------------------------------------
0265           1118   ;Allocation info for local variables in function 'waitms_or_RI1'
0265           1119   ;------------------------------------------------------------
0265           1120   ;ms                        Allocated to registers r2 r3 
0265           1121   ;j                         Allocated to registers r4 r5 
0265           1122   ;k                         Allocated to registers r6 
0265           1123   ;------------------------------------------------------------
0265           1124   ;        EFM8_JDY40_Receiver.c:257: void waitms_or_RI1 (unsigned int ms)
0265           1125   ;        -----------------------------------------
0265           1126   ;         function waitms_or_RI1
0265           1127   ;        -----------------------------------------
0265           1128   _waitms_or_RI1:
0265 AA82      1129            mov     r2,dpl
0267 AB83      1130            mov     r3,dph
0269           1131   ;        EFM8_JDY40_Receiver.c:261: for(j=0; j<ms; j++)
0269 7C00      1132            mov     r4,#0x00
026B 7D00      1133            mov     r5,#0x00
026D           1134   L013007?:
026D C3        1135            clr     c
026E EC        1136            mov     a,r4
026F 9A        1137            subb    a,r2
0270 ED        1138            mov     a,r5
0271 9B        1139            subb    a,r3
0272 5000      1140            jnc     L013011?
0274           1141   ;        EFM8_JDY40_Receiver.c:263: for (k=0; k<4; k++)
0274 7E00      1142            mov     r6,#0x00
0276           1143   L013003?:
0276 BE0490    1144            cjne    r6,#0x04,L013019?
0279           1145   L013019?:
0279 5000      1146            jnc     L013009?
027B           1147   ;        EFM8_JDY40_Receiver.c:265: if(RXU1()) return;
027B C002      1148            push    ar2
027D C003      1149            push    ar3
027F C004      1150            push    ar4
0281 C005      1151            push    ar5
0283 C006      1152            push    ar6
0285 120000    1153            lcall   _RXU1
0288 E4        1154            clr     a
0289 33        1155            rlc     a
028A D006      1156            pop     ar6
028C D005      1157            pop     ar5
028E D004      1158            pop     ar4
0290 D003      1159            pop     ar3
0292 D002      1160            pop     ar2
0294 6000      1161            jz      L013002?
0296 22        1162            ret
0297           1163   L013002?:
0297           1164   ;        EFM8_JDY40_Receiver.c:266: Timer3us(250);
0297 7582FA    1165            mov     dpl,#0xFA
029A C002      1166            push    ar2
029C C003      1167            push    ar3
029E C004      1168            push    ar4
02A0 C005      1169            push    ar5
02A2 C006      1170            push    ar6
02A4 120000    1171            lcall   _Timer3us
02A7 D006      1172            pop     ar6
02A9 D005      1173            pop     ar5
02AB D004      1174            pop     ar4
02AD D003      1175            pop     ar3
02AF D002      1176            pop     ar2
02B1           1177   ;        EFM8_JDY40_Receiver.c:263: for (k=0; k<4; k++)
02B1 0E        1178            inc     r6
02B2 8000      1179            sjmp    L013003?
02B4           1180   L013009?:
02B4           1181   ;        EFM8_JDY40_Receiver.c:261: for(j=0; j<ms; j++)
02B4 0C        1182            inc     r4
02B5 BC00D0    1183            cjne    r4,#0x00,L013007?
02B8 0D        1184            inc     r5
02B9 8000      1185            sjmp    L013007?
02BB           1186   L013011?:
02BB 22        1187            ret
02BC           1188   ;------------------------------------------------------------
02BC           1189   ;Allocation info for local variables in function 'SendATCommand'
02BC           1190   ;------------------------------------------------------------
02BC           1191   ;s                         Allocated to registers r2 r3 r4 
02BC           1192   ;------------------------------------------------------------
02BC           1193   ;        EFM8_JDY40_Receiver.c:271: void SendATCommand (char * s)
02BC           1194   ;        -----------------------------------------
02BC           1195   ;         function SendATCommand
02BC           1196   ;        -----------------------------------------
02BC           1197   _SendATCommand:
02BC AA82      1198            mov     r2,dpl
02BE AB83      1199            mov     r3,dph
02C0 ACF0      1200            mov     r4,b
02C2           1201   ;        EFM8_JDY40_Receiver.c:273: printf("Command: %s", s);
02C2 C002      1202            push    ar2
02C4 C003      1203            push    ar3
02C6 C004      1204            push    ar4
02C8 C002      1205            push    ar2
02CA C003      1206            push    ar3
02CC C004      1207            push    ar4
02CE 7450      1208            mov     a,#__str_0
02D0 C0E0      1209            push    acc
02D2 74C1      1210            mov     a,#(__str_0 >> 8)
02D4 C0E0      1211            push    acc
02D6 7480      1212            mov     a,#0x80
02D8 C0E0      1213            push    acc
02DA 120000    1214            lcall   _printf
02DD E581      1215            mov     a,sp
02DF 24FA      1216            add     a,#0xfa
02E1 F581      1217            mov     sp,a
02E3           1218   ;        EFM8_JDY40_Receiver.c:274: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02E3 C2A0      1219            clr     _P2_0
02E5           1220   ;        EFM8_JDY40_Receiver.c:275: waitms(5);
02E5 900005    1221            mov     dptr,#0x0005
02E8 120000    1222            lcall   _waitms
02EB D004      1223            pop     ar4
02ED D003      1224            pop     ar3
02EF D002      1225            pop     ar2
02F1           1226   ;        EFM8_JDY40_Receiver.c:276: sendstr1(s);
02F1 8A82      1227            mov     dpl,r2
02F3 8B83      1228            mov     dph,r3
02F5 8CF0      1229            mov     b,r4
02F7 120000    1230            lcall   _sendstr1
02FA           1231   ;        EFM8_JDY40_Receiver.c:277: waitms(10);
02FA 90000A    1232            mov     dptr,#0x000A
02FD 120000    1233            lcall   _waitms
0300           1234   ;        EFM8_JDY40_Receiver.c:278: P2_0=1; // 'set' pin to 1 is normal operation mode.
0300 D2A0      1235            setb    _P2_0
0302 22        1236            ret
0303           1237   ;------------------------------------------------------------
0303           1238   ;Allocation info for local variables in function 'main'
0303           1239   ;------------------------------------------------------------
0303           1240   ;sXAngle                   Allocated with name '_main_sXAngle_1_97'
0303           1241   ;sYAngle                   Allocated with name '_main_sYAngle_1_97'
0303           1242   ;iXAngle                   Allocated to registers r2 r3 r4 r5 
0303           1243   ;iYAngle                   Allocated with name '_main_sloc0_1_0'
0303           1244   ;i                         Allocated with name '_main_i_1_97'
0303           1245   ;j                         Allocated with name '_main_j_1_97'
0303           1246   ;pulse_width               Allocated with name '_main_pulse_width_1_97'
0303           1247   ;motor_on                  Allocated with name '_main_motor_on_1_97'
0303           1248   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0303           1249   ;------------------------------------------------------------
0303           1250   ;        EFM8_JDY40_Receiver.c:281: void main (void)
0303           1251   ;        -----------------------------------------
0303           1252   ;         function main
0303           1253   ;        -----------------------------------------
0303           1254   _main:
0303           1255   ;        EFM8_JDY40_Receiver.c:285: float iXAngle = 0;
0303 7A00      1256            mov     r2,#0x00
0305 7B00      1257            mov     r3,#0x00
0307 7C00      1258            mov     r4,#0x00
0309           1259   ;        EFM8_JDY40_Receiver.c:286: float iYAngle = 0;
0309           1260   ;        EFM8_JDY40_Receiver.c:293: int motor_on = 0;
0309           1261   ;        EFM8_JDY40_Receiver.c:295: count20ms=0; // Count20ms is an atomic variable, so no problem sharing with timer 5 ISR
0309 E4        1262            clr     a
030A FD        1263            mov     r5,a
030B F580      1264            mov     _main_sloc0_1_0,a
030D F581      1265            mov     (_main_sloc0_1_0 + 1),a
030F F582      1266            mov     (_main_sloc0_1_0 + 2),a
0311 F583      1267            mov     (_main_sloc0_1_0 + 3),a
0313 F540      1268            mov     _main_motor_on_1_97,a
0315 F541      1269            mov     (_main_motor_on_1_97 + 1),a
0317 F530      1270            mov     _count20ms,a
0319           1271   ;        EFM8_JDY40_Receiver.c:296: waitms(500);
0319 9001F4    1272            mov     dptr,#0x01F4
031C C002      1273            push    ar2
031E C003      1274            push    ar3
0320 C004      1275            push    ar4
0322 C005      1276            push    ar5
0324 120000    1277            lcall   _waitms
0327           1278   ;        EFM8_JDY40_Receiver.c:297: printf("\r\nJDY-40 test\r\n");
0327 7410      1279            mov     a,#__str_1
0329 C0E0      1280            push    acc
032B 74C2      1281            mov     a,#(__str_1 >> 8)
032D C0E0      1282            push    acc
032F 7480      1283            mov     a,#0x80
0331 C0E0      1284            push    acc
0333 120000    1285            lcall   _printf
0336 1581      1286            dec     sp
0338 1581      1287            dec     sp
033A 1581      1288            dec     sp
033C           1289   ;        EFM8_JDY40_Receiver.c:298: UART1_Init(9600);
033C 902580    1290            mov     dptr,#0x2580
033F E4        1291            clr     a
0340 F5F0      1292            mov     b,a
0342 120000    1293            lcall   _UART1_Init
0345           1294   ;        EFM8_JDY40_Receiver.c:314: SendATCommand("AT+DVID2385\r\n");  
0345 90C250    1295            mov     dptr,#__str_2
0348 75F080    1296            mov     b,#0x80
034B 120000    1297            lcall   _SendATCommand
034E           1298   ;        EFM8_JDY40_Receiver.c:317: SendATCommand("AT+VER\r\n");
034E 90C290    1299            mov     dptr,#__str_3
0351 75F080    1300            mov     b,#0x80
0354 120000    1301            lcall   _SendATCommand
0357           1302   ;        EFM8_JDY40_Receiver.c:318: SendATCommand("AT+BAUD\r\n");
0357 90C2D0    1303            mov     dptr,#__str_4
035A 75F080    1304            mov     b,#0x80
035D 120000    1305            lcall   _SendATCommand
0360           1306   ;        EFM8_JDY40_Receiver.c:319: SendATCommand("AT+RFID\r\n");
0360 90C310    1307            mov     dptr,#__str_5
0363 75F080    1308            mov     b,#0x80
0366 120000    1309            lcall   _SendATCommand
0369           1310   ;        EFM8_JDY40_Receiver.c:320: SendATCommand("AT+DVID\r\n");
0369 90C350    1311            mov     dptr,#__str_6
036C 75F080    1312            mov     b,#0x80
036F 120000    1313            lcall   _SendATCommand
0372           1314   ;        EFM8_JDY40_Receiver.c:321: SendATCommand("AT+RFC\r\n");
0372 90C390    1315            mov     dptr,#__str_7
0375 75F080    1316            mov     b,#0x80
0378 120000    1317            lcall   _SendATCommand
037B           1318   ;        EFM8_JDY40_Receiver.c:322: SendATCommand("AT+POWE\r\n");
037B 90C3D0    1319            mov     dptr,#__str_8
037E 75F080    1320            mov     b,#0x80
0381 120000    1321            lcall   _SendATCommand
0384           1322   ;        EFM8_JDY40_Receiver.c:323: SendATCommand("AT+CLSS\r\n");
0384 90C410    1323            mov     dptr,#__str_9
0387 75F080    1324            mov     b,#0x80
038A 120000    1325            lcall   _SendATCommand
038D D005      1326            pop     ar5
038F D004      1327            pop     ar4
0391 D003      1328            pop     ar3
0393 D002      1329            pop     ar2
0395           1330   ;        EFM8_JDY40_Receiver.c:325: while(1)
0395           1331   L015011?:
0395           1332   ;        EFM8_JDY40_Receiver.c:338: pwm_reload=0x10000L-(SYSCLK*1.5*1.0e-3)/12.0;
0395 75B0D8    1333            mov     _pwm_reload,#0xD8
0398 75B1DC    1334            mov     (_pwm_reload + 1),#0xDC
039B           1335   ;        EFM8_JDY40_Receiver.c:340: if(RXU1())
039B C002      1336            push    ar2
039D C003      1337            push    ar3
039F C004      1338            push    ar4
03A1 C005      1339            push    ar5
03A3 120000    1340            lcall   _RXU1
03A6 E4        1341            clr     a
03A7 33        1342            rlc     a
03A8 D005      1343            pop     ar5
03AA D004      1344            pop     ar4
03AC D003      1345            pop     ar3
03AE D002      1346            pop     ar2
03B0 7000      1347            jnz     L015035?
03B2 020000    1348            ljmp    L015002?
03B5           1349   L015035?:
03B5           1350   ;        EFM8_JDY40_Receiver.c:342: getstr1(buff);
03B5 9014F0    1351            mov     dptr,#_buff
03B8 75F040    1352            mov     b,#0x40
03BB 120000    1353            lcall   _getstr1
03BE           1354   ;        EFM8_JDY40_Receiver.c:344: for(i = 0; i < 5; i++){
03BE E4        1355            clr     a
03BF F5B0      1356            mov     _main_i_1_97,a
03C1 F5B1      1357            mov     (_main_i_1_97 + 1),a
03C3           1358   L015013?:
03C3 C3        1359            clr     c
03C4 E5B0      1360            mov     a,_main_i_1_97
03C6 9405      1361            subb    a,#0x05
03C8 E5B1      1362            mov     a,(_main_i_1_97 + 1)
03CA 6480      1363            xrl     a,#0x80
03CC 9480      1364            subb    a,#0x80
03CE 5000      1365            jnc     L015016?
03D0           1366   ;        EFM8_JDY40_Receiver.c:345: sXAngle[i] = buff[i];
03D0 E5B0      1367            mov     a,_main_i_1_97
03D2 2420      1368            add     a,#_main_sXAngle_1_97
03D4 F8        1369            mov     r0,a
03D5 E5B0      1370            mov     a,_main_i_1_97
03D7 24F0      1371            add     a,#_buff
03D9 F9        1372            mov     r1,a
03DA 8706      1373            mov     ar6,@r1
03DC A606      1374            mov     @r0,ar6
03DE           1375   ;        EFM8_JDY40_Receiver.c:344: for(i = 0; i < 5; i++){
03DE 05B0      1376            inc     _main_i_1_97
03E0 E4        1377            clr     a
03E1 B5B010    1378            cjne    a,_main_i_1_97,L015013?
03E4 05B1      1379            inc     (_main_i_1_97 + 1)
03E6 8000      1380            sjmp    L015013?
03E8           1381   L015016?:
03E8           1382   ;        EFM8_JDY40_Receiver.c:347: for(j = 7; j < 11; j++){
03E8 75F007    1383            mov     _main_j_1_97,#0x07
03EB E4        1384            clr     a
03EC F5F1      1385            mov     (_main_j_1_97 + 1),a
03EE           1386   L015017?:
03EE C3        1387            clr     c
03EF E5F0      1388            mov     a,_main_j_1_97
03F1 940B      1389            subb    a,#0x0B
03F3 E5F1      1390            mov     a,(_main_j_1_97 + 1)
03F5 6480      1391            xrl     a,#0x80
03F7 9480      1392            subb    a,#0x80
03F9 5000      1393            jnc     L015020?
03FB           1394   ;        EFM8_JDY40_Receiver.c:348: sYAngle[j-7] = buff[j];
03FB E5F0      1395            mov     a,_main_j_1_97
03FD 24F9      1396            add     a,#0xf9
03FF 2470      1397            add     a,#_main_sYAngle_1_97
0401 F8        1398            mov     r0,a
0402 E5F0      1399            mov     a,_main_j_1_97
0404 24F0      1400            add     a,#_buff
0406 F9        1401            mov     r1,a
0407 8706      1402            mov     ar6,@r1
0409 A606      1403            mov     @r0,ar6
040B           1404   ;        EFM8_JDY40_Receiver.c:347: for(j = 7; j < 11; j++){
040B 05F0      1405            inc     _main_j_1_97
040D E4        1406            clr     a
040E B5F090    1407            cjne    a,_main_j_1_97,L015017?
0411 05F1      1408            inc     (_main_j_1_97 + 1)
0413 8000      1409            sjmp    L015017?
0415           1410   L015020?:
0415           1411   ;        EFM8_JDY40_Receiver.c:351: iXAngle = atof(sXAngle);
0415 90B520    1412            mov     dptr,#_main_sXAngle_1_97
0418 75F040    1413            mov     b,#0x40
041B 120000    1414            lcall   _atof
041E AA82      1415            mov     r2,dpl
0420 AB83      1416            mov     r3,dph
0422 ACF0      1417            mov     r4,b
0424 FD        1418            mov     r5,a
0425           1419   ;        EFM8_JDY40_Receiver.c:352: iYAngle = atof(sYAngle);
0425 90B570    1420            mov     dptr,#_main_sYAngle_1_97
0428 75F040    1421            mov     b,#0x40
042B C002      1422            push    ar2
042D C003      1423            push    ar3
042F C004      1424            push    ar4
0431 C005      1425            push    ar5
0433 120000    1426            lcall   _atof
0436 858280    1427            mov     _main_sloc0_1_0,dpl
0439 858381    1428            mov     (_main_sloc0_1_0 + 1),dph
043C 85F082    1429            mov     (_main_sloc0_1_0 + 2),b
043F F583      1430            mov     (_main_sloc0_1_0 + 3),a
0441 D005      1431            pop     ar5
0443 D004      1432            pop     ar4
0445 D003      1433            pop     ar3
0447 D002      1434            pop     ar2
0449           1435   L015002?:
0449           1436   ;        EFM8_JDY40_Receiver.c:361: if(P3_7 == 0 && !motor_on){
0449 20B750    1437            jb      _P3_7,L015007?
044C E540      1438            mov     a,_main_motor_on_1_97
044E 4541      1439            orl     a,(_main_motor_on_1_97 + 1)
0450 7000      1440            jnz     L015007?
0452           1441   ;        EFM8_JDY40_Receiver.c:362: motor_on = 1;
0452 754001    1442            mov     _main_motor_on_1_97,#0x01
0455 E4        1443            clr     a
0456 F541      1444            mov     (_main_motor_on_1_97 + 1),a
0458 8000      1445            sjmp    L015008?
045A           1446   L015007?:
045A           1447   ;        EFM8_JDY40_Receiver.c:363: }else if(P3_7 == 0 && motor_on){
045A 20B790    1448            jb      _P3_7,L015008?
045D E540      1449            mov     a,_main_motor_on_1_97
045F 4541      1450            orl     a,(_main_motor_on_1_97 + 1)
0461 6000      1451            jz      L015008?
0463           1452   ;        EFM8_JDY40_Receiver.c:364: motor_on = 0;
0463 E4        1453            clr     a
0464 F540      1454            mov     _main_motor_on_1_97,a
0466 F541      1455            mov     (_main_motor_on_1_97 + 1),a
0468           1456   L015008?:
0468           1457   ;        EFM8_JDY40_Receiver.c:367: printf("LX: %0.4f, RY: %0.4f\n, Motor State: %d", iXAngle, iYAngle, motor_on);
0468 C002      1458            push    ar2
046A C003      1459            push    ar3
046C C004      1460            push    ar4
046E C005      1461            push    ar5
0470 C040      1462            push    _main_motor_on_1_97
0472 C041      1463            push    (_main_motor_on_1_97 + 1)
0474 C080      1464            push    _main_sloc0_1_0
0476 C081      1465            push    (_main_sloc0_1_0 + 1)
0478 C082      1466            push    (_main_sloc0_1_0 + 2)
047A C083      1467            push    (_main_sloc0_1_0 + 3)
047C C002      1468            push    ar2
047E C003      1469            push    ar3
0480 C004      1470            push    ar4
0482 C005      1471            push    ar5
0484 74D0      1472            mov     a,#__str_10
0486 C0E0      1473            push    acc
0488 74C6      1474            mov     a,#(__str_10 >> 8)
048A C0E0      1475            push    acc
048C 7480      1476            mov     a,#0x80
048E C0E0      1477            push    acc
0490 120000    1478            lcall   _printf
0493 E581      1479            mov     a,sp
0495 24F3      1480            add     a,#0xf3
0497 F581      1481            mov     sp,a
0499           1482   ;        EFM8_JDY40_Receiver.c:369: waitms_or_RI1(100);
0499 900064    1483            mov     dptr,#0x0064
049C 120000    1484            lcall   _waitms_or_RI1
049F D005      1485            pop     ar5
04A1 D004      1486            pop     ar4
04A3 D003      1487            pop     ar3
04A5 D002      1488            pop     ar2
04A7 020000    1489            ljmp    L015011?
04AA           1490            rseg R_CSEG
04AA           1491   
0000           1492            rseg R_XINIT
0000           1493   
0000           1494            rseg R_CONST
0000           1495   __str_0:
0000 436F6D6D  1496            db 'Command: %s'
     616E643A
     202573
000B 00        1497            db 0x00
000C           1498   __str_1:
000C 0D        1499            db 0x0D
000D 0A        1500            db 0x0A
000E 4A44592D  1501            db 'JDY-40 test'
     34302074
     657374
0019 0D        1502            db 0x0D
001A 0A        1503            db 0x0A
001B 00        1504            db 0x00
001C           1505   __str_2:
001C 41542B44  1506            db 'AT+DVID2385'
     56494432
     333835
0027 0D        1507            db 0x0D
0028 0A        1508            db 0x0A
0029 00        1509            db 0x00
002A           1510   __str_3:
002A 41542B56  1511            db 'AT+VER'
     4552
0030 0D        1512            db 0x0D
0031 0A        1513            db 0x0A
0032 00        1514            db 0x00
0033           1515   __str_4:
0033 41542B42  1516            db 'AT+BAUD'
     415544
003A 0D        1517            db 0x0D
003B 0A        1518            db 0x0A
003C 00        1519            db 0x00
003D           1520   __str_5:
003D 41542B52  1521            db 'AT+RFID'
     464944
0044 0D        1522            db 0x0D
0045 0A        1523            db 0x0A
0046 00        1524            db 0x00
0047           1525   __str_6:
0047 41542B44  1526            db 'AT+DVID'
     564944
004E 0D        1527            db 0x0D
004F 0A        1528            db 0x0A
0050 00        1529            db 0x00
0051           1530   __str_7:
0051 41542B52  1531            db 'AT+RFC'
     4643
0057 0D        1532            db 0x0D
0058 0A        1533            db 0x0A
0059 00        1534            db 0x00
005A           1535   __str_8:
005A 41542B50  1536            db 'AT+POWE'
     4F5745
0061 0D        1537            db 0x0D
0062 0A        1538            db 0x0A
0063 00        1539            db 0x00
0064           1540   __str_9:
0064 41542B43  1541            db 'AT+CLSS'
     4C5353
006B 0D        1542            db 0x0D
006C 0A        1543            db 0x0A
006D 00        1544            db 0x00
006E           1545   __str_10:
006E 4C583A20  1546            db 'LX: %0.4f, RY: %0.4f'
     25302E34
     662C2052
     593A2025
     302E3466
0082 0A        1547            db 0x0A
0083 2C204D6F  1548            db ', Motor State: %d'
     746F7220
     53746174
     653A2025
     64
0094 00        1549            db 0x00
0095           1550   
0096           1551            CSEG
0096           1552   
0096           1553   end
