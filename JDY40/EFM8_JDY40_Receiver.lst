0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Fri Mar 15 17:24:53 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_Receiver
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _main
0000             27            public _SendATCommand
0000             28            public _waitms_or_RI1
0000             29            public _RXU1
0000             30            public _getstr1
0000             31            public _getchar1_with_timeout
0000             32            public _getchar1
0000             33            public _sendstr1
0000             34            public _putchar1
0000             35            public _UART1_Init
0000             36            public _waitms
0000             37            public _Timer3us
0000             38            public __c51_external_startup
0000             39            public _buff
0000             40   ;--------------------------------------------------------
0000             41   ; Special Function Registers
0000             42   ;--------------------------------------------------------
0000             43   _ACC            DATA 0xe0
0000             44   _ADC0ASAH       DATA 0xb6
0000             45   _ADC0ASAL       DATA 0xb5
0000             46   _ADC0ASCF       DATA 0xa1
0000             47   _ADC0ASCT       DATA 0xc7
0000             48   _ADC0CF0        DATA 0xbc
0000             49   _ADC0CF1        DATA 0xb9
0000             50   _ADC0CF2        DATA 0xdf
0000             51   _ADC0CN0        DATA 0xe8
0000             52   _ADC0CN1        DATA 0xb2
0000             53   _ADC0CN2        DATA 0xb3
0000             54   _ADC0GTH        DATA 0xc4
0000             55   _ADC0GTL        DATA 0xc3
0000             56   _ADC0H          DATA 0xbe
0000             57   _ADC0L          DATA 0xbd
0000             58   _ADC0LTH        DATA 0xc6
0000             59   _ADC0LTL        DATA 0xc5
0000             60   _ADC0MX         DATA 0xbb
0000             61   _B              DATA 0xf0
0000             62   _CKCON0         DATA 0x8e
0000             63   _CKCON1         DATA 0xa6
0000             64   _CLEN0          DATA 0xc6
0000             65   _CLIE0          DATA 0xc7
0000             66   _CLIF0          DATA 0xe8
0000             67   _CLKSEL         DATA 0xa9
0000             68   _CLOUT0         DATA 0xd1
0000             69   _CLU0CF         DATA 0xb1
0000             70   _CLU0FN         DATA 0xaf
0000             71   _CLU0MX         DATA 0x84
0000             72   _CLU1CF         DATA 0xb3
0000             73   _CLU1FN         DATA 0xb2
0000             74   _CLU1MX         DATA 0x85
0000             75   _CLU2CF         DATA 0xb6
0000             76   _CLU2FN         DATA 0xb5
0000             77   _CLU2MX         DATA 0x91
0000             78   _CLU3CF         DATA 0xbf
0000             79   _CLU3FN         DATA 0xbe
0000             80   _CLU3MX         DATA 0xae
0000             81   _CMP0CN0        DATA 0x9b
0000             82   _CMP0CN1        DATA 0x99
0000             83   _CMP0MD         DATA 0x9d
0000             84   _CMP0MX         DATA 0x9f
0000             85   _CMP1CN0        DATA 0xbf
0000             86   _CMP1CN1        DATA 0xac
0000             87   _CMP1MD         DATA 0xab
0000             88   _CMP1MX         DATA 0xaa
0000             89   _CRC0CN0        DATA 0xce
0000             90   _CRC0CN1        DATA 0x86
0000             91   _CRC0CNT        DATA 0xd3
0000             92   _CRC0DAT        DATA 0xcb
0000             93   _CRC0FLIP       DATA 0xcf
0000             94   _CRC0IN         DATA 0xca
0000             95   _CRC0ST         DATA 0xd2
0000             96   _DAC0CF0        DATA 0x91
0000             97   _DAC0CF1        DATA 0x92
0000             98   _DAC0H          DATA 0x85
0000             99   _DAC0L          DATA 0x84
0000            100   _DAC1CF0        DATA 0x93
0000            101   _DAC1CF1        DATA 0x94
0000            102   _DAC1H          DATA 0x8a
0000            103   _DAC1L          DATA 0x89
0000            104   _DAC2CF0        DATA 0x95
0000            105   _DAC2CF1        DATA 0x96
0000            106   _DAC2H          DATA 0x8c
0000            107   _DAC2L          DATA 0x8b
0000            108   _DAC3CF0        DATA 0x9a
0000            109   _DAC3CF1        DATA 0x9c
0000            110   _DAC3H          DATA 0x8e
0000            111   _DAC3L          DATA 0x8d
0000            112   _DACGCF0        DATA 0x88
0000            113   _DACGCF1        DATA 0x98
0000            114   _DACGCF2        DATA 0xa2
0000            115   _DERIVID        DATA 0xad
0000            116   _DEVICEID       DATA 0xb5
0000            117   _DPH            DATA 0x83
0000            118   _DPL            DATA 0x82
0000            119   _EIE1           DATA 0xe6
0000            120   _EIE2           DATA 0xf3
0000            121   _EIP1           DATA 0xbb
0000            122   _EIP1H          DATA 0xee
0000            123   _EIP2           DATA 0xed
0000            124   _EIP2H          DATA 0xf6
0000            125   _EMI0CN         DATA 0xe7
0000            126   _FLKEY          DATA 0xb7
0000            127   _HFO0CAL        DATA 0xc7
0000            128   _HFO1CAL        DATA 0xd6
0000            129   _HFOCN          DATA 0xef
0000            130   _I2C0ADM        DATA 0xff
0000            131   _I2C0CN0        DATA 0xba
0000            132   _I2C0DIN        DATA 0xbc
0000            133   _I2C0DOUT       DATA 0xbb
0000            134   _I2C0FCN0       DATA 0xad
0000            135   _I2C0FCN1       DATA 0xab
0000            136   _I2C0FCT        DATA 0xf5
0000            137   _I2C0SLAD       DATA 0xbd
0000            138   _I2C0STAT       DATA 0xb9
0000            139   _IE             DATA 0xa8
0000            140   _IP             DATA 0xb8
0000            141   _IPH            DATA 0xf2
0000            142   _IT01CF         DATA 0xe4
0000            143   _LFO0CN         DATA 0xb1
0000            144   _P0             DATA 0x80
0000            145   _P0MASK         DATA 0xfe
0000            146   _P0MAT          DATA 0xfd
0000            147   _P0MDIN         DATA 0xf1
0000            148   _P0MDOUT        DATA 0xa4
0000            149   _P0SKIP         DATA 0xd4
0000            150   _P1             DATA 0x90
0000            151   _P1MASK         DATA 0xee
0000            152   _P1MAT          DATA 0xed
0000            153   _P1MDIN         DATA 0xf2
0000            154   _P1MDOUT        DATA 0xa5
0000            155   _P1SKIP         DATA 0xd5
0000            156   _P2             DATA 0xa0
0000            157   _P2MASK         DATA 0xfc
0000            158   _P2MAT          DATA 0xfb
0000            159   _P2MDIN         DATA 0xf3
0000            160   _P2MDOUT        DATA 0xa6
0000            161   _P2SKIP         DATA 0xcc
0000            162   _P3             DATA 0xb0
0000            163   _P3MDIN         DATA 0xf4
0000            164   _P3MDOUT        DATA 0x9c
0000            165   _PCA0CENT       DATA 0x9e
0000            166   _PCA0CLR        DATA 0x9c
0000            167   _PCA0CN0        DATA 0xd8
0000            168   _PCA0CPH0       DATA 0xfc
0000            169   _PCA0CPH1       DATA 0xea
0000            170   _PCA0CPH2       DATA 0xec
0000            171   _PCA0CPH3       DATA 0xf5
0000            172   _PCA0CPH4       DATA 0x85
0000            173   _PCA0CPH5       DATA 0xde
0000            174   _PCA0CPL0       DATA 0xfb
0000            175   _PCA0CPL1       DATA 0xe9
0000            176   _PCA0CPL2       DATA 0xeb
0000            177   _PCA0CPL3       DATA 0xf4
0000            178   _PCA0CPL4       DATA 0x84
0000            179   _PCA0CPL5       DATA 0xdd
0000            180   _PCA0CPM0       DATA 0xda
0000            181   _PCA0CPM1       DATA 0xdb
0000            182   _PCA0CPM2       DATA 0xdc
0000            183   _PCA0CPM3       DATA 0xae
0000            184   _PCA0CPM4       DATA 0xaf
0000            185   _PCA0CPM5       DATA 0xcc
0000            186   _PCA0H          DATA 0xfa
0000            187   _PCA0L          DATA 0xf9
0000            188   _PCA0MD         DATA 0xd9
0000            189   _PCA0POL        DATA 0x96
0000            190   _PCA0PWM        DATA 0xf7
0000            191   _PCON0          DATA 0x87
0000            192   _PCON1          DATA 0xcd
0000            193   _PFE0CN         DATA 0xc1
0000            194   _PRTDRV         DATA 0xf6
0000            195   _PSCTL          DATA 0x8f
0000            196   _PSTAT0         DATA 0xaa
0000            197   _PSW            DATA 0xd0
0000            198   _REF0CN         DATA 0xd1
0000            199   _REG0CN         DATA 0xc9
0000            200   _REVID          DATA 0xb6
0000            201   _RSTSRC         DATA 0xef
0000            202   _SBCON1         DATA 0x94
0000            203   _SBRLH1         DATA 0x96
0000            204   _SBRLL1         DATA 0x95
0000            205   _SBUF           DATA 0x99
0000            206   _SBUF0          DATA 0x99
0000            207   _SBUF1          DATA 0x92
0000            208   _SCON           DATA 0x98
0000            209   _SCON0          DATA 0x98
0000            210   _SCON1          DATA 0xc8
0000            211   _SFRPAGE        DATA 0xa7
0000            212   _SFRPGCN        DATA 0xbc
0000            213   _SFRSTACK       DATA 0xd7
0000            214   _SMB0ADM        DATA 0xd6
0000            215   _SMB0ADR        DATA 0xd7
0000            216   _SMB0CF         DATA 0xc1
0000            217   _SMB0CN0        DATA 0xc0
0000            218   _SMB0DAT        DATA 0xc2
0000            219   _SMB0FCN0       DATA 0xc3
0000            220   _SMB0FCN1       DATA 0xc4
0000            221   _SMB0FCT        DATA 0xef
0000            222   _SMB0RXLN       DATA 0xc5
0000            223   _SMB0TC         DATA 0xac
0000            224   _SMOD1          DATA 0x93
0000            225   _SP             DATA 0x81
0000            226   _SPI0CFG        DATA 0xa1
0000            227   _SPI0CKR        DATA 0xa2
0000            228   _SPI0CN0        DATA 0xf8
0000            229   _SPI0DAT        DATA 0xa3
0000            230   _SPI0FCN0       DATA 0x9a
0000            231   _SPI0FCN1       DATA 0x9b
0000            232   _SPI0FCT        DATA 0xf7
0000            233   _SPI0PCF        DATA 0xdf
0000            234   _TCON           DATA 0x88
0000            235   _TH0            DATA 0x8c
0000            236   _TH1            DATA 0x8d
0000            237   _TL0            DATA 0x8a
0000            238   _TL1            DATA 0x8b
0000            239   _TMOD           DATA 0x89
0000            240   _TMR2CN0        DATA 0xc8
0000            241   _TMR2CN1        DATA 0xfd
0000            242   _TMR2H          DATA 0xcf
0000            243   _TMR2L          DATA 0xce
0000            244   _TMR2RLH        DATA 0xcb
0000            245   _TMR2RLL        DATA 0xca
0000            246   _TMR3CN0        DATA 0x91
0000            247   _TMR3CN1        DATA 0xfe
0000            248   _TMR3H          DATA 0x95
0000            249   _TMR3L          DATA 0x94
0000            250   _TMR3RLH        DATA 0x93
0000            251   _TMR3RLL        DATA 0x92
0000            252   _TMR4CN0        DATA 0x98
0000            253   _TMR4CN1        DATA 0xff
0000            254   _TMR4H          DATA 0xa5
0000            255   _TMR4L          DATA 0xa4
0000            256   _TMR4RLH        DATA 0xa3
0000            257   _TMR4RLL        DATA 0xa2
0000            258   _TMR5CN0        DATA 0xc0
0000            259   _TMR5CN1        DATA 0xf1
0000            260   _TMR5H          DATA 0xd5
0000            261   _TMR5L          DATA 0xd4
0000            262   _TMR5RLH        DATA 0xd3
0000            263   _TMR5RLL        DATA 0xd2
0000            264   _UART0PCF       DATA 0xd9
0000            265   _UART1FCN0      DATA 0x9d
0000            266   _UART1FCN1      DATA 0xd8
0000            267   _UART1FCT       DATA 0xfa
0000            268   _UART1LIN       DATA 0x9e
0000            269   _UART1PCF       DATA 0xda
0000            270   _VDM0CN         DATA 0xff
0000            271   _WDTCN          DATA 0x97
0000            272   _XBR0           DATA 0xe1
0000            273   _XBR1           DATA 0xe2
0000            274   _XBR2           DATA 0xe3
0000            275   _XOSC0CN        DATA 0x86
0000            276   _DPTR           DATA 0x8382
0000            277   _TMR2RL         DATA 0xcbca
0000            278   _TMR3RL         DATA 0x9392
0000            279   _TMR4RL         DATA 0xa3a2
0000            280   _TMR5RL         DATA 0xd3d2
0000            281   _TMR0           DATA 0x8c8a
0000            282   _TMR1           DATA 0x8d8b
0000            283   _TMR2           DATA 0xcfce
0000            284   _TMR3           DATA 0x9594
0000            285   _TMR4           DATA 0xa5a4
0000            286   _TMR5           DATA 0xd5d4
0000            287   _SBRL1          DATA 0x9695
0000            288   _PCA0           DATA 0xfaf9
0000            289   _PCA0CP0        DATA 0xfcfb
0000            290   _PCA0CP1        DATA 0xeae9
0000            291   _PCA0CP2        DATA 0xeceb
0000            292   _PCA0CP3        DATA 0xf5f4
0000            293   _PCA0CP4        DATA 0x8584
0000            294   _PCA0CP5        DATA 0xdedd
0000            295   _ADC0ASA        DATA 0xb6b5
0000            296   _ADC0GT         DATA 0xc4c3
0000            297   _ADC0           DATA 0xbebd
0000            298   _ADC0LT         DATA 0xc6c5
0000            299   _DAC0           DATA 0x8584
0000            300   _DAC1           DATA 0x8a89
0000            301   _DAC2           DATA 0x8c8b
0000            302   _DAC3           DATA 0x8e8d
0000            303   ;--------------------------------------------------------
0000            304   ; special function bits
0000            305   ;--------------------------------------------------------
0000            306   _ACC_0          BIT 0xe0
0000            307   _ACC_1          BIT 0xe1
0000            308   _ACC_2          BIT 0xe2
0000            309   _ACC_3          BIT 0xe3
0000            310   _ACC_4          BIT 0xe4
0000            311   _ACC_5          BIT 0xe5
0000            312   _ACC_6          BIT 0xe6
0000            313   _ACC_7          BIT 0xe7
0000            314   _TEMPE          BIT 0xe8
0000            315   _ADGN0          BIT 0xe9
0000            316   _ADGN1          BIT 0xea
0000            317   _ADWINT         BIT 0xeb
0000            318   _ADBUSY         BIT 0xec
0000            319   _ADINT          BIT 0xed
0000            320   _IPOEN          BIT 0xee
0000            321   _ADEN           BIT 0xef
0000            322   _B_0            BIT 0xf0
0000            323   _B_1            BIT 0xf1
0000            324   _B_2            BIT 0xf2
0000            325   _B_3            BIT 0xf3
0000            326   _B_4            BIT 0xf4
0000            327   _B_5            BIT 0xf5
0000            328   _B_6            BIT 0xf6
0000            329   _B_7            BIT 0xf7
0000            330   _C0FIF          BIT 0xe8
0000            331   _C0RIF          BIT 0xe9
0000            332   _C1FIF          BIT 0xea
0000            333   _C1RIF          BIT 0xeb
0000            334   _C2FIF          BIT 0xec
0000            335   _C2RIF          BIT 0xed
0000            336   _C3FIF          BIT 0xee
0000            337   _C3RIF          BIT 0xef
0000            338   _D1SRC0         BIT 0x88
0000            339   _D1SRC1         BIT 0x89
0000            340   _D1AMEN         BIT 0x8a
0000            341   _D01REFSL       BIT 0x8b
0000            342   _D3SRC0         BIT 0x8c
0000            343   _D3SRC1         BIT 0x8d
0000            344   _D3AMEN         BIT 0x8e
0000            345   _D23REFSL       BIT 0x8f
0000            346   _D0UDIS         BIT 0x98
0000            347   _D1UDIS         BIT 0x99
0000            348   _D2UDIS         BIT 0x9a
0000            349   _D3UDIS         BIT 0x9b
0000            350   _EX0            BIT 0xa8
0000            351   _ET0            BIT 0xa9
0000            352   _EX1            BIT 0xaa
0000            353   _ET1            BIT 0xab
0000            354   _ES0            BIT 0xac
0000            355   _ET2            BIT 0xad
0000            356   _ESPI0          BIT 0xae
0000            357   _EA             BIT 0xaf
0000            358   _PX0            BIT 0xb8
0000            359   _PT0            BIT 0xb9
0000            360   _PX1            BIT 0xba
0000            361   _PT1            BIT 0xbb
0000            362   _PS0            BIT 0xbc
0000            363   _PT2            BIT 0xbd
0000            364   _PSPI0          BIT 0xbe
0000            365   _P0_0           BIT 0x80
0000            366   _P0_1           BIT 0x81
0000            367   _P0_2           BIT 0x82
0000            368   _P0_3           BIT 0x83
0000            369   _P0_4           BIT 0x84
0000            370   _P0_5           BIT 0x85
0000            371   _P0_6           BIT 0x86
0000            372   _P0_7           BIT 0x87
0000            373   _P1_0           BIT 0x90
0000            374   _P1_1           BIT 0x91
0000            375   _P1_2           BIT 0x92
0000            376   _P1_3           BIT 0x93
0000            377   _P1_4           BIT 0x94
0000            378   _P1_5           BIT 0x95
0000            379   _P1_6           BIT 0x96
0000            380   _P1_7           BIT 0x97
0000            381   _P2_0           BIT 0xa0
0000            382   _P2_1           BIT 0xa1
0000            383   _P2_2           BIT 0xa2
0000            384   _P2_3           BIT 0xa3
0000            385   _P2_4           BIT 0xa4
0000            386   _P2_5           BIT 0xa5
0000            387   _P2_6           BIT 0xa6
0000            388   _P3_0           BIT 0xb0
0000            389   _P3_1           BIT 0xb1
0000            390   _P3_2           BIT 0xb2
0000            391   _P3_3           BIT 0xb3
0000            392   _P3_4           BIT 0xb4
0000            393   _P3_7           BIT 0xb7
0000            394   _CCF0           BIT 0xd8
0000            395   _CCF1           BIT 0xd9
0000            396   _CCF2           BIT 0xda
0000            397   _CCF3           BIT 0xdb
0000            398   _CCF4           BIT 0xdc
0000            399   _CCF5           BIT 0xdd
0000            400   _CR             BIT 0xde
0000            401   _CF             BIT 0xdf
0000            402   _PARITY         BIT 0xd0
0000            403   _F1             BIT 0xd1
0000            404   _OV             BIT 0xd2
0000            405   _RS0            BIT 0xd3
0000            406   _RS1            BIT 0xd4
0000            407   _F0             BIT 0xd5
0000            408   _AC             BIT 0xd6
0000            409   _CY             BIT 0xd7
0000            410   _RI             BIT 0x98
0000            411   _TI             BIT 0x99
0000            412   _RB8            BIT 0x9a
0000            413   _TB8            BIT 0x9b
0000            414   _REN            BIT 0x9c
0000            415   _CE             BIT 0x9d
0000            416   _SMODE          BIT 0x9e
0000            417   _RI1            BIT 0xc8
0000            418   _TI1            BIT 0xc9
0000            419   _RBX1           BIT 0xca
0000            420   _TBX1           BIT 0xcb
0000            421   _REN1           BIT 0xcc
0000            422   _PERR1          BIT 0xcd
0000            423   _OVR1           BIT 0xce
0000            424   _SI             BIT 0xc0
0000            425   _ACK            BIT 0xc1
0000            426   _ARBLOST        BIT 0xc2
0000            427   _ACKRQ          BIT 0xc3
0000            428   _STO            BIT 0xc4
0000            429   _STA            BIT 0xc5
0000            430   _TXMODE         BIT 0xc6
0000            431   _MASTER         BIT 0xc7
0000            432   _SPIEN          BIT 0xf8
0000            433   _TXNF           BIT 0xf9
0000            434   _NSSMD0         BIT 0xfa
0000            435   _NSSMD1         BIT 0xfb
0000            436   _RXOVRN         BIT 0xfc
0000            437   _MODF           BIT 0xfd
0000            438   _WCOL           BIT 0xfe
0000            439   _SPIF           BIT 0xff
0000            440   _IT0            BIT 0x88
0000            441   _IE0            BIT 0x89
0000            442   _IT1            BIT 0x8a
0000            443   _IE1            BIT 0x8b
0000            444   _TR0            BIT 0x8c
0000            445   _TF0            BIT 0x8d
0000            446   _TR1            BIT 0x8e
0000            447   _TF1            BIT 0x8f
0000            448   _T2XCLK0        BIT 0xc8
0000            449   _T2XCLK1        BIT 0xc9
0000            450   _TR2            BIT 0xca
0000            451   _T2SPLIT        BIT 0xcb
0000            452   _TF2CEN         BIT 0xcc
0000            453   _TF2LEN         BIT 0xcd
0000            454   _TF2L           BIT 0xce
0000            455   _TF2H           BIT 0xcf
0000            456   _T4XCLK0        BIT 0x98
0000            457   _T4XCLK1        BIT 0x99
0000            458   _TR4            BIT 0x9a
0000            459   _T4SPLIT        BIT 0x9b
0000            460   _TF4CEN         BIT 0x9c
0000            461   _TF4LEN         BIT 0x9d
0000            462   _TF4L           BIT 0x9e
0000            463   _TF4H           BIT 0x9f
0000            464   _T5XCLK0        BIT 0xc0
0000            465   _T5XCLK1        BIT 0xc1
0000            466   _TR5            BIT 0xc2
0000            467   _T5SPLIT        BIT 0xc3
0000            468   _TF5CEN         BIT 0xc4
0000            469   _TF5LEN         BIT 0xc5
0000            470   _TF5L           BIT 0xc6
0000            471   _TF5H           BIT 0xc7
0000            472   _RIE            BIT 0xd8
0000            473   _RXTO0          BIT 0xd9
0000            474   _RXTO1          BIT 0xda
0000            475   _RFRQ           BIT 0xdb
0000            476   _TIE            BIT 0xdc
0000            477   _TXHOLD         BIT 0xdd
0000            478   _TXNF1          BIT 0xde
0000            479   _TFRQ           BIT 0xdf
0000            480   ;--------------------------------------------------------
0000            481   ; overlayable register banks
0000            482   ;--------------------------------------------------------
0000            483            rbank0 segment data overlay
0000            484   ;--------------------------------------------------------
0000            485   ; internal ram data
0000            486   ;--------------------------------------------------------
0000            487            rseg R_DSEG
0000            488   _main_sXAngle_1_94:
0000            489            ds 4
0004            490   _main_sYAngle_1_94:
0004            491            ds 4
0008            492   ;--------------------------------------------------------
0008            493   ; overlayable items in internal ram 
0008            494   ;--------------------------------------------------------
0000            495            rseg    R_OSEG
0000            496            rseg    R_OSEG
0000            497            rseg    R_OSEG
0000            498   ;--------------------------------------------------------
0000            499   ; indirectly addressable internal ram data
0000            500   ;--------------------------------------------------------
0000            501            rseg R_ISEG
0000            502   _buff:
0000            503            ds 20
0014            504   ;--------------------------------------------------------
0014            505   ; absolute internal ram data
0014            506   ;--------------------------------------------------------
0000            507            DSEG
0000            508   ;--------------------------------------------------------
0000            509   ; bit data
0000            510   ;--------------------------------------------------------
0000            511            rseg R_BSEG
0000            512   ;--------------------------------------------------------
0000            513   ; paged external ram data
0000            514   ;--------------------------------------------------------
0000            515            rseg R_PSEG
0000            516   ;--------------------------------------------------------
0000            517   ; external ram data
0000            518   ;--------------------------------------------------------
0000            519            rseg R_XSEG
0000            520   ;--------------------------------------------------------
0000            521   ; absolute external ram data
0000            522   ;--------------------------------------------------------
0000            523            XSEG
0000            524   ;--------------------------------------------------------
0000            525   ; external initialized ram data
0000            526   ;--------------------------------------------------------
0000            527            rseg R_IXSEG
0000            528            rseg R_HOME
0000            529            rseg R_GSINIT
0000            530            rseg R_CSEG
0000            531   ;--------------------------------------------------------
0000            532   ; Reset entry point and interrupt vectors
0000            533   ;--------------------------------------------------------
0000            534            CSEG at 0x0000
0000 020000     535            ljmp    _crt0
0003            536   ;--------------------------------------------------------
0003            537   ; global & static initialisations
0003            538   ;--------------------------------------------------------
0000            539            rseg R_HOME
0000            540            rseg R_GSINIT
0000            541            rseg R_GSINIT
0000            542   ;--------------------------------------------------------
0000            543   ; data variables initialization
0000            544   ;--------------------------------------------------------
0000            545            rseg R_DINIT
0000            546            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            547   ;--------------------------------------------------------
0000            548   ; code
0000            549   ;--------------------------------------------------------
0000            550            rseg R_CSEG
0000            551   ;------------------------------------------------------------
0000            552   ;Allocation info for local variables in function '_c51_external_startup'
0000            553   ;------------------------------------------------------------
0000            554   ;------------------------------------------------------------
0000            555   ;        EFM8_JDY40_Receiver.c:11: char _c51_external_startup (void)
0000            556   ;        -----------------------------------------
0000            557   ;         function _c51_external_startup
0000            558   ;        -----------------------------------------
0000            559   __c51_external_startup:
0000            560            using   0
0000            561   ;        EFM8_JDY40_Receiver.c:14: SFRPAGE = 0x00;
0000 75A700     562            mov     _SFRPAGE,#0x00
0003            563   ;        EFM8_JDY40_Receiver.c:15: WDTCN = 0xDE; //First key
0003 7597DE     564            mov     _WDTCN,#0xDE
0006            565   ;        EFM8_JDY40_Receiver.c:16: WDTCN = 0xAD; //Second key
0006 7597AD     566            mov     _WDTCN,#0xAD
0009            567   ;        EFM8_JDY40_Receiver.c:18: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     568            mov     _VDM0CN,#0x80
000C            569   ;        EFM8_JDY40_Receiver.c:19: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     570            mov     _RSTSRC,#0x06
000F            571   ;        EFM8_JDY40_Receiver.c:26: SFRPAGE = 0x10;
000F 75A710     572            mov     _SFRPAGE,#0x10
0012            573   ;        EFM8_JDY40_Receiver.c:27: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     574            mov     _PFE0CN,#0x20
0015            575   ;        EFM8_JDY40_Receiver.c:28: SFRPAGE = 0x00;
0015 75A700     576            mov     _SFRPAGE,#0x00
0018            577   ;        EFM8_JDY40_Receiver.c:49: CLKSEL = 0x00;
0018 75A900     578            mov     _CLKSEL,#0x00
001B            579   ;        EFM8_JDY40_Receiver.c:50: CLKSEL = 0x00;
001B 75A900     580            mov     _CLKSEL,#0x00
001E            581   ;        EFM8_JDY40_Receiver.c:51: while ((CLKSEL & 0x80) == 0);
001E            582   L002001?:
001E E5A9       583            mov     a,_CLKSEL
0020 30E7F0     584            jnb     acc.7,L002001?
0023            585   ;        EFM8_JDY40_Receiver.c:52: CLKSEL = 0x03;
0023 75A903     586            mov     _CLKSEL,#0x03
0026            587   ;        EFM8_JDY40_Receiver.c:53: CLKSEL = 0x03;
0026 75A903     588            mov     _CLKSEL,#0x03
0029            589   ;        EFM8_JDY40_Receiver.c:54: while ((CLKSEL & 0x80) == 0);
0029            590   L002004?:
0029 E5A9       591            mov     a,_CLKSEL
002B 30E770     592            jnb     acc.7,L002004?
002E            593   ;        EFM8_JDY40_Receiver.c:59: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     594            orl     _P0MDOUT,#0x11
0031            595   ;        EFM8_JDY40_Receiver.c:60: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     596            orl     _P2MDOUT,#0x01
0034            597   ;        EFM8_JDY40_Receiver.c:61: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     598            mov     _XBR0,#0x01
0037            599   ;        EFM8_JDY40_Receiver.c:62: XBR1     = 0X00;
0037 75E200     600            mov     _XBR1,#0x00
003A            601   ;        EFM8_JDY40_Receiver.c:63: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     602            mov     _XBR2,#0x41
003D            603   ;        EFM8_JDY40_Receiver.c:69: SCON0 = 0x10;
003D 759810     604            mov     _SCON0,#0x10
0040            605   ;        EFM8_JDY40_Receiver.c:70: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     606            mov     _TH1,#0xE6
0043            607   ;        EFM8_JDY40_Receiver.c:71: TL1 = TH1;      // Init Timer1
0043 858D8B     608            mov     _TL1,_TH1
0046            609   ;        EFM8_JDY40_Receiver.c:72: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     610            anl     _TMOD,#0x0F
0049            611   ;        EFM8_JDY40_Receiver.c:73: TMOD |=  0x20;                       
0049 438920     612            orl     _TMOD,#0x20
004C            613   ;        EFM8_JDY40_Receiver.c:74: TR1 = 1; // START Timer1
004C D28E       614            setb    _TR1
004E            615   ;        EFM8_JDY40_Receiver.c:75: TI = 1;  // Indicate TX0 ready
004E D299       616            setb    _TI
0050            617   ;        EFM8_JDY40_Receiver.c:77: return 0;
0050 758200     618            mov     dpl,#0x00
0053 22         619            ret
0054            620   ;------------------------------------------------------------
0054            621   ;Allocation info for local variables in function 'Timer3us'
0054            622   ;------------------------------------------------------------
0054            623   ;us                        Allocated to registers r2 
0054            624   ;i                         Allocated to registers r3 
0054            625   ;------------------------------------------------------------
0054            626   ;        EFM8_JDY40_Receiver.c:81: void Timer3us(unsigned char us)
0054            627   ;        -----------------------------------------
0054            628   ;         function Timer3us
0054            629   ;        -----------------------------------------
0054            630   _Timer3us:
0054 AA82       631            mov     r2,dpl
0056            632   ;        EFM8_JDY40_Receiver.c:86: CKCON0|=0b_0100_0000;
0056 438E40     633            orl     _CKCON0,#0x40
0059            634   ;        EFM8_JDY40_Receiver.c:88: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0059 7592B8     635            mov     _TMR3RL,#0xB8
005C 7593FF     636            mov     (_TMR3RL >> 8),#0xFF
005F            637   ;        EFM8_JDY40_Receiver.c:89: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
005F 859294     638            mov     _TMR3,_TMR3RL
0062 859395     639            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0065            640   ;        EFM8_JDY40_Receiver.c:91: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0065 759104     641            mov     _TMR3CN0,#0x04
0068            642   ;        EFM8_JDY40_Receiver.c:92: for (i = 0; i < us; i++)       // Count <us> overflows
0068 7B00       643            mov     r3,#0x00
006A            644   L003004?:
006A C3         645            clr     c
006B EB         646            mov     a,r3
006C 9A         647            subb    a,r2
006D 5000       648            jnc     L003007?
006F            649   ;        EFM8_JDY40_Receiver.c:94: while (!(TMR3CN0 & 0x80));  // Wait for overflow
006F            650   L003001?:
006F E591       651            mov     a,_TMR3CN0
0071 30E770     652            jnb     acc.7,L003001?
0074            653   ;        EFM8_JDY40_Receiver.c:95: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0074 53917F     654            anl     _TMR3CN0,#0x7F
0077            655   ;        EFM8_JDY40_Receiver.c:92: for (i = 0; i < us; i++)       // Count <us> overflows
0077 0B         656            inc     r3
0078 8000       657            sjmp    L003004?
007A            658   L003007?:
007A            659   ;        EFM8_JDY40_Receiver.c:97: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
007A 759100     660            mov     _TMR3CN0,#0x00
007D 22         661            ret
007E            662   ;------------------------------------------------------------
007E            663   ;Allocation info for local variables in function 'waitms'
007E            664   ;------------------------------------------------------------
007E            665   ;ms                        Allocated to registers r2 r3 
007E            666   ;j                         Allocated to registers r4 r5 
007E            667   ;k                         Allocated to registers r6 
007E            668   ;------------------------------------------------------------
007E            669   ;        EFM8_JDY40_Receiver.c:100: void waitms (unsigned int ms)
007E            670   ;        -----------------------------------------
007E            671   ;         function waitms
007E            672   ;        -----------------------------------------
007E            673   _waitms:
007E AA82       674            mov     r2,dpl
0080 AB83       675            mov     r3,dph
0082            676   ;        EFM8_JDY40_Receiver.c:104: for(j=0; j<ms; j++)
0082 7C00       677            mov     r4,#0x00
0084 7D00       678            mov     r5,#0x00
0086            679   L004005?:
0086 C3         680            clr     c
0087 EC         681            mov     a,r4
0088 9A         682            subb    a,r2
0089 ED         683            mov     a,r5
008A 9B         684            subb    a,r3
008B 5000       685            jnc     L004009?
008D            686   ;        EFM8_JDY40_Receiver.c:105: for (k=0; k<4; k++) Timer3us(250);
008D 7E00       687            mov     r6,#0x00
008F            688   L004001?:
008F BE04B0     689            cjne    r6,#0x04,L004018?
0092            690   L004018?:
0092 5000       691            jnc     L004007?
0094 7582FA     692            mov     dpl,#0xFA
0097 C002       693            push    ar2
0099 C003       694            push    ar3
009B C004       695            push    ar4
009D C005       696            push    ar5
009F C006       697            push    ar6
00A1 120000     698            lcall   _Timer3us
00A4 D006       699            pop     ar6
00A6 D005       700            pop     ar5
00A8 D004       701            pop     ar4
00AA D003       702            pop     ar3
00AC D002       703            pop     ar2
00AE 0E         704            inc     r6
00AF 8000       705            sjmp    L004001?
00B1            706   L004007?:
00B1            707   ;        EFM8_JDY40_Receiver.c:104: for(j=0; j<ms; j++)
00B1 0C         708            inc     r4
00B2 BC00F0     709            cjne    r4,#0x00,L004005?
00B5 0D         710            inc     r5
00B6 8000       711            sjmp    L004005?
00B8            712   L004009?:
00B8 22         713            ret
00B9            714   ;------------------------------------------------------------
00B9            715   ;Allocation info for local variables in function 'UART1_Init'
00B9            716   ;------------------------------------------------------------
00B9            717   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00B9            718   ;------------------------------------------------------------
00B9            719   ;        EFM8_JDY40_Receiver.c:108: void UART1_Init (unsigned long baudrate)
00B9            720   ;        -----------------------------------------
00B9            721   ;         function UART1_Init
00B9            722   ;        -----------------------------------------
00B9            723   _UART1_Init:
00B9 AA82       724            mov     r2,dpl
00BB AB83       725            mov     r3,dph
00BD ACF0       726            mov     r4,b
00BF FD         727            mov     r5,a
00C0            728   ;        EFM8_JDY40_Receiver.c:110: SFRPAGE = 0x20;
00C0 75A720     729            mov     _SFRPAGE,#0x20
00C3            730   ;        EFM8_JDY40_Receiver.c:111: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00C3 75930C     731            mov     _SMOD1,#0x0C
00C6            732   ;        EFM8_JDY40_Receiver.c:112: SCON1 = 0x10;
00C6 75C810     733            mov     _SCON1,#0x10
00C9            734   ;        EFM8_JDY40_Receiver.c:113: SBCON1 =0x00;   // disable baud rate generator
00C9 759400     735            mov     _SBCON1,#0x00
00CC            736   ;        EFM8_JDY40_Receiver.c:114: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00CC 8A00       737            mov     __divulong_PARM_2,r2
00CE 8B01       738            mov     (__divulong_PARM_2 + 1),r3
00D0 8C02       739            mov     (__divulong_PARM_2 + 2),r4
00D2 8D03       740            mov     (__divulong_PARM_2 + 3),r5
00D4 90A200     741            mov     dptr,#0xA200
00D7 75F04A     742            mov     b,#0x4A
00DA 7404       743            mov     a,#0x04
00DC 120000     744            lcall   __divulong
00DF AA82       745            mov     r2,dpl
00E1 AB83       746            mov     r3,dph
00E3 ACF0       747            mov     r4,b
00E5 FD         748            mov     r5,a
00E6 750018     749            mov     __divulong_PARM_2,#0x18
00E9 E4         750            clr     a
00EA F501       751            mov     (__divulong_PARM_2 + 1),a
00EC F502       752            mov     (__divulong_PARM_2 + 2),a
00EE F503       753            mov     (__divulong_PARM_2 + 3),a
00F0 8A82       754            mov     dpl,r2
00F2 8B83       755            mov     dph,r3
00F4 8CF0       756            mov     b,r4
00F6 ED         757            mov     a,r5
00F7 120000     758            lcall   __divulong
00FA AA82       759            mov     r2,dpl
00FC AB83       760            mov     r3,dph
00FE ACF0       761            mov     r4,b
0100 FD         762            mov     r5,a
0101 E4         763            clr     a
0102 C3         764            clr     c
0103 9A         765            subb    a,r2
0104 FA         766            mov     r2,a
0105 E4         767            clr     a
0106 9B         768            subb    a,r3
0107 FB         769            mov     r3,a
0108 7401       770            mov     a,#0x01
010A 9C         771            subb    a,r4
010B E4         772            clr     a
010C 9D         773            subb    a,r5
010D 8A95       774            mov     _SBRL1,r2
010F 8B96       775            mov     (_SBRL1 >> 8),r3
0111            776   ;        EFM8_JDY40_Receiver.c:115: TI1 = 1; // indicate ready for TX
0111 D2C9       777            setb    _TI1
0113            778   ;        EFM8_JDY40_Receiver.c:116: SBCON1 |= 0x40;   // enable baud rate generator
0113 439440     779            orl     _SBCON1,#0x40
0116            780   ;        EFM8_JDY40_Receiver.c:117: SFRPAGE = 0x00;
0116 75A700     781            mov     _SFRPAGE,#0x00
0119 22         782            ret
011A            783   ;------------------------------------------------------------
011A            784   ;Allocation info for local variables in function 'putchar1'
011A            785   ;------------------------------------------------------------
011A            786   ;c                         Allocated to registers r2 
011A            787   ;------------------------------------------------------------
011A            788   ;        EFM8_JDY40_Receiver.c:120: void putchar1 (char c) 
011A            789   ;        -----------------------------------------
011A            790   ;         function putchar1
011A            791   ;        -----------------------------------------
011A            792   _putchar1:
011A AA82       793            mov     r2,dpl
011C            794   ;        EFM8_JDY40_Receiver.c:122: SFRPAGE = 0x20;
011C 75A720     795            mov     _SFRPAGE,#0x20
011F            796   ;        EFM8_JDY40_Receiver.c:123: while (!TI1);
011F            797   L006001?:
011F            798   ;        EFM8_JDY40_Receiver.c:124: TI1=0;
011F 10C940     799            jbc     _TI1,L006008?
0122 8000       800            sjmp    L006001?
0124            801   L006008?:
0124            802   ;        EFM8_JDY40_Receiver.c:125: SBUF1 = c;
0124 8A92       803            mov     _SBUF1,r2
0126            804   ;        EFM8_JDY40_Receiver.c:126: SFRPAGE = 0x00;
0126 75A700     805            mov     _SFRPAGE,#0x00
0129 22         806            ret
012A            807   ;------------------------------------------------------------
012A            808   ;Allocation info for local variables in function 'sendstr1'
012A            809   ;------------------------------------------------------------
012A            810   ;s                         Allocated to registers r2 r3 r4 
012A            811   ;------------------------------------------------------------
012A            812   ;        EFM8_JDY40_Receiver.c:129: void sendstr1 (char * s)
012A            813   ;        -----------------------------------------
012A            814   ;         function sendstr1
012A            815   ;        -----------------------------------------
012A            816   _sendstr1:
012A AA82       817            mov     r2,dpl
012C AB83       818            mov     r3,dph
012E ACF0       819            mov     r4,b
0130            820   ;        EFM8_JDY40_Receiver.c:131: while(*s)
0130            821   L007001?:
0130 8A82       822            mov     dpl,r2
0132 8B83       823            mov     dph,r3
0134 8CF0       824            mov     b,r4
0136 120000     825            lcall   __gptrget
0139 FD         826            mov     r5,a
013A 6000       827            jz      L007004?
013C            828   ;        EFM8_JDY40_Receiver.c:133: putchar1(*s);
013C 8D82       829            mov     dpl,r5
013E C002       830            push    ar2
0140 C003       831            push    ar3
0142 C004       832            push    ar4
0144 120000     833            lcall   _putchar1
0147 D004       834            pop     ar4
0149 D003       835            pop     ar3
014B D002       836            pop     ar2
014D            837   ;        EFM8_JDY40_Receiver.c:134: s++;         
014D 0A         838            inc     r2
014E BA0080     839            cjne    r2,#0x00,L007001?
0151 0B         840            inc     r3
0152 8000       841            sjmp    L007001?
0154            842   L007004?:
0154 22         843            ret
0155            844   ;------------------------------------------------------------
0155            845   ;Allocation info for local variables in function 'getchar1'
0155            846   ;------------------------------------------------------------
0155            847   ;c                         Allocated to registers 
0155            848   ;------------------------------------------------------------
0155            849   ;        EFM8_JDY40_Receiver.c:138: char getchar1 (void)
0155            850   ;        -----------------------------------------
0155            851   ;         function getchar1
0155            852   ;        -----------------------------------------
0155            853   _getchar1:
0155            854   ;        EFM8_JDY40_Receiver.c:141: SFRPAGE = 0x20;
0155 75A720     855            mov     _SFRPAGE,#0x20
0158            856   ;        EFM8_JDY40_Receiver.c:142: while (!RI1);
0158            857   L008001?:
0158            858   ;        EFM8_JDY40_Receiver.c:143: RI1=0;
0158 10C880     859            jbc     _RI1,L008008?
015B 8000       860            sjmp    L008001?
015D            861   L008008?:
015D            862   ;        EFM8_JDY40_Receiver.c:145: SCON1&=0b_0011_1111;
015D 53C83F     863            anl     _SCON1,#0x3F
0160            864   ;        EFM8_JDY40_Receiver.c:146: c = SBUF1;
0160 859282     865            mov     dpl,_SBUF1
0163            866   ;        EFM8_JDY40_Receiver.c:147: SFRPAGE = 0x00;
0163 75A700     867            mov     _SFRPAGE,#0x00
0166            868   ;        EFM8_JDY40_Receiver.c:148: return (c);
0166 22         869            ret
0167            870   ;------------------------------------------------------------
0167            871   ;Allocation info for local variables in function 'getchar1_with_timeout'
0167            872   ;------------------------------------------------------------
0167            873   ;c                         Allocated to registers 
0167            874   ;timeout                   Allocated to registers r2 r3 
0167            875   ;------------------------------------------------------------
0167            876   ;        EFM8_JDY40_Receiver.c:151: char getchar1_with_timeout (void)
0167            877   ;        -----------------------------------------
0167            878   ;         function getchar1_with_timeout
0167            879   ;        -----------------------------------------
0167            880   _getchar1_with_timeout:
0167            881   ;        EFM8_JDY40_Receiver.c:155: SFRPAGE = 0x20;
0167 75A720     882            mov     _SFRPAGE,#0x20
016A            883   ;        EFM8_JDY40_Receiver.c:157: while (!RI1)
016A 7A00       884            mov     r2,#0x00
016C 7B00       885            mov     r3,#0x00
016E            886   L009003?:
016E 20C800     887            jb      _RI1,L009005?
0171            888   ;        EFM8_JDY40_Receiver.c:159: SFRPAGE = 0x00;
0171 75A700     889            mov     _SFRPAGE,#0x00
0174            890   ;        EFM8_JDY40_Receiver.c:160: Timer3us(20);
0174 758214     891            mov     dpl,#0x14
0177 C002       892            push    ar2
0179 C003       893            push    ar3
017B 120000     894            lcall   _Timer3us
017E D003       895            pop     ar3
0180 D002       896            pop     ar2
0182            897   ;        EFM8_JDY40_Receiver.c:161: SFRPAGE = 0x20;
0182 75A720     898            mov     _SFRPAGE,#0x20
0185            899   ;        EFM8_JDY40_Receiver.c:162: timeout++;
0185 0A         900            inc     r2
0186 BA0040     901            cjne    r2,#0x00,L009012?
0189 0B         902            inc     r3
018A            903   L009012?:
018A            904   ;        EFM8_JDY40_Receiver.c:163: if(timeout==25000)
018A BAA8C0     905            cjne    r2,#0xA8,L009003?
018D BB61C0     906            cjne    r3,#0x61,L009003?
0190            907   ;        EFM8_JDY40_Receiver.c:165: SFRPAGE = 0x00;
0190 75A700     908            mov     _SFRPAGE,#0x00
0193            909   ;        EFM8_JDY40_Receiver.c:166: return ('\n'); // Timeout after half second
0193 75820A     910            mov     dpl,#0x0A
0196 22         911            ret
0197            912   L009005?:
0197            913   ;        EFM8_JDY40_Receiver.c:169: RI1=0;
0197 C2C8       914            clr     _RI1
0199            915   ;        EFM8_JDY40_Receiver.c:171: SCON1&=0b_0011_1111;
0199 53C83F     916            anl     _SCON1,#0x3F
019C            917   ;        EFM8_JDY40_Receiver.c:172: c = SBUF1;
019C 859282     918            mov     dpl,_SBUF1
019F            919   ;        EFM8_JDY40_Receiver.c:173: SFRPAGE = 0x00;
019F 75A700     920            mov     _SFRPAGE,#0x00
01A2            921   ;        EFM8_JDY40_Receiver.c:174: return (c);
01A2 22         922            ret
01A3            923   ;------------------------------------------------------------
01A3            924   ;Allocation info for local variables in function 'getstr1'
01A3            925   ;------------------------------------------------------------
01A3            926   ;s                         Allocated to registers r2 r3 r4 
01A3            927   ;c                         Allocated to registers r5 
01A3            928   ;------------------------------------------------------------
01A3            929   ;        EFM8_JDY40_Receiver.c:177: void getstr1 (char * s)
01A3            930   ;        -----------------------------------------
01A3            931   ;         function getstr1
01A3            932   ;        -----------------------------------------
01A3            933   _getstr1:
01A3 AA82       934            mov     r2,dpl
01A5 AB83       935            mov     r3,dph
01A7 ACF0       936            mov     r4,b
01A9            937   ;        EFM8_JDY40_Receiver.c:181: while(1)
01A9            938   L010004?:
01A9            939   ;        EFM8_JDY40_Receiver.c:183: c=getchar1_with_timeout();
01A9 C002       940            push    ar2
01AB C003       941            push    ar3
01AD C004       942            push    ar4
01AF 120000     943            lcall   _getchar1_with_timeout
01B2 AD82       944            mov     r5,dpl
01B4 D004       945            pop     ar4
01B6 D003       946            pop     ar3
01B8 D002       947            pop     ar2
01BA            948   ;        EFM8_JDY40_Receiver.c:184: if(c=='\n')
01BA BD0AC0     949            cjne    r5,#0x0A,L010002?
01BD            950   ;        EFM8_JDY40_Receiver.c:186: *s=0;
01BD 8A82       951            mov     dpl,r2
01BF 8B83       952            mov     dph,r3
01C1 8CF0       953            mov     b,r4
01C3 E4         954            clr     a
01C4            955   ;        EFM8_JDY40_Receiver.c:187: return;
01C4 020000     956            ljmp    __gptrput
01C7            957   L010002?:
01C7            958   ;        EFM8_JDY40_Receiver.c:189: *s=c;
01C7 8A82       959            mov     dpl,r2
01C9 8B83       960            mov     dph,r3
01CB 8CF0       961            mov     b,r4
01CD ED         962            mov     a,r5
01CE 120000     963            lcall   __gptrput
01D1 A3         964            inc     dptr
01D2 AA82       965            mov     r2,dpl
01D4 AB83       966            mov     r3,dph
01D6            967   ;        EFM8_JDY40_Receiver.c:190: s++;
01D6 8000       968            sjmp    L010004?
01D8            969   ;------------------------------------------------------------
01D8            970   ;Allocation info for local variables in function 'RXU1'
01D8            971   ;------------------------------------------------------------
01D8            972   ;------------------------------------------------------------
01D8            973   ;        EFM8_JDY40_Receiver.c:195: bit RXU1 (void)
01D8            974   ;        -----------------------------------------
01D8            975   ;         function RXU1
01D8            976   ;        -----------------------------------------
01D8            977   _RXU1:
01D8            978   ;        EFM8_JDY40_Receiver.c:198: SFRPAGE = 0x20;
01D8 75A720     979            mov     _SFRPAGE,#0x20
01DB            980   ;        EFM8_JDY40_Receiver.c:199: mybit=RI1;
01DB A2C8       981            mov     c,_RI1
01DD            982   ;        EFM8_JDY40_Receiver.c:200: SFRPAGE = 0x00;
01DD 75A700     983            mov     _SFRPAGE,#0x00
01E0            984   ;        EFM8_JDY40_Receiver.c:201: return mybit;
01E0 22         985            ret
01E1            986   ;------------------------------------------------------------
01E1            987   ;Allocation info for local variables in function 'waitms_or_RI1'
01E1            988   ;------------------------------------------------------------
01E1            989   ;ms                        Allocated to registers r2 r3 
01E1            990   ;j                         Allocated to registers r4 r5 
01E1            991   ;k                         Allocated to registers r6 
01E1            992   ;------------------------------------------------------------
01E1            993   ;        EFM8_JDY40_Receiver.c:204: void waitms_or_RI1 (unsigned int ms)
01E1            994   ;        -----------------------------------------
01E1            995   ;         function waitms_or_RI1
01E1            996   ;        -----------------------------------------
01E1            997   _waitms_or_RI1:
01E1 AA82       998            mov     r2,dpl
01E3 AB83       999            mov     r3,dph
01E5           1000   ;        EFM8_JDY40_Receiver.c:208: for(j=0; j<ms; j++)
01E5 7C00      1001            mov     r4,#0x00
01E7 7D00      1002            mov     r5,#0x00
01E9           1003   L012007?:
01E9 C3        1004            clr     c
01EA EC        1005            mov     a,r4
01EB 9A        1006            subb    a,r2
01EC ED        1007            mov     a,r5
01ED 9B        1008            subb    a,r3
01EE 5000      1009            jnc     L012011?
01F0           1010   ;        EFM8_JDY40_Receiver.c:210: for (k=0; k<4; k++)
01F0 7E00      1011            mov     r6,#0x00
01F2           1012   L012003?:
01F2 BE0400    1013            cjne    r6,#0x04,L012019?
01F5           1014   L012019?:
01F5 5000      1015            jnc     L012009?
01F7           1016   ;        EFM8_JDY40_Receiver.c:212: if(RXU1()) return;
01F7 C002      1017            push    ar2
01F9 C003      1018            push    ar3
01FB C004      1019            push    ar4
01FD C005      1020            push    ar5
01FF C006      1021            push    ar6
0201 120000    1022            lcall   _RXU1
0204 E4        1023            clr     a
0205 33        1024            rlc     a
0206 D006      1025            pop     ar6
0208 D005      1026            pop     ar5
020A D004      1027            pop     ar4
020C D003      1028            pop     ar3
020E D002      1029            pop     ar2
0210 6000      1030            jz      L012002?
0212 22        1031            ret
0213           1032   L012002?:
0213           1033   ;        EFM8_JDY40_Receiver.c:213: Timer3us(250);
0213 7582FA    1034            mov     dpl,#0xFA
0216 C002      1035            push    ar2
0218 C003      1036            push    ar3
021A C004      1037            push    ar4
021C C005      1038            push    ar5
021E C006      1039            push    ar6
0220 120000    1040            lcall   _Timer3us
0223 D006      1041            pop     ar6
0225 D005      1042            pop     ar5
0227 D004      1043            pop     ar4
0229 D003      1044            pop     ar3
022B D002      1045            pop     ar2
022D           1046   ;        EFM8_JDY40_Receiver.c:210: for (k=0; k<4; k++)
022D 0E        1047            inc     r6
022E 8000      1048            sjmp    L012003?
0230           1049   L012009?:
0230           1050   ;        EFM8_JDY40_Receiver.c:208: for(j=0; j<ms; j++)
0230 0C        1051            inc     r4
0231 BC0040    1052            cjne    r4,#0x00,L012007?
0234 0D        1053            inc     r5
0235 8000      1054            sjmp    L012007?
0237           1055   L012011?:
0237 22        1056            ret
0238           1057   ;------------------------------------------------------------
0238           1058   ;Allocation info for local variables in function 'SendATCommand'
0238           1059   ;------------------------------------------------------------
0238           1060   ;s                         Allocated to registers r2 r3 r4 
0238           1061   ;------------------------------------------------------------
0238           1062   ;        EFM8_JDY40_Receiver.c:218: void SendATCommand (char * s)
0238           1063   ;        -----------------------------------------
0238           1064   ;         function SendATCommand
0238           1065   ;        -----------------------------------------
0238           1066   _SendATCommand:
0238 AA82      1067            mov     r2,dpl
023A AB83      1068            mov     r3,dph
023C ACF0      1069            mov     r4,b
023E           1070   ;        EFM8_JDY40_Receiver.c:220: printf("Command: %s", s);
023E C002      1071            push    ar2
0240 C003      1072            push    ar3
0242 C004      1073            push    ar4
0244 C002      1074            push    ar2
0246 C003      1075            push    ar3
0248 C004      1076            push    ar4
024A 74C0      1077            mov     a,#__str_0
024C C0E0      1078            push    acc
024E 74BD      1079            mov     a,#(__str_0 >> 8)
0250 C0E0      1080            push    acc
0252 7480      1081            mov     a,#0x80
0254 C0E0      1082            push    acc
0256 120000    1083            lcall   _printf
0259 E581      1084            mov     a,sp
025B 24FA      1085            add     a,#0xfa
025D F581      1086            mov     sp,a
025F           1087   ;        EFM8_JDY40_Receiver.c:221: P2_0=0; // 'set' pin to 0 is 'AT' mode.
025F C2A0      1088            clr     _P2_0
0261           1089   ;        EFM8_JDY40_Receiver.c:222: waitms(5);
0261 900005    1090            mov     dptr,#0x0005
0264 120000    1091            lcall   _waitms
0267 D004      1092            pop     ar4
0269 D003      1093            pop     ar3
026B D002      1094            pop     ar2
026D           1095   ;        EFM8_JDY40_Receiver.c:223: sendstr1(s);
026D 8A82      1096            mov     dpl,r2
026F 8B83      1097            mov     dph,r3
0271 8CF0      1098            mov     b,r4
0273 120000    1099            lcall   _sendstr1
0276           1100   ;        EFM8_JDY40_Receiver.c:224: waitms(10);
0276 90000A    1101            mov     dptr,#0x000A
0279 120000    1102            lcall   _waitms
027C           1103   ;        EFM8_JDY40_Receiver.c:225: P2_0=1; // 'set' pin to 1 is normal operation mode.
027C D2A0      1104            setb    _P2_0
027E 22        1105            ret
027F           1106   ;------------------------------------------------------------
027F           1107   ;Allocation info for local variables in function 'main'
027F           1108   ;------------------------------------------------------------
027F           1109   ;sXAngle                   Allocated with name '_main_sXAngle_1_94'
027F           1110   ;sYAngle                   Allocated with name '_main_sYAngle_1_94'
027F           1111   ;iXAngle                   Allocated to registers r2 r3 
027F           1112   ;iYAngle                   Allocated to registers r4 r5 
027F           1113   ;i                         Allocated to registers r2 r3 
027F           1114   ;j                         Allocated to registers r4 r5 
027F           1115   ;------------------------------------------------------------
027F           1116   ;        EFM8_JDY40_Receiver.c:228: void main (void)
027F           1117   ;        -----------------------------------------
027F           1118   ;         function main
027F           1119   ;        -----------------------------------------
027F           1120   _main:
027F           1121   ;        EFM8_JDY40_Receiver.c:237: waitms(500);
027F 9001F4    1122            mov     dptr,#0x01F4
0282 120000    1123            lcall   _waitms
0285           1124   ;        EFM8_JDY40_Receiver.c:238: printf("\r\nJDY-40 test\r\n");
0285 7480      1125            mov     a,#__str_1
0287 C0E0      1126            push    acc
0289 74BE      1127            mov     a,#(__str_1 >> 8)
028B C0E0      1128            push    acc
028D 7480      1129            mov     a,#0x80
028F C0E0      1130            push    acc
0291 120000    1131            lcall   _printf
0294 1581      1132            dec     sp
0296 1581      1133            dec     sp
0298 1581      1134            dec     sp
029A           1135   ;        EFM8_JDY40_Receiver.c:239: UART1_Init(9600);
029A 902580    1136            mov     dptr,#0x2580
029D E4        1137            clr     a
029E F5F0      1138            mov     b,a
02A0 120000    1139            lcall   _UART1_Init
02A3           1140   ;        EFM8_JDY40_Receiver.c:255: SendATCommand("AT+DVID2385\r\n");  
02A3 90BEC0    1141            mov     dptr,#__str_2
02A6 75F080    1142            mov     b,#0x80
02A9 120000    1143            lcall   _SendATCommand
02AC           1144   ;        EFM8_JDY40_Receiver.c:258: SendATCommand("AT+VER\r\n");
02AC 90BF00    1145            mov     dptr,#__str_3
02AF 75F080    1146            mov     b,#0x80
02B2 120000    1147            lcall   _SendATCommand
02B5           1148   ;        EFM8_JDY40_Receiver.c:259: SendATCommand("AT+BAUD\r\n");
02B5 90BF40    1149            mov     dptr,#__str_4
02B8 75F080    1150            mov     b,#0x80
02BB 120000    1151            lcall   _SendATCommand
02BE           1152   ;        EFM8_JDY40_Receiver.c:260: SendATCommand("AT+RFID\r\n");
02BE 90BF80    1153            mov     dptr,#__str_5
02C1 75F080    1154            mov     b,#0x80
02C4 120000    1155            lcall   _SendATCommand
02C7           1156   ;        EFM8_JDY40_Receiver.c:261: SendATCommand("AT+DVID\r\n");
02C7 90BFC0    1157            mov     dptr,#__str_6
02CA 75F080    1158            mov     b,#0x80
02CD 120000    1159            lcall   _SendATCommand
02D0           1160   ;        EFM8_JDY40_Receiver.c:262: SendATCommand("AT+RFC\r\n");
02D0 90C000    1161            mov     dptr,#__str_7
02D3 75F080    1162            mov     b,#0x80
02D6 120000    1163            lcall   _SendATCommand
02D9           1164   ;        EFM8_JDY40_Receiver.c:263: SendATCommand("AT+POWE\r\n");
02D9 90C040    1165            mov     dptr,#__str_8
02DC 75F080    1166            mov     b,#0x80
02DF 120000    1167            lcall   _SendATCommand
02E2           1168   ;        EFM8_JDY40_Receiver.c:264: SendATCommand("AT+CLSS\r\n");
02E2 90C080    1169            mov     dptr,#__str_9
02E5 75F080    1170            mov     b,#0x80
02E8 120000    1171            lcall   _SendATCommand
02EB           1172   ;        EFM8_JDY40_Receiver.c:266: while(1)
02EB           1173   L014004?:
02EB           1174   ;        EFM8_JDY40_Receiver.c:268: if(RXU1())
02EB 120000    1175            lcall   _RXU1
02EE 4000      1176            jc      L014024?
02F0 020000    1177            ljmp    L014002?
02F3           1178   L014024?:
02F3           1179   ;        EFM8_JDY40_Receiver.c:270: getstr1(buff);
02F3 9014B0    1180            mov     dptr,#_buff
02F6 75F040    1181            mov     b,#0x40
02F9 120000    1182            lcall   _getstr1
02FC           1183   ;        EFM8_JDY40_Receiver.c:271: for(i = 1; i < 5; i++){
02FC 7A01      1184            mov     r2,#0x01
02FE 7B00      1185            mov     r3,#0x00
0300 7C01      1186            mov     r4,#0x01
0302 7D00      1187            mov     r5,#0x00
0304           1188   L014006?:
0304 C3        1189            clr     c
0305 EC        1190            mov     a,r4
0306 9405      1191            subb    a,#0x05
0308 ED        1192            mov     a,r5
0309 6480      1193            xrl     a,#0x80
030B 9480      1194            subb    a,#0x80
030D 5000      1195            jnc     L014022?
030F           1196   ;        EFM8_JDY40_Receiver.c:272: sXAngle[i - 1] = buff[i];
030F 8C06      1197            mov     ar6,r4
0311 EE        1198            mov     a,r6
0312 14        1199            dec     a
0313 2420      1200            add     a,#_main_sXAngle_1_94
0315 F8        1201            mov     r0,a
0316 EC        1202            mov     a,r4
0317 24B0      1203            add     a,#_buff
0319 F9        1204            mov     r1,a
031A 8706      1205            mov     ar6,@r1
031C A606      1206            mov     @r0,ar6
031E           1207   ;        EFM8_JDY40_Receiver.c:271: for(i = 1; i < 5; i++){
031E 0C        1208            inc     r4
031F BC0000    1209            cjne    r4,#0x00,L014026?
0322 0D        1210            inc     r5
0323           1211   L014026?:
0323 8C02      1212            mov     ar2,r4
0325 8D03      1213            mov     ar3,r5
0327 8000      1214            sjmp    L014006?
0329           1215   L014022?:
0329 8C02      1216            mov     ar2,r4
032B 8D03      1217            mov     ar3,r5
032D           1218   ;        EFM8_JDY40_Receiver.c:274: for(j = 5; j < 9; j++){
032D 7C05      1219            mov     r4,#0x05
032F 7D00      1220            mov     r5,#0x00
0331           1221   L014010?:
0331 C3        1222            clr     c
0332 EC        1223            mov     a,r4
0333 9409      1224            subb    a,#0x09
0335 ED        1225            mov     a,r5
0336 6480      1226            xrl     a,#0x80
0338 9480      1227            subb    a,#0x80
033A 5000      1228            jnc     L014013?
033C           1229   ;        EFM8_JDY40_Receiver.c:275: sYAngle[i - 1] = buff[j];
033C 8A06      1230            mov     ar6,r2
033E EE        1231            mov     a,r6
033F 14        1232            dec     a
0340 2470      1233            add     a,#_main_sYAngle_1_94
0342 F8        1234            mov     r0,a
0343 EC        1235            mov     a,r4
0344 24B0      1236            add     a,#_buff
0346 F9        1237            mov     r1,a
0347 8706      1238            mov     ar6,@r1
0349 A606      1239            mov     @r0,ar6
034B           1240   ;        EFM8_JDY40_Receiver.c:274: for(j = 5; j < 9; j++){
034B 0C        1241            inc     r4
034C BC0040    1242            cjne    r4,#0x00,L014010?
034F 0D        1243            inc     r5
0350 8000      1244            sjmp    L014010?
0352           1245   L014013?:
0352           1246   ;        EFM8_JDY40_Receiver.c:278: iXAngle = atoi(sXAngle);
0352 90B420    1247            mov     dptr,#_main_sXAngle_1_94
0355 75F040    1248            mov     b,#0x40
0358 120000    1249            lcall   _atoi
035B AA82      1250            mov     r2,dpl
035D AB83      1251            mov     r3,dph
035F           1252   ;        EFM8_JDY40_Receiver.c:279: iYAngle = atoi(sYAngle);
035F 90B470    1253            mov     dptr,#_main_sYAngle_1_94
0362 75F040    1254            mov     b,#0x40
0365 C002      1255            push    ar2
0367 C003      1256            push    ar3
0369 120000    1257            lcall   _atoi
036C AC82      1258            mov     r4,dpl
036E AD83      1259            mov     r5,dph
0370 D003      1260            pop     ar3
0372 D002      1261            pop     ar2
0374           1262   ;        EFM8_JDY40_Receiver.c:281: printf("RX: %d\r\n", iXAngle);
0374 C004      1263            push    ar4
0376 C005      1264            push    ar5
0378 C002      1265            push    ar2
037A C003      1266            push    ar3
037C 7400      1267            mov     a,#__str_10
037E C0E0      1268            push    acc
0380 74C3      1269            mov     a,#(__str_10 >> 8)
0382 C0E0      1270            push    acc
0384 7480      1271            mov     a,#0x80
0386 C0E0      1272            push    acc
0388 120000    1273            lcall   _printf
038B E581      1274            mov     a,sp
038D 24FB      1275            add     a,#0xfb
038F F581      1276            mov     sp,a
0391           1277   ;        EFM8_JDY40_Receiver.c:283: printf("LX: %d\r\n", iYAngle);
0391 7440      1278            mov     a,#__str_11
0393 C0E0      1279            push    acc
0395 74C3      1280            mov     a,#(__str_11 >> 8)
0397 C0E0      1281            push    acc
0399 7480      1282            mov     a,#0x80
039B C0E0      1283            push    acc
039D 120000    1284            lcall   _printf
03A0 E581      1285            mov     a,sp
03A2 24FB      1286            add     a,#0xfb
03A4 F581      1287            mov     sp,a
03A6           1288   L014002?:
03A6           1289   ;        EFM8_JDY40_Receiver.c:285: waitms_or_RI1(100);
03A6 900064    1290            mov     dptr,#0x0064
03A9 120000    1291            lcall   _waitms_or_RI1
03AC 020000    1292            ljmp    L014004?
03AF           1293            rseg R_CSEG
03AF           1294   
0000           1295            rseg R_XINIT
0000           1296   
0000           1297            rseg R_CONST
0000           1298   __str_0:
0000 436F6D6D  1299            db 'Command: %s'
     616E643A
     202573
000B 00        1300            db 0x00
000C           1301   __str_1:
000C 0D        1302            db 0x0D
000D 0A        1303            db 0x0A
000E 4A44592D  1304            db 'JDY-40 test'
     34302074
     657374
0019 0D        1305            db 0x0D
001A 0A        1306            db 0x0A
001B 00        1307            db 0x00
001C           1308   __str_2:
001C 41542B44  1309            db 'AT+DVID2385'
     56494432
     333835
0027 0D        1310            db 0x0D
0028 0A        1311            db 0x0A
0029 00        1312            db 0x00
002A           1313   __str_3:
002A 41542B56  1314            db 'AT+VER'
     4552
0030 0D        1315            db 0x0D
0031 0A        1316            db 0x0A
0032 00        1317            db 0x00
0033           1318   __str_4:
0033 41542B42  1319            db 'AT+BAUD'
     415544
003A 0D        1320            db 0x0D
003B 0A        1321            db 0x0A
003C 00        1322            db 0x00
003D           1323   __str_5:
003D 41542B52  1324            db 'AT+RFID'
     464944
0044 0D        1325            db 0x0D
0045 0A        1326            db 0x0A
0046 00        1327            db 0x00
0047           1328   __str_6:
0047 41542B44  1329            db 'AT+DVID'
     564944
004E 0D        1330            db 0x0D
004F 0A        1331            db 0x0A
0050 00        1332            db 0x00
0051           1333   __str_7:
0051 41542B52  1334            db 'AT+RFC'
     4643
0057 0D        1335            db 0x0D
0058 0A        1336            db 0x0A
0059 00        1337            db 0x00
005A           1338   __str_8:
005A 41542B50  1339            db 'AT+POWE'
     4F5745
0061 0D        1340            db 0x0D
0062 0A        1341            db 0x0A
0063 00        1342            db 0x00
0064           1343   __str_9:
0064 41542B43  1344            db 'AT+CLSS'
     4C5353
006B 0D        1345            db 0x0D
006C 0A        1346            db 0x0A
006D 00        1347            db 0x00
006E           1348   __str_10:
006E 52583A20  1349            db 'RX: %d'
     2564
0074 0D        1350            db 0x0D
0075 0A        1351            db 0x0A
0076 00        1352            db 0x00
0077           1353   __str_11:
0077 4C583A20  1354            db 'LX: %d'
     2564
007D 0D        1355            db 0x0D
007E 0A        1356            db 0x0A
007F 00        1357            db 0x00
0080           1358   
0003           1359            CSEG
0003           1360   
0003           1361   end
