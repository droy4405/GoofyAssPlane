0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Mon Apr 08 13:22:57 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_Transmitter
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _main
0000             28            public _SendATCommand
0000             29            public _waitms_or_RI1
0000             30            public _RXU1
0000             31            public _getstr1
0000             32            public _getchar1_with_timeout
0000             33            public _getchar1
0000             34            public _sendstr1
0000             35            public _putchar1
0000             36            public _UART1_Init
0000             37            public _throttle_control_ADC
0000             38            public _Volts_at_Pin
0000             39            public _ADC_at_Pin
0000             40            public _Get_ADC
0000             41            public _InitPinADC
0000             42            public _waitms
0000             43            public _Timer3us
0000             44            public _TIMER0_Init
0000             45            public _InitADC
0000             46            public __c51_external_startup
0000             47            public _buff
0000             48   ;--------------------------------------------------------
0000             49   ; Special Function Registers
0000             50   ;--------------------------------------------------------
0000             51   _ACC            DATA 0xe0
0000             52   _ADC0ASAH       DATA 0xb6
0000             53   _ADC0ASAL       DATA 0xb5
0000             54   _ADC0ASCF       DATA 0xa1
0000             55   _ADC0ASCT       DATA 0xc7
0000             56   _ADC0CF0        DATA 0xbc
0000             57   _ADC0CF1        DATA 0xb9
0000             58   _ADC0CF2        DATA 0xdf
0000             59   _ADC0CN0        DATA 0xe8
0000             60   _ADC0CN1        DATA 0xb2
0000             61   _ADC0CN2        DATA 0xb3
0000             62   _ADC0GTH        DATA 0xc4
0000             63   _ADC0GTL        DATA 0xc3
0000             64   _ADC0H          DATA 0xbe
0000             65   _ADC0L          DATA 0xbd
0000             66   _ADC0LTH        DATA 0xc6
0000             67   _ADC0LTL        DATA 0xc5
0000             68   _ADC0MX         DATA 0xbb
0000             69   _B              DATA 0xf0
0000             70   _CKCON0         DATA 0x8e
0000             71   _CKCON1         DATA 0xa6
0000             72   _CLEN0          DATA 0xc6
0000             73   _CLIE0          DATA 0xc7
0000             74   _CLIF0          DATA 0xe8
0000             75   _CLKSEL         DATA 0xa9
0000             76   _CLOUT0         DATA 0xd1
0000             77   _CLU0CF         DATA 0xb1
0000             78   _CLU0FN         DATA 0xaf
0000             79   _CLU0MX         DATA 0x84
0000             80   _CLU1CF         DATA 0xb3
0000             81   _CLU1FN         DATA 0xb2
0000             82   _CLU1MX         DATA 0x85
0000             83   _CLU2CF         DATA 0xb6
0000             84   _CLU2FN         DATA 0xb5
0000             85   _CLU2MX         DATA 0x91
0000             86   _CLU3CF         DATA 0xbf
0000             87   _CLU3FN         DATA 0xbe
0000             88   _CLU3MX         DATA 0xae
0000             89   _CMP0CN0        DATA 0x9b
0000             90   _CMP0CN1        DATA 0x99
0000             91   _CMP0MD         DATA 0x9d
0000             92   _CMP0MX         DATA 0x9f
0000             93   _CMP1CN0        DATA 0xbf
0000             94   _CMP1CN1        DATA 0xac
0000             95   _CMP1MD         DATA 0xab
0000             96   _CMP1MX         DATA 0xaa
0000             97   _CRC0CN0        DATA 0xce
0000             98   _CRC0CN1        DATA 0x86
0000             99   _CRC0CNT        DATA 0xd3
0000            100   _CRC0DAT        DATA 0xcb
0000            101   _CRC0FLIP       DATA 0xcf
0000            102   _CRC0IN         DATA 0xca
0000            103   _CRC0ST         DATA 0xd2
0000            104   _DAC0CF0        DATA 0x91
0000            105   _DAC0CF1        DATA 0x92
0000            106   _DAC0H          DATA 0x85
0000            107   _DAC0L          DATA 0x84
0000            108   _DAC1CF0        DATA 0x93
0000            109   _DAC1CF1        DATA 0x94
0000            110   _DAC1H          DATA 0x8a
0000            111   _DAC1L          DATA 0x89
0000            112   _DAC2CF0        DATA 0x95
0000            113   _DAC2CF1        DATA 0x96
0000            114   _DAC2H          DATA 0x8c
0000            115   _DAC2L          DATA 0x8b
0000            116   _DAC3CF0        DATA 0x9a
0000            117   _DAC3CF1        DATA 0x9c
0000            118   _DAC3H          DATA 0x8e
0000            119   _DAC3L          DATA 0x8d
0000            120   _DACGCF0        DATA 0x88
0000            121   _DACGCF1        DATA 0x98
0000            122   _DACGCF2        DATA 0xa2
0000            123   _DERIVID        DATA 0xad
0000            124   _DEVICEID       DATA 0xb5
0000            125   _DPH            DATA 0x83
0000            126   _DPL            DATA 0x82
0000            127   _EIE1           DATA 0xe6
0000            128   _EIE2           DATA 0xf3
0000            129   _EIP1           DATA 0xbb
0000            130   _EIP1H          DATA 0xee
0000            131   _EIP2           DATA 0xed
0000            132   _EIP2H          DATA 0xf6
0000            133   _EMI0CN         DATA 0xe7
0000            134   _FLKEY          DATA 0xb7
0000            135   _HFO0CAL        DATA 0xc7
0000            136   _HFO1CAL        DATA 0xd6
0000            137   _HFOCN          DATA 0xef
0000            138   _I2C0ADM        DATA 0xff
0000            139   _I2C0CN0        DATA 0xba
0000            140   _I2C0DIN        DATA 0xbc
0000            141   _I2C0DOUT       DATA 0xbb
0000            142   _I2C0FCN0       DATA 0xad
0000            143   _I2C0FCN1       DATA 0xab
0000            144   _I2C0FCT        DATA 0xf5
0000            145   _I2C0SLAD       DATA 0xbd
0000            146   _I2C0STAT       DATA 0xb9
0000            147   _IE             DATA 0xa8
0000            148   _IP             DATA 0xb8
0000            149   _IPH            DATA 0xf2
0000            150   _IT01CF         DATA 0xe4
0000            151   _LFO0CN         DATA 0xb1
0000            152   _P0             DATA 0x80
0000            153   _P0MASK         DATA 0xfe
0000            154   _P0MAT          DATA 0xfd
0000            155   _P0MDIN         DATA 0xf1
0000            156   _P0MDOUT        DATA 0xa4
0000            157   _P0SKIP         DATA 0xd4
0000            158   _P1             DATA 0x90
0000            159   _P1MASK         DATA 0xee
0000            160   _P1MAT          DATA 0xed
0000            161   _P1MDIN         DATA 0xf2
0000            162   _P1MDOUT        DATA 0xa5
0000            163   _P1SKIP         DATA 0xd5
0000            164   _P2             DATA 0xa0
0000            165   _P2MASK         DATA 0xfc
0000            166   _P2MAT          DATA 0xfb
0000            167   _P2MDIN         DATA 0xf3
0000            168   _P2MDOUT        DATA 0xa6
0000            169   _P2SKIP         DATA 0xcc
0000            170   _P3             DATA 0xb0
0000            171   _P3MDIN         DATA 0xf4
0000            172   _P3MDOUT        DATA 0x9c
0000            173   _PCA0CENT       DATA 0x9e
0000            174   _PCA0CLR        DATA 0x9c
0000            175   _PCA0CN0        DATA 0xd8
0000            176   _PCA0CPH0       DATA 0xfc
0000            177   _PCA0CPH1       DATA 0xea
0000            178   _PCA0CPH2       DATA 0xec
0000            179   _PCA0CPH3       DATA 0xf5
0000            180   _PCA0CPH4       DATA 0x85
0000            181   _PCA0CPH5       DATA 0xde
0000            182   _PCA0CPL0       DATA 0xfb
0000            183   _PCA0CPL1       DATA 0xe9
0000            184   _PCA0CPL2       DATA 0xeb
0000            185   _PCA0CPL3       DATA 0xf4
0000            186   _PCA0CPL4       DATA 0x84
0000            187   _PCA0CPL5       DATA 0xdd
0000            188   _PCA0CPM0       DATA 0xda
0000            189   _PCA0CPM1       DATA 0xdb
0000            190   _PCA0CPM2       DATA 0xdc
0000            191   _PCA0CPM3       DATA 0xae
0000            192   _PCA0CPM4       DATA 0xaf
0000            193   _PCA0CPM5       DATA 0xcc
0000            194   _PCA0H          DATA 0xfa
0000            195   _PCA0L          DATA 0xf9
0000            196   _PCA0MD         DATA 0xd9
0000            197   _PCA0POL        DATA 0x96
0000            198   _PCA0PWM        DATA 0xf7
0000            199   _PCON0          DATA 0x87
0000            200   _PCON1          DATA 0xcd
0000            201   _PFE0CN         DATA 0xc1
0000            202   _PRTDRV         DATA 0xf6
0000            203   _PSCTL          DATA 0x8f
0000            204   _PSTAT0         DATA 0xaa
0000            205   _PSW            DATA 0xd0
0000            206   _REF0CN         DATA 0xd1
0000            207   _REG0CN         DATA 0xc9
0000            208   _REVID          DATA 0xb6
0000            209   _RSTSRC         DATA 0xef
0000            210   _SBCON1         DATA 0x94
0000            211   _SBRLH1         DATA 0x96
0000            212   _SBRLL1         DATA 0x95
0000            213   _SBUF           DATA 0x99
0000            214   _SBUF0          DATA 0x99
0000            215   _SBUF1          DATA 0x92
0000            216   _SCON           DATA 0x98
0000            217   _SCON0          DATA 0x98
0000            218   _SCON1          DATA 0xc8
0000            219   _SFRPAGE        DATA 0xa7
0000            220   _SFRPGCN        DATA 0xbc
0000            221   _SFRSTACK       DATA 0xd7
0000            222   _SMB0ADM        DATA 0xd6
0000            223   _SMB0ADR        DATA 0xd7
0000            224   _SMB0CF         DATA 0xc1
0000            225   _SMB0CN0        DATA 0xc0
0000            226   _SMB0DAT        DATA 0xc2
0000            227   _SMB0FCN0       DATA 0xc3
0000            228   _SMB0FCN1       DATA 0xc4
0000            229   _SMB0FCT        DATA 0xef
0000            230   _SMB0RXLN       DATA 0xc5
0000            231   _SMB0TC         DATA 0xac
0000            232   _SMOD1          DATA 0x93
0000            233   _SP             DATA 0x81
0000            234   _SPI0CFG        DATA 0xa1
0000            235   _SPI0CKR        DATA 0xa2
0000            236   _SPI0CN0        DATA 0xf8
0000            237   _SPI0DAT        DATA 0xa3
0000            238   _SPI0FCN0       DATA 0x9a
0000            239   _SPI0FCN1       DATA 0x9b
0000            240   _SPI0FCT        DATA 0xf7
0000            241   _SPI0PCF        DATA 0xdf
0000            242   _TCON           DATA 0x88
0000            243   _TH0            DATA 0x8c
0000            244   _TH1            DATA 0x8d
0000            245   _TL0            DATA 0x8a
0000            246   _TL1            DATA 0x8b
0000            247   _TMOD           DATA 0x89
0000            248   _TMR2CN0        DATA 0xc8
0000            249   _TMR2CN1        DATA 0xfd
0000            250   _TMR2H          DATA 0xcf
0000            251   _TMR2L          DATA 0xce
0000            252   _TMR2RLH        DATA 0xcb
0000            253   _TMR2RLL        DATA 0xca
0000            254   _TMR3CN0        DATA 0x91
0000            255   _TMR3CN1        DATA 0xfe
0000            256   _TMR3H          DATA 0x95
0000            257   _TMR3L          DATA 0x94
0000            258   _TMR3RLH        DATA 0x93
0000            259   _TMR3RLL        DATA 0x92
0000            260   _TMR4CN0        DATA 0x98
0000            261   _TMR4CN1        DATA 0xff
0000            262   _TMR4H          DATA 0xa5
0000            263   _TMR4L          DATA 0xa4
0000            264   _TMR4RLH        DATA 0xa3
0000            265   _TMR4RLL        DATA 0xa2
0000            266   _TMR5CN0        DATA 0xc0
0000            267   _TMR5CN1        DATA 0xf1
0000            268   _TMR5H          DATA 0xd5
0000            269   _TMR5L          DATA 0xd4
0000            270   _TMR5RLH        DATA 0xd3
0000            271   _TMR5RLL        DATA 0xd2
0000            272   _UART0PCF       DATA 0xd9
0000            273   _UART1FCN0      DATA 0x9d
0000            274   _UART1FCN1      DATA 0xd8
0000            275   _UART1FCT       DATA 0xfa
0000            276   _UART1LIN       DATA 0x9e
0000            277   _UART1PCF       DATA 0xda
0000            278   _VDM0CN         DATA 0xff
0000            279   _WDTCN          DATA 0x97
0000            280   _XBR0           DATA 0xe1
0000            281   _XBR1           DATA 0xe2
0000            282   _XBR2           DATA 0xe3
0000            283   _XOSC0CN        DATA 0x86
0000            284   _DPTR           DATA 0x8382
0000            285   _TMR2RL         DATA 0xcbca
0000            286   _TMR3RL         DATA 0x9392
0000            287   _TMR4RL         DATA 0xa3a2
0000            288   _TMR5RL         DATA 0xd3d2
0000            289   _TMR0           DATA 0x8c8a
0000            290   _TMR1           DATA 0x8d8b
0000            291   _TMR2           DATA 0xcfce
0000            292   _TMR3           DATA 0x9594
0000            293   _TMR4           DATA 0xa5a4
0000            294   _TMR5           DATA 0xd5d4
0000            295   _SBRL1          DATA 0x9695
0000            296   _PCA0           DATA 0xfaf9
0000            297   _PCA0CP0        DATA 0xfcfb
0000            298   _PCA0CP1        DATA 0xeae9
0000            299   _PCA0CP2        DATA 0xeceb
0000            300   _PCA0CP3        DATA 0xf5f4
0000            301   _PCA0CP4        DATA 0x8584
0000            302   _PCA0CP5        DATA 0xdedd
0000            303   _ADC0ASA        DATA 0xb6b5
0000            304   _ADC0GT         DATA 0xc4c3
0000            305   _ADC0           DATA 0xbebd
0000            306   _ADC0LT         DATA 0xc6c5
0000            307   _DAC0           DATA 0x8584
0000            308   _DAC1           DATA 0x8a89
0000            309   _DAC2           DATA 0x8c8b
0000            310   _DAC3           DATA 0x8e8d
0000            311   ;--------------------------------------------------------
0000            312   ; special function bits
0000            313   ;--------------------------------------------------------
0000            314   _ACC_0          BIT 0xe0
0000            315   _ACC_1          BIT 0xe1
0000            316   _ACC_2          BIT 0xe2
0000            317   _ACC_3          BIT 0xe3
0000            318   _ACC_4          BIT 0xe4
0000            319   _ACC_5          BIT 0xe5
0000            320   _ACC_6          BIT 0xe6
0000            321   _ACC_7          BIT 0xe7
0000            322   _TEMPE          BIT 0xe8
0000            323   _ADGN0          BIT 0xe9
0000            324   _ADGN1          BIT 0xea
0000            325   _ADWINT         BIT 0xeb
0000            326   _ADBUSY         BIT 0xec
0000            327   _ADINT          BIT 0xed
0000            328   _IPOEN          BIT 0xee
0000            329   _ADEN           BIT 0xef
0000            330   _B_0            BIT 0xf0
0000            331   _B_1            BIT 0xf1
0000            332   _B_2            BIT 0xf2
0000            333   _B_3            BIT 0xf3
0000            334   _B_4            BIT 0xf4
0000            335   _B_5            BIT 0xf5
0000            336   _B_6            BIT 0xf6
0000            337   _B_7            BIT 0xf7
0000            338   _C0FIF          BIT 0xe8
0000            339   _C0RIF          BIT 0xe9
0000            340   _C1FIF          BIT 0xea
0000            341   _C1RIF          BIT 0xeb
0000            342   _C2FIF          BIT 0xec
0000            343   _C2RIF          BIT 0xed
0000            344   _C3FIF          BIT 0xee
0000            345   _C3RIF          BIT 0xef
0000            346   _D1SRC0         BIT 0x88
0000            347   _D1SRC1         BIT 0x89
0000            348   _D1AMEN         BIT 0x8a
0000            349   _D01REFSL       BIT 0x8b
0000            350   _D3SRC0         BIT 0x8c
0000            351   _D3SRC1         BIT 0x8d
0000            352   _D3AMEN         BIT 0x8e
0000            353   _D23REFSL       BIT 0x8f
0000            354   _D0UDIS         BIT 0x98
0000            355   _D1UDIS         BIT 0x99
0000            356   _D2UDIS         BIT 0x9a
0000            357   _D3UDIS         BIT 0x9b
0000            358   _EX0            BIT 0xa8
0000            359   _ET0            BIT 0xa9
0000            360   _EX1            BIT 0xaa
0000            361   _ET1            BIT 0xab
0000            362   _ES0            BIT 0xac
0000            363   _ET2            BIT 0xad
0000            364   _ESPI0          BIT 0xae
0000            365   _EA             BIT 0xaf
0000            366   _PX0            BIT 0xb8
0000            367   _PT0            BIT 0xb9
0000            368   _PX1            BIT 0xba
0000            369   _PT1            BIT 0xbb
0000            370   _PS0            BIT 0xbc
0000            371   _PT2            BIT 0xbd
0000            372   _PSPI0          BIT 0xbe
0000            373   _P0_0           BIT 0x80
0000            374   _P0_1           BIT 0x81
0000            375   _P0_2           BIT 0x82
0000            376   _P0_3           BIT 0x83
0000            377   _P0_4           BIT 0x84
0000            378   _P0_5           BIT 0x85
0000            379   _P0_6           BIT 0x86
0000            380   _P0_7           BIT 0x87
0000            381   _P1_0           BIT 0x90
0000            382   _P1_1           BIT 0x91
0000            383   _P1_2           BIT 0x92
0000            384   _P1_3           BIT 0x93
0000            385   _P1_4           BIT 0x94
0000            386   _P1_5           BIT 0x95
0000            387   _P1_6           BIT 0x96
0000            388   _P1_7           BIT 0x97
0000            389   _P2_0           BIT 0xa0
0000            390   _P2_1           BIT 0xa1
0000            391   _P2_2           BIT 0xa2
0000            392   _P2_3           BIT 0xa3
0000            393   _P2_4           BIT 0xa4
0000            394   _P2_5           BIT 0xa5
0000            395   _P2_6           BIT 0xa6
0000            396   _P3_0           BIT 0xb0
0000            397   _P3_1           BIT 0xb1
0000            398   _P3_2           BIT 0xb2
0000            399   _P3_3           BIT 0xb3
0000            400   _P3_4           BIT 0xb4
0000            401   _P3_7           BIT 0xb7
0000            402   _CCF0           BIT 0xd8
0000            403   _CCF1           BIT 0xd9
0000            404   _CCF2           BIT 0xda
0000            405   _CCF3           BIT 0xdb
0000            406   _CCF4           BIT 0xdc
0000            407   _CCF5           BIT 0xdd
0000            408   _CR             BIT 0xde
0000            409   _CF             BIT 0xdf
0000            410   _PARITY         BIT 0xd0
0000            411   _F1             BIT 0xd1
0000            412   _OV             BIT 0xd2
0000            413   _RS0            BIT 0xd3
0000            414   _RS1            BIT 0xd4
0000            415   _F0             BIT 0xd5
0000            416   _AC             BIT 0xd6
0000            417   _CY             BIT 0xd7
0000            418   _RI             BIT 0x98
0000            419   _TI             BIT 0x99
0000            420   _RB8            BIT 0x9a
0000            421   _TB8            BIT 0x9b
0000            422   _REN            BIT 0x9c
0000            423   _CE             BIT 0x9d
0000            424   _SMODE          BIT 0x9e
0000            425   _RI1            BIT 0xc8
0000            426   _TI1            BIT 0xc9
0000            427   _RBX1           BIT 0xca
0000            428   _TBX1           BIT 0xcb
0000            429   _REN1           BIT 0xcc
0000            430   _PERR1          BIT 0xcd
0000            431   _OVR1           BIT 0xce
0000            432   _SI             BIT 0xc0
0000            433   _ACK            BIT 0xc1
0000            434   _ARBLOST        BIT 0xc2
0000            435   _ACKRQ          BIT 0xc3
0000            436   _STO            BIT 0xc4
0000            437   _STA            BIT 0xc5
0000            438   _TXMODE         BIT 0xc6
0000            439   _MASTER         BIT 0xc7
0000            440   _SPIEN          BIT 0xf8
0000            441   _TXNF           BIT 0xf9
0000            442   _NSSMD0         BIT 0xfa
0000            443   _NSSMD1         BIT 0xfb
0000            444   _RXOVRN         BIT 0xfc
0000            445   _MODF           BIT 0xfd
0000            446   _WCOL           BIT 0xfe
0000            447   _SPIF           BIT 0xff
0000            448   _IT0            BIT 0x88
0000            449   _IE0            BIT 0x89
0000            450   _IT1            BIT 0x8a
0000            451   _IE1            BIT 0x8b
0000            452   _TR0            BIT 0x8c
0000            453   _TF0            BIT 0x8d
0000            454   _TR1            BIT 0x8e
0000            455   _TF1            BIT 0x8f
0000            456   _T2XCLK0        BIT 0xc8
0000            457   _T2XCLK1        BIT 0xc9
0000            458   _TR2            BIT 0xca
0000            459   _T2SPLIT        BIT 0xcb
0000            460   _TF2CEN         BIT 0xcc
0000            461   _TF2LEN         BIT 0xcd
0000            462   _TF2L           BIT 0xce
0000            463   _TF2H           BIT 0xcf
0000            464   _T4XCLK0        BIT 0x98
0000            465   _T4XCLK1        BIT 0x99
0000            466   _TR4            BIT 0x9a
0000            467   _T4SPLIT        BIT 0x9b
0000            468   _TF4CEN         BIT 0x9c
0000            469   _TF4LEN         BIT 0x9d
0000            470   _TF4L           BIT 0x9e
0000            471   _TF4H           BIT 0x9f
0000            472   _T5XCLK0        BIT 0xc0
0000            473   _T5XCLK1        BIT 0xc1
0000            474   _TR5            BIT 0xc2
0000            475   _T5SPLIT        BIT 0xc3
0000            476   _TF5CEN         BIT 0xc4
0000            477   _TF5LEN         BIT 0xc5
0000            478   _TF5L           BIT 0xc6
0000            479   _TF5H           BIT 0xc7
0000            480   _RIE            BIT 0xd8
0000            481   _RXTO0          BIT 0xd9
0000            482   _RXTO1          BIT 0xda
0000            483   _RFRQ           BIT 0xdb
0000            484   _TIE            BIT 0xdc
0000            485   _TXHOLD         BIT 0xdd
0000            486   _TXNF1          BIT 0xde
0000            487   _TFRQ           BIT 0xdf
0000            488   ;--------------------------------------------------------
0000            489   ; overlayable register banks
0000            490   ;--------------------------------------------------------
0000            491            rbank0 segment data overlay
0000            492   ;--------------------------------------------------------
0000            493   ; internal ram data
0000            494   ;--------------------------------------------------------
0000            495            rseg R_DSEG
0000            496   _main_X_pos_L_1_111:
0000            497            ds 4
0004            498   _main_Y_pos_R_1_111:
0004            499            ds 4
0008            500   _main_X_pos_L_string_1_111:
0008            501            ds 5
000D            502   ;--------------------------------------------------------
000D            503   ; overlayable items in internal ram 
000D            504   ;--------------------------------------------------------
0000            505            rseg    R_OSEG
0000            506            rseg    R_OSEG
0000            507   _InitPinADC_PARM_2:
0000            508            ds 1
0001            509            rseg    R_OSEG
0001            510            rseg    R_OSEG
0001            511            rseg    R_OSEG
0001            512   ;--------------------------------------------------------
0001            513   ; indirectly addressable internal ram data
0001            514   ;--------------------------------------------------------
0000            515            rseg R_ISEG
0000            516   _buff:
0000            517            ds 20
0014            518   ;--------------------------------------------------------
0014            519   ; absolute internal ram data
0014            520   ;--------------------------------------------------------
0000            521            DSEG
0000            522   ;--------------------------------------------------------
0000            523   ; bit data
0000            524   ;--------------------------------------------------------
0000            525            rseg R_BSEG
0000            526   ;--------------------------------------------------------
0000            527   ; paged external ram data
0000            528   ;--------------------------------------------------------
0000            529            rseg R_PSEG
0000            530   ;--------------------------------------------------------
0000            531   ; external ram data
0000            532   ;--------------------------------------------------------
0000            533            rseg R_XSEG
0000            534   ;--------------------------------------------------------
0000            535   ; absolute external ram data
0000            536   ;--------------------------------------------------------
0000            537            XSEG
0000            538   ;--------------------------------------------------------
0000            539   ; external initialized ram data
0000            540   ;--------------------------------------------------------
0000            541            rseg R_IXSEG
0000            542            rseg R_HOME
0000            543            rseg R_GSINIT
0000            544            rseg R_CSEG
0000            545   ;--------------------------------------------------------
0000            546   ; Reset entry point and interrupt vectors
0000            547   ;--------------------------------------------------------
0000            548            CSEG at 0x0000
0000 020000     549            ljmp    _crt0
0003            550   ;--------------------------------------------------------
0003            551   ; global & static initialisations
0003            552   ;--------------------------------------------------------
0000            553            rseg R_HOME
0000            554            rseg R_GSINIT
0000            555            rseg R_GSINIT
0000            556   ;--------------------------------------------------------
0000            557   ; data variables initialization
0000            558   ;--------------------------------------------------------
0000            559            rseg R_DINIT
0000            560            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            561   ;--------------------------------------------------------
0000            562   ; code
0000            563   ;--------------------------------------------------------
0000            564            rseg R_CSEG
0000            565   ;------------------------------------------------------------
0000            566   ;Allocation info for local variables in function '_c51_external_startup'
0000            567   ;------------------------------------------------------------
0000            568   ;------------------------------------------------------------
0000            569   ;        EFM8_JDY40_Transmitter.c:409: char _c51_external_startup (void)
0000            570   ;        -----------------------------------------
0000            571   ;         function _c51_external_startup
0000            572   ;        -----------------------------------------
0000            573   __c51_external_startup:
0000            574            using   0
0000            575   ;        EFM8_JDY40_Transmitter.c:412: SFRPAGE = 0x00;
0000 75A700     576            mov     _SFRPAGE,#0x00
0003            577   ;        EFM8_JDY40_Transmitter.c:413: WDTCN = 0xDE; //First key
0003 7597DE     578            mov     _WDTCN,#0xDE
0006            579   ;        EFM8_JDY40_Transmitter.c:414: WDTCN = 0xAD; //Second key
0006 7597AD     580            mov     _WDTCN,#0xAD
0009            581   ;        EFM8_JDY40_Transmitter.c:416: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     582            mov     _VDM0CN,#0x80
000C            583   ;        EFM8_JDY40_Transmitter.c:417: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     584            mov     _RSTSRC,#0x06
000F            585   ;        EFM8_JDY40_Transmitter.c:424: SFRPAGE = 0x10;
000F 75A710     586            mov     _SFRPAGE,#0x10
0012            587   ;        EFM8_JDY40_Transmitter.c:425: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     588            mov     _PFE0CN,#0x20
0015            589   ;        EFM8_JDY40_Transmitter.c:426: SFRPAGE = 0x00;
0015 75A700     590            mov     _SFRPAGE,#0x00
0018            591   ;        EFM8_JDY40_Transmitter.c:447: CLKSEL = 0x00;
0018 75A900     592            mov     _CLKSEL,#0x00
001B            593   ;        EFM8_JDY40_Transmitter.c:448: CLKSEL = 0x00;
001B 75A900     594            mov     _CLKSEL,#0x00
001E            595   ;        EFM8_JDY40_Transmitter.c:449: while ((CLKSEL & 0x80) == 0);
001E            596   L002001?:
001E E5A9       597            mov     a,_CLKSEL
0020 30E7C0     598            jnb     acc.7,L002001?
0023            599   ;        EFM8_JDY40_Transmitter.c:450: CLKSEL = 0x03;
0023 75A903     600            mov     _CLKSEL,#0x03
0026            601   ;        EFM8_JDY40_Transmitter.c:451: CLKSEL = 0x03;
0026 75A903     602            mov     _CLKSEL,#0x03
0029            603   ;        EFM8_JDY40_Transmitter.c:452: while ((CLKSEL & 0x80) == 0);
0029            604   L002004?:
0029 E5A9       605            mov     a,_CLKSEL
002B 30E740     606            jnb     acc.7,L002004?
002E            607   ;        EFM8_JDY40_Transmitter.c:457: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     608            orl     _P0MDOUT,#0x11
0031            609   ;        EFM8_JDY40_Transmitter.c:458: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     610            orl     _P2MDOUT,#0x01
0034            611   ;        EFM8_JDY40_Transmitter.c:459: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     612            mov     _XBR0,#0x01
0037            613   ;        EFM8_JDY40_Transmitter.c:460: XBR1     = 0X00;
0037 75E200     614            mov     _XBR1,#0x00
003A            615   ;        EFM8_JDY40_Transmitter.c:461: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     616            mov     _XBR2,#0x41
003D            617   ;        EFM8_JDY40_Transmitter.c:467: SCON0 = 0x10;
003D 759810     618            mov     _SCON0,#0x10
0040            619   ;        EFM8_JDY40_Transmitter.c:468: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     620            mov     _TH1,#0xE6
0043            621   ;        EFM8_JDY40_Transmitter.c:469: TL1 = TH1;      // Init Timer1
0043 858D8B     622            mov     _TL1,_TH1
0046            623   ;        EFM8_JDY40_Transmitter.c:470: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     624            anl     _TMOD,#0x0F
0049            625   ;        EFM8_JDY40_Transmitter.c:471: TMOD |=  0x20;                       
0049 438920     626            orl     _TMOD,#0x20
004C            627   ;        EFM8_JDY40_Transmitter.c:472: TR1 = 1; // START Timer1
004C D28E       628            setb    _TR1
004E            629   ;        EFM8_JDY40_Transmitter.c:473: TI = 1;  // Indicate TX0 ready
004E D299       630            setb    _TI
0050            631   ;        EFM8_JDY40_Transmitter.c:475: return 0;
0050 758200     632            mov     dpl,#0x00
0053 22         633            ret
0054            634   ;------------------------------------------------------------
0054            635   ;Allocation info for local variables in function 'InitADC'
0054            636   ;------------------------------------------------------------
0054            637   ;------------------------------------------------------------
0054            638   ;        EFM8_JDY40_Transmitter.c:478: void InitADC (void)
0054            639   ;        -----------------------------------------
0054            640   ;         function InitADC
0054            641   ;        -----------------------------------------
0054            642   _InitADC:
0054            643   ;        EFM8_JDY40_Transmitter.c:480: SFRPAGE = 0x00;
0054 75A700     644            mov     _SFRPAGE,#0x00
0057            645   ;        EFM8_JDY40_Transmitter.c:481: ADEN=0; // Disable ADC
0057 C2EF       646            clr     _ADEN
0059            647   ;        EFM8_JDY40_Transmitter.c:486: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0059 75B280     648            mov     _ADC0CN1,#0x80
005C            649   ;        EFM8_JDY40_Transmitter.c:490: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
005C 75BC20     650            mov     _ADC0CF0,#0x20
005F            651   ;        EFM8_JDY40_Transmitter.c:494: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005F 75B91E     652            mov     _ADC0CF1,#0x1E
0062            653   ;        EFM8_JDY40_Transmitter.c:503: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0062 75E800     654            mov     _ADC0CN0,#0x00
0065            655   ;        EFM8_JDY40_Transmitter.c:508: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0065 75DF3F     656            mov     _ADC0CF2,#0x3F
0068            657   ;        EFM8_JDY40_Transmitter.c:512: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0068 75B300     658            mov     _ADC0CN2,#0x00
006B            659   ;        EFM8_JDY40_Transmitter.c:514: ADEN=1; // Enable ADC
006B D2EF       660            setb    _ADEN
006D 22         661            ret
006E            662   ;------------------------------------------------------------
006E            663   ;Allocation info for local variables in function 'TIMER0_Init'
006E            664   ;------------------------------------------------------------
006E            665   ;------------------------------------------------------------
006E            666   ;        EFM8_JDY40_Transmitter.c:517: void TIMER0_Init(void)
006E            667   ;        -----------------------------------------
006E            668   ;         function TIMER0_Init
006E            669   ;        -----------------------------------------
006E            670   _TIMER0_Init:
006E            671   ;        EFM8_JDY40_Transmitter.c:519: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
006E 5389F0     672            anl     _TMOD,#0xF0
0071            673   ;        EFM8_JDY40_Transmitter.c:520: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0071 438901     674            orl     _TMOD,#0x01
0074            675   ;        EFM8_JDY40_Transmitter.c:521: TR0=0; // Stop Timer/Counter 0
0074 C28C       676            clr     _TR0
0076 22         677            ret
0077            678   ;------------------------------------------------------------
0077            679   ;Allocation info for local variables in function 'Timer3us'
0077            680   ;------------------------------------------------------------
0077            681   ;us                        Allocated to registers r2 
0077            682   ;i                         Allocated to registers r3 
0077            683   ;------------------------------------------------------------
0077            684   ;        EFM8_JDY40_Transmitter.c:525: void Timer3us(unsigned char us)
0077            685   ;        -----------------------------------------
0077            686   ;         function Timer3us
0077            687   ;        -----------------------------------------
0077            688   _Timer3us:
0077 AA82       689            mov     r2,dpl
0079            690   ;        EFM8_JDY40_Transmitter.c:530: CKCON0|=0b_0100_0000;
0079 438E40     691            orl     _CKCON0,#0x40
007C            692   ;        EFM8_JDY40_Transmitter.c:532: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
007C 7592B8     693            mov     _TMR3RL,#0xB8
007F 7593FF     694            mov     (_TMR3RL >> 8),#0xFF
0082            695   ;        EFM8_JDY40_Transmitter.c:533: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0082 859294     696            mov     _TMR3,_TMR3RL
0085 859395     697            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0088            698   ;        EFM8_JDY40_Transmitter.c:535: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0088 759104     699            mov     _TMR3CN0,#0x04
008B            700   ;        EFM8_JDY40_Transmitter.c:536: for (i = 0; i < us; i++)       // Count <us> overflows
008B 7B00       701            mov     r3,#0x00
008D            702   L005004?:
008D C3         703            clr     c
008E EB         704            mov     a,r3
008F 9A         705            subb    a,r2
0090 5000       706            jnc     L005007?
0092            707   ;        EFM8_JDY40_Transmitter.c:538: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0092            708   L005001?:
0092 E591       709            mov     a,_TMR3CN0
0094 30E740     710            jnb     acc.7,L005001?
0097            711   ;        EFM8_JDY40_Transmitter.c:539: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0097 53917F     712            anl     _TMR3CN0,#0x7F
009A            713   ;        EFM8_JDY40_Transmitter.c:536: for (i = 0; i < us; i++)       // Count <us> overflows
009A 0B         714            inc     r3
009B 8000       715            sjmp    L005004?
009D            716   L005007?:
009D            717   ;        EFM8_JDY40_Transmitter.c:541: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
009D 759100     718            mov     _TMR3CN0,#0x00
00A0 22         719            ret
00A1            720   ;------------------------------------------------------------
00A1            721   ;Allocation info for local variables in function 'waitms'
00A1            722   ;------------------------------------------------------------
00A1            723   ;ms                        Allocated to registers r2 r3 
00A1            724   ;j                         Allocated to registers r4 r5 
00A1            725   ;k                         Allocated to registers r6 
00A1            726   ;------------------------------------------------------------
00A1            727   ;        EFM8_JDY40_Transmitter.c:544: void waitms (unsigned int ms)
00A1            728   ;        -----------------------------------------
00A1            729   ;         function waitms
00A1            730   ;        -----------------------------------------
00A1            731   _waitms:
00A1 AA82       732            mov     r2,dpl
00A3 AB83       733            mov     r3,dph
00A5            734   ;        EFM8_JDY40_Transmitter.c:548: for(j=0; j<ms; j++)
00A5 7C00       735            mov     r4,#0x00
00A7 7D00       736            mov     r5,#0x00
00A9            737   L006005?:
00A9 C3         738            clr     c
00AA EC         739            mov     a,r4
00AB 9A         740            subb    a,r2
00AC ED         741            mov     a,r5
00AD 9B         742            subb    a,r3
00AE 5000       743            jnc     L006009?
00B0            744   ;        EFM8_JDY40_Transmitter.c:549: for (k=0; k<4; k++) Timer3us(250);
00B0 7E00       745            mov     r6,#0x00
00B2            746   L006001?:
00B2 BE0480     747            cjne    r6,#0x04,L006018?
00B5            748   L006018?:
00B5 5000       749            jnc     L006007?
00B7 7582FA     750            mov     dpl,#0xFA
00BA C002       751            push    ar2
00BC C003       752            push    ar3
00BE C004       753            push    ar4
00C0 C005       754            push    ar5
00C2 C006       755            push    ar6
00C4 120000     756            lcall   _Timer3us
00C7 D006       757            pop     ar6
00C9 D005       758            pop     ar5
00CB D004       759            pop     ar4
00CD D003       760            pop     ar3
00CF D002       761            pop     ar2
00D1 0E         762            inc     r6
00D2 8000       763            sjmp    L006001?
00D4            764   L006007?:
00D4            765   ;        EFM8_JDY40_Transmitter.c:548: for(j=0; j<ms; j++)
00D4 0C         766            inc     r4
00D5 BC00C0     767            cjne    r4,#0x00,L006005?
00D8 0D         768            inc     r5
00D9 8000       769            sjmp    L006005?
00DB            770   L006009?:
00DB 22         771            ret
00DC            772   ;------------------------------------------------------------
00DC            773   ;Allocation info for local variables in function 'InitPinADC'
00DC            774   ;------------------------------------------------------------
00DC            775   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00DC            776   ;portno                    Allocated to registers r2 
00DC            777   ;mask                      Allocated to registers r3 
00DC            778   ;------------------------------------------------------------
00DC            779   ;        EFM8_JDY40_Transmitter.c:554: void InitPinADC (unsigned char portno, unsigned char pinno)
00DC            780   ;        -----------------------------------------
00DC            781   ;         function InitPinADC
00DC            782   ;        -----------------------------------------
00DC            783   _InitPinADC:
00DC AA82       784            mov     r2,dpl
00DE            785   ;        EFM8_JDY40_Transmitter.c:558: mask=1<<pinno;
00DE 8560F0     786            mov     b,_InitPinADC_PARM_2
00E1 05F0       787            inc     b
00E3 7401       788            mov     a,#0x01
00E5 8000       789            sjmp    L007013?
00E7            790   L007011?:
00E7 25E0       791            add     a,acc
00E9            792   L007013?:
00E9 D5F080     793            djnz    b,L007011?
00EC FB         794            mov     r3,a
00ED            795   ;        EFM8_JDY40_Transmitter.c:560: SFRPAGE = 0x20;
00ED 75A720     796            mov     _SFRPAGE,#0x20
00F0            797   ;        EFM8_JDY40_Transmitter.c:561: switch (portno)
00F0 BA00C0     798            cjne    r2,#0x00,L007014?
00F3 8000       799            sjmp    L007001?
00F5            800   L007014?:
00F5 BA0140     801            cjne    r2,#0x01,L007015?
00F8 8000       802            sjmp    L007002?
00FA            803   L007015?:
00FA            804   ;        EFM8_JDY40_Transmitter.c:563: case 0:
00FA BA02C0     805            cjne    r2,#0x02,L007005?
00FD 8000       806            sjmp    L007003?
00FF            807   L007001?:
00FF            808   ;        EFM8_JDY40_Transmitter.c:564: P0MDIN &= (~mask); // Set pin as analog input
00FF EB         809            mov     a,r3
0100 F4         810            cpl     a
0101 FA         811            mov     r2,a
0102 52F1       812            anl     _P0MDIN,a
0104            813   ;        EFM8_JDY40_Transmitter.c:565: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0104 EB         814            mov     a,r3
0105 42D4       815            orl     _P0SKIP,a
0107            816   ;        EFM8_JDY40_Transmitter.c:566: break;
0107            817   ;        EFM8_JDY40_Transmitter.c:567: case 1:
0107 8000       818            sjmp    L007005?
0109            819   L007002?:
0109            820   ;        EFM8_JDY40_Transmitter.c:568: P1MDIN &= (~mask); // Set pin as analog input
0109 EB         821            mov     a,r3
010A F4         822            cpl     a
010B FA         823            mov     r2,a
010C 52F2       824            anl     _P1MDIN,a
010E            825   ;        EFM8_JDY40_Transmitter.c:569: P1SKIP |= mask; // Skip Crossbar decoding for this pin
010E EB         826            mov     a,r3
010F 42D5       827            orl     _P1SKIP,a
0111            828   ;        EFM8_JDY40_Transmitter.c:570: break;
0111            829   ;        EFM8_JDY40_Transmitter.c:571: case 2:
0111 8000       830            sjmp    L007005?
0113            831   L007003?:
0113            832   ;        EFM8_JDY40_Transmitter.c:572: P2MDIN &= (~mask); // Set pin as analog input
0113 EB         833            mov     a,r3
0114 F4         834            cpl     a
0115 FA         835            mov     r2,a
0116 52F3       836            anl     _P2MDIN,a
0118            837   ;        EFM8_JDY40_Transmitter.c:573: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0118 EB         838            mov     a,r3
0119 42CC       839            orl     _P2SKIP,a
011B            840   ;        EFM8_JDY40_Transmitter.c:577: }
011B            841   L007005?:
011B            842   ;        EFM8_JDY40_Transmitter.c:578: SFRPAGE = 0x00;
011B 75A700     843            mov     _SFRPAGE,#0x00
011E 22         844            ret
011F            845   ;------------------------------------------------------------
011F            846   ;Allocation info for local variables in function 'Get_ADC'
011F            847   ;------------------------------------------------------------
011F            848   ;------------------------------------------------------------
011F            849   ;        EFM8_JDY40_Transmitter.c:581: unsigned int Get_ADC (void)
011F            850   ;        -----------------------------------------
011F            851   ;         function Get_ADC
011F            852   ;        -----------------------------------------
011F            853   _Get_ADC:
011F            854   ;        EFM8_JDY40_Transmitter.c:583: ADINT = 0;
011F C2ED       855            clr     _ADINT
0121            856   ;        EFM8_JDY40_Transmitter.c:584: ADBUSY = 1;
0121 D2EC       857            setb    _ADBUSY
0123            858   ;        EFM8_JDY40_Transmitter.c:585: while (!ADINT); // Wait for conversion to complete
0123            859   L008001?:
0123 30ED40     860            jnb     _ADINT,L008001?
0126            861   ;        EFM8_JDY40_Transmitter.c:586: return (ADC0);
0126 85BD82     862            mov     dpl,_ADC0
0129 85BE83     863            mov     dph,(_ADC0 >> 8)
012C 22         864            ret
012D            865   ;------------------------------------------------------------
012D            866   ;Allocation info for local variables in function 'ADC_at_Pin'
012D            867   ;------------------------------------------------------------
012D            868   ;pin                       Allocated to registers 
012D            869   ;------------------------------------------------------------
012D            870   ;        EFM8_JDY40_Transmitter.c:589: unsigned int ADC_at_Pin(unsigned char pin)
012D            871   ;        -----------------------------------------
012D            872   ;         function ADC_at_Pin
012D            873   ;        -----------------------------------------
012D            874   _ADC_at_Pin:
012D 8582BB     875            mov     _ADC0MX,dpl
0130            876   ;        EFM8_JDY40_Transmitter.c:592: ADINT = 0;
0130 C2ED       877            clr     _ADINT
0132            878   ;        EFM8_JDY40_Transmitter.c:593: ADBUSY = 1;     // Convert voltage at the pin
0132 D2EC       879            setb    _ADBUSY
0134            880   ;        EFM8_JDY40_Transmitter.c:594: while (!ADINT); // Wait for conversion to complete
0134            881   L009001?:
0134 30ED80     882            jnb     _ADINT,L009001?
0137            883   ;        EFM8_JDY40_Transmitter.c:595: return (ADC0);
0137 85BD82     884            mov     dpl,_ADC0
013A 85BE83     885            mov     dph,(_ADC0 >> 8)
013D 22         886            ret
013E            887   ;------------------------------------------------------------
013E            888   ;Allocation info for local variables in function 'Volts_at_Pin'
013E            889   ;------------------------------------------------------------
013E            890   ;pin                       Allocated to registers r2 
013E            891   ;------------------------------------------------------------
013E            892   ;        EFM8_JDY40_Transmitter.c:598: float Volts_at_Pin(unsigned char pin)
013E            893   ;        -----------------------------------------
013E            894   ;         function Volts_at_Pin
013E            895   ;        -----------------------------------------
013E            896   _Volts_at_Pin:
013E            897   ;        EFM8_JDY40_Transmitter.c:600: return ((ADC_at_Pin(pin)*VDD)/16383.0);
013E 120000     898            lcall   _ADC_at_Pin
0141 120000     899            lcall   ___uint2fs
0144 AA82       900            mov     r2,dpl
0146 AB83       901            mov     r3,dph
0148 ACF0       902            mov     r4,b
014A FD         903            mov     r5,a
014B C002       904            push    ar2
014D C003       905            push    ar3
014F C004       906            push    ar4
0151 C005       907            push    ar5
0153 900000     908            mov     dptr,#0x0000
0156 75F0A0     909            mov     b,#0xA0
0159 7440       910            mov     a,#0x40
015B 120000     911            lcall   ___fsmul
015E AA82       912            mov     r2,dpl
0160 AB83       913            mov     r3,dph
0162 ACF0       914            mov     r4,b
0164 FD         915            mov     r5,a
0165 E581       916            mov     a,sp
0167 24FC       917            add     a,#0xfc
0169 F581       918            mov     sp,a
016B E4         919            clr     a
016C C0E0       920            push    acc
016E 74FC       921            mov     a,#0xFC
0170 C0E0       922            push    acc
0172 747F       923            mov     a,#0x7F
0174 C0E0       924            push    acc
0176 7446       925            mov     a,#0x46
0178 C0E0       926            push    acc
017A 8A82       927            mov     dpl,r2
017C 8B83       928            mov     dph,r3
017E 8CF0       929            mov     b,r4
0180 ED         930            mov     a,r5
0181 120000     931            lcall   ___fsdiv
0184 AA82       932            mov     r2,dpl
0186 AB83       933            mov     r3,dph
0188 ACF0       934            mov     r4,b
018A FD         935            mov     r5,a
018B E581       936            mov     a,sp
018D 24FC       937            add     a,#0xfc
018F F581       938            mov     sp,a
0191 8A82       939            mov     dpl,r2
0193 8B83       940            mov     dph,r3
0195 8CF0       941            mov     b,r4
0197 ED         942            mov     a,r5
0198 22         943            ret
0199            944   ;------------------------------------------------------------
0199            945   ;Allocation info for local variables in function 'throttle_control_ADC'
0199            946   ;------------------------------------------------------------
0199            947   ;pin                       Allocated to registers r2 
0199            948   ;throttle_ADC              Allocated to registers r2 r3 
0199            949   ;------------------------------------------------------------
0199            950   ;        EFM8_JDY40_Transmitter.c:603: float throttle_control_ADC(unsigned char pin)
0199            951   ;        -----------------------------------------
0199            952   ;         function throttle_control_ADC
0199            953   ;        -----------------------------------------
0199            954   _throttle_control_ADC:
0199            955   ;        EFM8_JDY40_Transmitter.c:606: throttle_ADC = ADC_at_Pin(pin);
0199 120000     956            lcall   _ADC_at_Pin
019C AA82       957            mov     r2,dpl
019E AB83       958            mov     r3,dph
01A0            959   ;        EFM8_JDY40_Transmitter.c:608: if(throttle_ADC < 16383/5){
01A0 C3         960            clr     c
01A1 EA         961            mov     a,r2
01A2 94CC       962            subb    a,#0xCC
01A4 EB         963            mov     a,r3
01A5 940C       964            subb    a,#0x0C
01A7 5000       965            jnc     L011002?
01A9            966   ;        EFM8_JDY40_Transmitter.c:609: return 1.0;
01A9 900000     967            mov     dptr,#0x0000
01AC 75F080     968            mov     b,#0x80
01AF 743F       969            mov     a,#0x3F
01B1 22         970            ret
01B2            971   L011002?:
01B2            972   ;        EFM8_JDY40_Transmitter.c:611: return ((throttle_ADC*VDD)/16383.0);
01B2 8A82       973            mov     dpl,r2
01B4 8B83       974            mov     dph,r3
01B6 120000     975            lcall   ___uint2fs
01B9 AA82       976            mov     r2,dpl
01BB AB83       977            mov     r3,dph
01BD ACF0       978            mov     r4,b
01BF FD         979            mov     r5,a
01C0 C002       980            push    ar2
01C2 C003       981            push    ar3
01C4 C004       982            push    ar4
01C6 C005       983            push    ar5
01C8 900000     984            mov     dptr,#0x0000
01CB 75F0A0     985            mov     b,#0xA0
01CE 7440       986            mov     a,#0x40
01D0 120000     987            lcall   ___fsmul
01D3 AA82       988            mov     r2,dpl
01D5 AB83       989            mov     r3,dph
01D7 ACF0       990            mov     r4,b
01D9 FD         991            mov     r5,a
01DA E581       992            mov     a,sp
01DC 24FC       993            add     a,#0xfc
01DE F581       994            mov     sp,a
01E0 E4         995            clr     a
01E1 C0E0       996            push    acc
01E3 74FC       997            mov     a,#0xFC
01E5 C0E0       998            push    acc
01E7 747F       999            mov     a,#0x7F
01E9 C0E0      1000            push    acc
01EB 7446      1001            mov     a,#0x46
01ED C0E0      1002            push    acc
01EF 8A82      1003            mov     dpl,r2
01F1 8B83      1004            mov     dph,r3
01F3 8CF0      1005            mov     b,r4
01F5 ED        1006            mov     a,r5
01F6 120000    1007            lcall   ___fsdiv
01F9 AA82      1008            mov     r2,dpl
01FB AB83      1009            mov     r3,dph
01FD ACF0      1010            mov     r4,b
01FF FD        1011            mov     r5,a
0200 E581      1012            mov     a,sp
0202 24FC      1013            add     a,#0xfc
0204 F581      1014            mov     sp,a
0206 8A82      1015            mov     dpl,r2
0208 8B83      1016            mov     dph,r3
020A 8CF0      1017            mov     b,r4
020C ED        1018            mov     a,r5
020D 22        1019            ret
020E           1020   ;------------------------------------------------------------
020E           1021   ;Allocation info for local variables in function 'UART1_Init'
020E           1022   ;------------------------------------------------------------
020E           1023   ;baudrate                  Allocated to registers r2 r3 r4 r5 
020E           1024   ;------------------------------------------------------------
020E           1025   ;        EFM8_JDY40_Transmitter.c:615: void UART1_Init (unsigned long baudrate)
020E           1026   ;        -----------------------------------------
020E           1027   ;         function UART1_Init
020E           1028   ;        -----------------------------------------
020E           1029   _UART1_Init:
020E AA82      1030            mov     r2,dpl
0210 AB83      1031            mov     r3,dph
0212 ACF0      1032            mov     r4,b
0214 FD        1033            mov     r5,a
0215           1034   ;        EFM8_JDY40_Transmitter.c:617: SFRPAGE = 0x20;
0215 75A720    1035            mov     _SFRPAGE,#0x20
0218           1036   ;        EFM8_JDY40_Transmitter.c:618: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
0218 75930C    1037            mov     _SMOD1,#0x0C
021B           1038   ;        EFM8_JDY40_Transmitter.c:619: SCON1 = 0x10;
021B 75C810    1039            mov     _SCON1,#0x10
021E           1040   ;        EFM8_JDY40_Transmitter.c:620: SBCON1 =0x00;   // disable baud rate generator
021E 759400    1041            mov     _SBCON1,#0x00
0221           1042   ;        EFM8_JDY40_Transmitter.c:621: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
0221 8A00      1043            mov     __divulong_PARM_2,r2
0223 8B01      1044            mov     (__divulong_PARM_2 + 1),r3
0225 8C02      1045            mov     (__divulong_PARM_2 + 2),r4
0227 8D03      1046            mov     (__divulong_PARM_2 + 3),r5
0229 90A200    1047            mov     dptr,#0xA200
022C 75F04A    1048            mov     b,#0x4A
022F 7404      1049            mov     a,#0x04
0231 120000    1050            lcall   __divulong
0234 AA82      1051            mov     r2,dpl
0236 AB83      1052            mov     r3,dph
0238 ACF0      1053            mov     r4,b
023A FD        1054            mov     r5,a
023B 750018    1055            mov     __divulong_PARM_2,#0x18
023E E4        1056            clr     a
023F F501      1057            mov     (__divulong_PARM_2 + 1),a
0241 F502      1058            mov     (__divulong_PARM_2 + 2),a
0243 F503      1059            mov     (__divulong_PARM_2 + 3),a
0245 8A82      1060            mov     dpl,r2
0247 8B83      1061            mov     dph,r3
0249 8CF0      1062            mov     b,r4
024B ED        1063            mov     a,r5
024C 120000    1064            lcall   __divulong
024F AA82      1065            mov     r2,dpl
0251 AB83      1066            mov     r3,dph
0253 ACF0      1067            mov     r4,b
0255 FD        1068            mov     r5,a
0256 E4        1069            clr     a
0257 C3        1070            clr     c
0258 9A        1071            subb    a,r2
0259 FA        1072            mov     r2,a
025A E4        1073            clr     a
025B 9B        1074            subb    a,r3
025C FB        1075            mov     r3,a
025D 7401      1076            mov     a,#0x01
025F 9C        1077            subb    a,r4
0260 E4        1078            clr     a
0261 9D        1079            subb    a,r5
0262 8A95      1080            mov     _SBRL1,r2
0264 8B96      1081            mov     (_SBRL1 >> 8),r3
0266           1082   ;        EFM8_JDY40_Transmitter.c:622: TI1 = 1; // indicate ready for TX
0266 D2C9      1083            setb    _TI1
0268           1084   ;        EFM8_JDY40_Transmitter.c:623: SBCON1 |= 0x40;   // enable baud rate generator
0268 439440    1085            orl     _SBCON1,#0x40
026B           1086   ;        EFM8_JDY40_Transmitter.c:624: SFRPAGE = 0x00;
026B 75A700    1087            mov     _SFRPAGE,#0x00
026E 22        1088            ret
026F           1089   ;------------------------------------------------------------
026F           1090   ;Allocation info for local variables in function 'putchar1'
026F           1091   ;------------------------------------------------------------
026F           1092   ;c                         Allocated to registers r2 
026F           1093   ;------------------------------------------------------------
026F           1094   ;        EFM8_JDY40_Transmitter.c:627: void putchar1 (char c) 
026F           1095   ;        -----------------------------------------
026F           1096   ;         function putchar1
026F           1097   ;        -----------------------------------------
026F           1098   _putchar1:
026F AA82      1099            mov     r2,dpl
0271           1100   ;        EFM8_JDY40_Transmitter.c:629: SFRPAGE = 0x20;
0271 75A720    1101            mov     _SFRPAGE,#0x20
0274           1102   ;        EFM8_JDY40_Transmitter.c:630: while (!TI1);
0274           1103   L013001?:
0274           1104   ;        EFM8_JDY40_Transmitter.c:631: TI1=0;
0274 10C9D0    1105            jbc     _TI1,L013008?
0277 8000      1106            sjmp    L013001?
0279           1107   L013008?:
0279           1108   ;        EFM8_JDY40_Transmitter.c:632: SBUF1 = c;
0279 8A92      1109            mov     _SBUF1,r2
027B           1110   ;        EFM8_JDY40_Transmitter.c:633: SFRPAGE = 0x00;
027B 75A700    1111            mov     _SFRPAGE,#0x00
027E 22        1112            ret
027F           1113   ;------------------------------------------------------------
027F           1114   ;Allocation info for local variables in function 'sendstr1'
027F           1115   ;------------------------------------------------------------
027F           1116   ;s                         Allocated to registers r2 r3 r4 
027F           1117   ;------------------------------------------------------------
027F           1118   ;        EFM8_JDY40_Transmitter.c:636: void sendstr1 (char * s)
027F           1119   ;        -----------------------------------------
027F           1120   ;         function sendstr1
027F           1121   ;        -----------------------------------------
027F           1122   _sendstr1:
027F AA82      1123            mov     r2,dpl
0281 AB83      1124            mov     r3,dph
0283 ACF0      1125            mov     r4,b
0285           1126   ;        EFM8_JDY40_Transmitter.c:638: while(*s)
0285           1127   L014001?:
0285 8A82      1128            mov     dpl,r2
0287 8B83      1129            mov     dph,r3
0289 8CF0      1130            mov     b,r4
028B 120000    1131            lcall   __gptrget
028E FD        1132            mov     r5,a
028F 6000      1133            jz      L014004?
0291           1134   ;        EFM8_JDY40_Transmitter.c:640: putchar1(*s);
0291 8D82      1135            mov     dpl,r5
0293 C002      1136            push    ar2
0295 C003      1137            push    ar3
0297 C004      1138            push    ar4
0299 120000    1139            lcall   _putchar1
029C D004      1140            pop     ar4
029E D003      1141            pop     ar3
02A0 D002      1142            pop     ar2
02A2           1143   ;        EFM8_JDY40_Transmitter.c:641: s++;      
02A2 0A        1144            inc     r2
02A3 BA0010    1145            cjne    r2,#0x00,L014001?
02A6 0B        1146            inc     r3
02A7 8000      1147            sjmp    L014001?
02A9           1148   L014004?:
02A9 22        1149            ret
02AA           1150   ;------------------------------------------------------------
02AA           1151   ;Allocation info for local variables in function 'getchar1'
02AA           1152   ;------------------------------------------------------------
02AA           1153   ;c                         Allocated to registers 
02AA           1154   ;------------------------------------------------------------
02AA           1155   ;        EFM8_JDY40_Transmitter.c:645: char getchar1 (void)
02AA           1156   ;        -----------------------------------------
02AA           1157   ;         function getchar1
02AA           1158   ;        -----------------------------------------
02AA           1159   _getchar1:
02AA           1160   ;        EFM8_JDY40_Transmitter.c:648: SFRPAGE = 0x20;
02AA 75A720    1161            mov     _SFRPAGE,#0x20
02AD           1162   ;        EFM8_JDY40_Transmitter.c:649: while (!RI1);
02AD           1163   L015001?:
02AD           1164   ;        EFM8_JDY40_Transmitter.c:650: RI1=0;
02AD 10C810    1165            jbc     _RI1,L015008?
02B0 8000      1166            sjmp    L015001?
02B2           1167   L015008?:
02B2           1168   ;        EFM8_JDY40_Transmitter.c:652: SCON1&=0b_0011_1111;
02B2 53C83F    1169            anl     _SCON1,#0x3F
02B5           1170   ;        EFM8_JDY40_Transmitter.c:653: c = SBUF1;
02B5 859282    1171            mov     dpl,_SBUF1
02B8           1172   ;        EFM8_JDY40_Transmitter.c:654: SFRPAGE = 0x00;
02B8 75A700    1173            mov     _SFRPAGE,#0x00
02BB           1174   ;        EFM8_JDY40_Transmitter.c:655: return (c);
02BB 22        1175            ret
02BC           1176   ;------------------------------------------------------------
02BC           1177   ;Allocation info for local variables in function 'getchar1_with_timeout'
02BC           1178   ;------------------------------------------------------------
02BC           1179   ;c                         Allocated to registers 
02BC           1180   ;timeout                   Allocated to registers r2 r3 
02BC           1181   ;------------------------------------------------------------
02BC           1182   ;        EFM8_JDY40_Transmitter.c:658: char getchar1_with_timeout (void)
02BC           1183   ;        -----------------------------------------
02BC           1184   ;         function getchar1_with_timeout
02BC           1185   ;        -----------------------------------------
02BC           1186   _getchar1_with_timeout:
02BC           1187   ;        EFM8_JDY40_Transmitter.c:662: SFRPAGE = 0x20;
02BC 75A720    1188            mov     _SFRPAGE,#0x20
02BF           1189   ;        EFM8_JDY40_Transmitter.c:664: while (!RI1)
02BF 7A00      1190            mov     r2,#0x00
02C1 7B00      1191            mov     r3,#0x00
02C3           1192   L016003?:
02C3 20C890    1193            jb      _RI1,L016005?
02C6           1194   ;        EFM8_JDY40_Transmitter.c:666: SFRPAGE = 0x00;
02C6 75A700    1195            mov     _SFRPAGE,#0x00
02C9           1196   ;        EFM8_JDY40_Transmitter.c:667: Timer3us(20);
02C9 758214    1197            mov     dpl,#0x14
02CC C002      1198            push    ar2
02CE C003      1199            push    ar3
02D0 120000    1200            lcall   _Timer3us
02D3 D003      1201            pop     ar3
02D5 D002      1202            pop     ar2
02D7           1203   ;        EFM8_JDY40_Transmitter.c:668: SFRPAGE = 0x20;
02D7 75A720    1204            mov     _SFRPAGE,#0x20
02DA           1205   ;        EFM8_JDY40_Transmitter.c:669: timeout++;
02DA 0A        1206            inc     r2
02DB BA00D0    1207            cjne    r2,#0x00,L016012?
02DE 0B        1208            inc     r3
02DF           1209   L016012?:
02DF           1210   ;        EFM8_JDY40_Transmitter.c:670: if(timeout==25000)
02DF BAA850    1211            cjne    r2,#0xA8,L016003?
02E2 BB6150    1212            cjne    r3,#0x61,L016003?
02E5           1213   ;        EFM8_JDY40_Transmitter.c:672: SFRPAGE = 0x00;
02E5 75A700    1214            mov     _SFRPAGE,#0x00
02E8           1215   ;        EFM8_JDY40_Transmitter.c:673: return ('\n'); // Timeout after half second
02E8 75820A    1216            mov     dpl,#0x0A
02EB 22        1217            ret
02EC           1218   L016005?:
02EC           1219   ;        EFM8_JDY40_Transmitter.c:676: RI1=0;
02EC C2C8      1220            clr     _RI1
02EE           1221   ;        EFM8_JDY40_Transmitter.c:678: SCON1&=0b_0011_1111;
02EE 53C83F    1222            anl     _SCON1,#0x3F
02F1           1223   ;        EFM8_JDY40_Transmitter.c:679: c = SBUF1;
02F1 859282    1224            mov     dpl,_SBUF1
02F4           1225   ;        EFM8_JDY40_Transmitter.c:680: SFRPAGE = 0x00;
02F4 75A700    1226            mov     _SFRPAGE,#0x00
02F7           1227   ;        EFM8_JDY40_Transmitter.c:681: return (c);
02F7 22        1228            ret
02F8           1229   ;------------------------------------------------------------
02F8           1230   ;Allocation info for local variables in function 'getstr1'
02F8           1231   ;------------------------------------------------------------
02F8           1232   ;s                         Allocated to registers r2 r3 r4 
02F8           1233   ;c                         Allocated to registers r5 
02F8           1234   ;------------------------------------------------------------
02F8           1235   ;        EFM8_JDY40_Transmitter.c:684: void getstr1 (char * s)
02F8           1236   ;        -----------------------------------------
02F8           1237   ;         function getstr1
02F8           1238   ;        -----------------------------------------
02F8           1239   _getstr1:
02F8 AA82      1240            mov     r2,dpl
02FA AB83      1241            mov     r3,dph
02FC ACF0      1242            mov     r4,b
02FE           1243   ;        EFM8_JDY40_Transmitter.c:688: while(1)
02FE           1244   L017004?:
02FE           1245   ;        EFM8_JDY40_Transmitter.c:690: c=getchar1_with_timeout();
02FE C002      1246            push    ar2
0300 C003      1247            push    ar3
0302 C004      1248            push    ar4
0304 120000    1249            lcall   _getchar1_with_timeout
0307 AD82      1250            mov     r5,dpl
0309 D004      1251            pop     ar4
030B D003      1252            pop     ar3
030D D002      1253            pop     ar2
030F           1254   ;        EFM8_JDY40_Transmitter.c:691: if(c=='\n')
030F BD0A50    1255            cjne    r5,#0x0A,L017002?
0312           1256   ;        EFM8_JDY40_Transmitter.c:693: *s=0;
0312 8A82      1257            mov     dpl,r2
0314 8B83      1258            mov     dph,r3
0316 8CF0      1259            mov     b,r4
0318 E4        1260            clr     a
0319           1261   ;        EFM8_JDY40_Transmitter.c:694: return;
0319 020000    1262            ljmp    __gptrput
031C           1263   L017002?:
031C           1264   ;        EFM8_JDY40_Transmitter.c:696: *s=c;
031C 8A82      1265            mov     dpl,r2
031E 8B83      1266            mov     dph,r3
0320 8CF0      1267            mov     b,r4
0322 ED        1268            mov     a,r5
0323 120000    1269            lcall   __gptrput
0326 A3        1270            inc     dptr
0327 AA82      1271            mov     r2,dpl
0329 AB83      1272            mov     r3,dph
032B           1273   ;        EFM8_JDY40_Transmitter.c:697: s++;
032B 8000      1274            sjmp    L017004?
032D           1275   ;------------------------------------------------------------
032D           1276   ;Allocation info for local variables in function 'RXU1'
032D           1277   ;------------------------------------------------------------
032D           1278   ;------------------------------------------------------------
032D           1279   ;        EFM8_JDY40_Transmitter.c:702: bit RXU1 (void)
032D           1280   ;        -----------------------------------------
032D           1281   ;         function RXU1
032D           1282   ;        -----------------------------------------
032D           1283   _RXU1:
032D           1284   ;        EFM8_JDY40_Transmitter.c:705: SFRPAGE = 0x20;
032D 75A720    1285            mov     _SFRPAGE,#0x20
0330           1286   ;        EFM8_JDY40_Transmitter.c:706: mybit=RI1;
0330 A2C8      1287            mov     c,_RI1
0332           1288   ;        EFM8_JDY40_Transmitter.c:707: SFRPAGE = 0x00;
0332 75A700    1289            mov     _SFRPAGE,#0x00
0335           1290   ;        EFM8_JDY40_Transmitter.c:708: return mybit;
0335 22        1291            ret
0336           1292   ;------------------------------------------------------------
0336           1293   ;Allocation info for local variables in function 'waitms_or_RI1'
0336           1294   ;------------------------------------------------------------
0336           1295   ;ms                        Allocated to registers r2 r3 
0336           1296   ;j                         Allocated to registers r4 r5 
0336           1297   ;k                         Allocated to registers r6 
0336           1298   ;------------------------------------------------------------
0336           1299   ;        EFM8_JDY40_Transmitter.c:711: void waitms_or_RI1 (unsigned int ms)
0336           1300   ;        -----------------------------------------
0336           1301   ;         function waitms_or_RI1
0336           1302   ;        -----------------------------------------
0336           1303   _waitms_or_RI1:
0336 AA82      1304            mov     r2,dpl
0338 AB83      1305            mov     r3,dph
033A           1306   ;        EFM8_JDY40_Transmitter.c:715: for(j=0; j<ms; j++)
033A 7C00      1307            mov     r4,#0x00
033C 7D00      1308            mov     r5,#0x00
033E           1309   L019007?:
033E C3        1310            clr     c
033F EC        1311            mov     a,r4
0340 9A        1312            subb    a,r2
0341 ED        1313            mov     a,r5
0342 9B        1314            subb    a,r3
0343 5000      1315            jnc     L019011?
0345           1316   ;        EFM8_JDY40_Transmitter.c:717: for (k=0; k<4; k++)
0345 7E00      1317            mov     r6,#0x00
0347           1318   L019003?:
0347 BE0490    1319            cjne    r6,#0x04,L019019?
034A           1320   L019019?:
034A 5000      1321            jnc     L019009?
034C           1322   ;        EFM8_JDY40_Transmitter.c:719: if(RXU1()) return;
034C C002      1323            push    ar2
034E C003      1324            push    ar3
0350 C004      1325            push    ar4
0352 C005      1326            push    ar5
0354 C006      1327            push    ar6
0356 120000    1328            lcall   _RXU1
0359 E4        1329            clr     a
035A 33        1330            rlc     a
035B D006      1331            pop     ar6
035D D005      1332            pop     ar5
035F D004      1333            pop     ar4
0361 D003      1334            pop     ar3
0363 D002      1335            pop     ar2
0365 6000      1336            jz      L019002?
0367 22        1337            ret
0368           1338   L019002?:
0368           1339   ;        EFM8_JDY40_Transmitter.c:720: Timer3us(250);
0368 7582FA    1340            mov     dpl,#0xFA
036B C002      1341            push    ar2
036D C003      1342            push    ar3
036F C004      1343            push    ar4
0371 C005      1344            push    ar5
0373 C006      1345            push    ar6
0375 120000    1346            lcall   _Timer3us
0378 D006      1347            pop     ar6
037A D005      1348            pop     ar5
037C D004      1349            pop     ar4
037E D003      1350            pop     ar3
0380 D002      1351            pop     ar2
0382           1352   ;        EFM8_JDY40_Transmitter.c:717: for (k=0; k<4; k++)
0382 0E        1353            inc     r6
0383 8000      1354            sjmp    L019003?
0385           1355   L019009?:
0385           1356   ;        EFM8_JDY40_Transmitter.c:715: for(j=0; j<ms; j++)
0385 0C        1357            inc     r4
0386 BC00D0    1358            cjne    r4,#0x00,L019007?
0389 0D        1359            inc     r5
038A 8000      1360            sjmp    L019007?
038C           1361   L019011?:
038C 22        1362            ret
038D           1363   ;------------------------------------------------------------
038D           1364   ;Allocation info for local variables in function 'SendATCommand'
038D           1365   ;------------------------------------------------------------
038D           1366   ;s                         Allocated to registers r2 r3 r4 
038D           1367   ;------------------------------------------------------------
038D           1368   ;        EFM8_JDY40_Transmitter.c:725: void SendATCommand (char * s)
038D           1369   ;        -----------------------------------------
038D           1370   ;         function SendATCommand
038D           1371   ;        -----------------------------------------
038D           1372   _SendATCommand:
038D AA82      1373            mov     r2,dpl
038F AB83      1374            mov     r3,dph
0391 ACF0      1375            mov     r4,b
0393           1376   ;        EFM8_JDY40_Transmitter.c:727: printf("Command: %s", s);
0393 C002      1377            push    ar2
0395 C003      1378            push    ar3
0397 C004      1379            push    ar4
0399 C002      1380            push    ar2
039B C003      1381            push    ar3
039D C004      1382            push    ar4
039F 7450      1383            mov     a,#__str_0
03A1 C0E0      1384            push    acc
03A3 74C4      1385            mov     a,#(__str_0 >> 8)
03A5 C0E0      1386            push    acc
03A7 7480      1387            mov     a,#0x80
03A9 C0E0      1388            push    acc
03AB 120000    1389            lcall   _printf
03AE E581      1390            mov     a,sp
03B0 24FA      1391            add     a,#0xfa
03B2 F581      1392            mov     sp,a
03B4           1393   ;        EFM8_JDY40_Transmitter.c:728: P2_0=0; // 'set' pin to 0 is 'AT' mode.
03B4 C2A0      1394            clr     _P2_0
03B6           1395   ;        EFM8_JDY40_Transmitter.c:729: waitms(5);
03B6 900005    1396            mov     dptr,#0x0005
03B9 120000    1397            lcall   _waitms
03BC D004      1398            pop     ar4
03BE D003      1399            pop     ar3
03C0 D002      1400            pop     ar2
03C2           1401   ;        EFM8_JDY40_Transmitter.c:730: sendstr1(s);
03C2 8A82      1402            mov     dpl,r2
03C4 8B83      1403            mov     dph,r3
03C6 8CF0      1404            mov     b,r4
03C8 120000    1405            lcall   _sendstr1
03CB           1406   ;        EFM8_JDY40_Transmitter.c:731: waitms(10);
03CB 90000A    1407            mov     dptr,#0x000A
03CE 120000    1408            lcall   _waitms
03D1           1409   ;        EFM8_JDY40_Transmitter.c:732: P2_0=1; // 'set' pin to 1 is normal operation mode.
03D1 D2A0      1410            setb    _P2_0
03D3 22        1411            ret
03D4           1412   ;------------------------------------------------------------
03D4           1413   ;Allocation info for local variables in function 'main'
03D4           1414   ;------------------------------------------------------------
03D4           1415   ;X_pos_L                   Allocated with name '_main_X_pos_L_1_111'
03D4           1416   ;Y_pos_R                   Allocated with name '_main_Y_pos_R_1_111'
03D4           1417   ;X_pos_L_string            Allocated with name '_main_X_pos_L_string_1_111'
03D4           1418   ;count                     Allocated to registers 
03D4           1419   ;potentiometer             Allocated to registers r4 r5 r2 r3 
03D4           1420   ;PWM_DutyCyclePeriod       Allocated to registers 
03D4           1421   ;------------------------------------------------------------
03D4           1422   ;        EFM8_JDY40_Transmitter.c:735: void main (void)
03D4           1423   ;        -----------------------------------------
03D4           1424   ;         function main
03D4           1425   ;        -----------------------------------------
03D4           1426   _main:
03D4           1427   ;        EFM8_JDY40_Transmitter.c:749: waitms(500);
03D4 9001F4    1428            mov     dptr,#0x01F4
03D7 120000    1429            lcall   _waitms
03DA           1430   ;        EFM8_JDY40_Transmitter.c:750: printf("\r\nJDY-40 test\r\n");
03DA 74D0      1431            mov     a,#__str_1
03DC C0E0      1432            push    acc
03DE 74C4      1433            mov     a,#(__str_1 >> 8)
03E0 C0E0      1434            push    acc
03E2 7480      1435            mov     a,#0x80
03E4 C0E0      1436            push    acc
03E6 120000    1437            lcall   _printf
03E9 1581      1438            dec     sp
03EB 1581      1439            dec     sp
03ED 1581      1440            dec     sp
03EF           1441   ;        EFM8_JDY40_Transmitter.c:751: UART1_Init(9600);
03EF 902580    1442            mov     dptr,#0x2580
03F2 E4        1443            clr     a
03F3 F5F0      1444            mov     b,a
03F5 120000    1445            lcall   _UART1_Init
03F8           1446   ;        EFM8_JDY40_Transmitter.c:753: InitPinADC(2, 2); // Configure P0.1 as analog input
03F8 756002    1447            mov     _InitPinADC_PARM_2,#0x02
03FB 758202    1448            mov     dpl,#0x02
03FE 120000    1449            lcall   _InitPinADC
0401           1450   ;        EFM8_JDY40_Transmitter.c:754: InitPinADC(1, 2); // Configure P2.3 as analog input
0401 756002    1451            mov     _InitPinADC_PARM_2,#0x02
0404 758201    1452            mov     dpl,#0x01
0407 120000    1453            lcall   _InitPinADC
040A           1454   ;        EFM8_JDY40_Transmitter.c:755: InitADC();
040A 120000    1455            lcall   _InitADC
040D           1456   ;        EFM8_JDY40_Transmitter.c:771: SendATCommand("AT+DVID2385\r\n");  
040D 90C510    1457            mov     dptr,#__str_2
0410 75F080    1458            mov     b,#0x80
0413 120000    1459            lcall   _SendATCommand
0416           1460   ;        EFM8_JDY40_Transmitter.c:774: SendATCommand("AT+VER\r\n");
0416 90C550    1461            mov     dptr,#__str_3
0419 75F080    1462            mov     b,#0x80
041C 120000    1463            lcall   _SendATCommand
041F           1464   ;        EFM8_JDY40_Transmitter.c:775: SendATCommand("AT+BAUD\r\n");
041F 90C590    1465            mov     dptr,#__str_4
0422 75F080    1466            mov     b,#0x80
0425 120000    1467            lcall   _SendATCommand
0428           1468   ;        EFM8_JDY40_Transmitter.c:776: SendATCommand("AT+RFID\r\n");
0428 90C5D0    1469            mov     dptr,#__str_5
042B 75F080    1470            mov     b,#0x80
042E 120000    1471            lcall   _SendATCommand
0431           1472   ;        EFM8_JDY40_Transmitter.c:777: SendATCommand("AT+DVID\r\n");
0431 90C610    1473            mov     dptr,#__str_6
0434 75F080    1474            mov     b,#0x80
0437 120000    1475            lcall   _SendATCommand
043A           1476   ;        EFM8_JDY40_Transmitter.c:778: SendATCommand("AT+RFC\r\n");
043A 90C650    1477            mov     dptr,#__str_7
043D 75F080    1478            mov     b,#0x80
0440 120000    1479            lcall   _SendATCommand
0443           1480   ;        EFM8_JDY40_Transmitter.c:779: SendATCommand("AT+POWE\r\n");
0443 90C690    1481            mov     dptr,#__str_8
0446 75F080    1482            mov     b,#0x80
0449 120000    1483            lcall   _SendATCommand
044C           1484   ;        EFM8_JDY40_Transmitter.c:780: SendATCommand("AT+CLSS\r\n");
044C 90C6D0    1485            mov     dptr,#__str_9
044F 75F080    1486            mov     b,#0x80
0452 120000    1487            lcall   _SendATCommand
0455           1488   ;        EFM8_JDY40_Transmitter.c:783: while(1)
0455           1489   L021002?:
0455           1490   ;        EFM8_JDY40_Transmitter.c:788: X_pos_L = Volts_at_Pin(QFP32_MUX_P2_2);
0455 75820F    1491            mov     dpl,#0x0F
0458 120000    1492            lcall   _Volts_at_Pin
045B 8582A0    1493            mov     _main_X_pos_L_1_111,dpl
045E 8583A1    1494            mov     (_main_X_pos_L_1_111 + 1),dph
0461 85F0A2    1495            mov     (_main_X_pos_L_1_111 + 2),b
0464 F5A3      1496            mov     (_main_X_pos_L_1_111 + 3),a
0466           1497   ;        EFM8_JDY40_Transmitter.c:789: Y_pos_R = Volts_at_Pin(QFP32_MUX_P1_2);
0466 758208    1498            mov     dpl,#0x08
0469 120000    1499            lcall   _Volts_at_Pin
046C 8582F0    1500            mov     _main_Y_pos_R_1_111,dpl
046F 8583F1    1501            mov     (_main_Y_pos_R_1_111 + 1),dph
0472 85F0F2    1502            mov     (_main_Y_pos_R_1_111 + 2),b
0475 F5F3      1503            mov     (_main_Y_pos_R_1_111 + 3),a
0477           1504   ;        EFM8_JDY40_Transmitter.c:792: X_pos_L *= 1000;
0477 C0A0      1505            push    _main_X_pos_L_1_111
0479 C0A1      1506            push    (_main_X_pos_L_1_111 + 1)
047B C0A2      1507            push    (_main_X_pos_L_1_111 + 2)
047D C0A3      1508            push    (_main_X_pos_L_1_111 + 3)
047F 900000    1509            mov     dptr,#0x0000
0482 75F07A    1510            mov     b,#0x7A
0485 7444      1511            mov     a,#0x44
0487 120000    1512            lcall   ___fsmul
048A 8582A0    1513            mov     _main_X_pos_L_1_111,dpl
048D 8583A1    1514            mov     (_main_X_pos_L_1_111 + 1),dph
0490 85F0A2    1515            mov     (_main_X_pos_L_1_111 + 2),b
0493 F5A3      1516            mov     (_main_X_pos_L_1_111 + 3),a
0495 E581      1517            mov     a,sp
0497 24FC      1518            add     a,#0xfc
0499 F581      1519            mov     sp,a
049B           1520   ;        EFM8_JDY40_Transmitter.c:793: Y_pos_R *= 1000;
049B C0F0      1521            push    _main_Y_pos_R_1_111
049D C0F1      1522            push    (_main_Y_pos_R_1_111 + 1)
049F C0F2      1523            push    (_main_Y_pos_R_1_111 + 2)
04A1 C0F3      1524            push    (_main_Y_pos_R_1_111 + 3)
04A3 900000    1525            mov     dptr,#0x0000
04A6 75F07A    1526            mov     b,#0x7A
04A9 7444      1527            mov     a,#0x44
04AB 120000    1528            lcall   ___fsmul
04AE 8582F0    1529            mov     _main_Y_pos_R_1_111,dpl
04B1 8583F1    1530            mov     (_main_Y_pos_R_1_111 + 1),dph
04B4 85F0F2    1531            mov     (_main_Y_pos_R_1_111 + 2),b
04B7 F5F3      1532            mov     (_main_Y_pos_R_1_111 + 3),a
04B9 E581      1533            mov     a,sp
04BB 24FC      1534            add     a,#0xfc
04BD F581      1535            mov     sp,a
04BF           1536   ;        EFM8_JDY40_Transmitter.c:796: potentiometer = throttle_control_ADC(QFP32_MUX_P2_3);
04BF 758210    1537            mov     dpl,#0x10
04C2 120000    1538            lcall   _throttle_control_ADC
04C5 AC82      1539            mov     r4,dpl
04C7 AD83      1540            mov     r5,dph
04C9 AAF0      1541            mov     r2,b
04CB FB        1542            mov     r3,a
04CC           1543   ;        EFM8_JDY40_Transmitter.c:799: potentiometer *= 1000;
04CC C004      1544            push    ar4
04CE C005      1545            push    ar5
04D0 C002      1546            push    ar2
04D2 C003      1547            push    ar3
04D4 900000    1548            mov     dptr,#0x0000
04D7 75F07A    1549            mov     b,#0x7A
04DA 7444      1550            mov     a,#0x44
04DC 120000    1551            lcall   ___fsmul
04DF AC82      1552            mov     r4,dpl
04E1 AD83      1553            mov     r5,dph
04E3 AAF0      1554            mov     r2,b
04E5 FB        1555            mov     r3,a
04E6 E581      1556            mov     a,sp
04E8 24FC      1557            add     a,#0xfc
04EA F581      1558            mov     sp,a
04EC           1559   ;        EFM8_JDY40_Transmitter.c:801: sprintf(buff, "%0*d %0*d %d\n", 4, (int)X_pos_L, 4, (int)Y_pos_R, (int)potentiometer);
04EC 8C82      1560            mov     dpl,r4
04EE 8D83      1561            mov     dph,r5
04F0 8AF0      1562            mov     b,r2
04F2 EB        1563            mov     a,r3
04F3 120000    1564            lcall   ___fs2sint
04F6 AA82      1565            mov     r2,dpl
04F8 AB83      1566            mov     r3,dph
04FA 85F082    1567            mov     dpl,_main_Y_pos_R_1_111
04FD 85F183    1568            mov     dph,(_main_Y_pos_R_1_111 + 1)
0500 85F2F0    1569            mov     b,(_main_Y_pos_R_1_111 + 2)
0503 E5F3      1570            mov     a,(_main_Y_pos_R_1_111 + 3)
0505 C002      1571            push    ar2
0507 C003      1572            push    ar3
0509 120000    1573            lcall   ___fs2sint
050C AC82      1574            mov     r4,dpl
050E AD83      1575            mov     r5,dph
0510 85A082    1576            mov     dpl,_main_X_pos_L_1_111
0513 85A183    1577            mov     dph,(_main_X_pos_L_1_111 + 1)
0516 85A2F0    1578            mov     b,(_main_X_pos_L_1_111 + 2)
0519 E5A3      1579            mov     a,(_main_X_pos_L_1_111 + 3)
051B C004      1580            push    ar4
051D C005      1581            push    ar5
051F 120000    1582            lcall   ___fs2sint
0522 AE82      1583            mov     r6,dpl
0524 AF83      1584            mov     r7,dph
0526 7404      1585            mov     a,#0x04
0528 C0E0      1586            push    acc
052A E4        1587            clr     a
052B C0E0      1588            push    acc
052D C006      1589            push    ar6
052F C007      1590            push    ar7
0531 7404      1591            mov     a,#0x04
0533 C0E0      1592            push    acc
0535 E4        1593            clr     a
0536 C0E0      1594            push    acc
0538 7490      1595            mov     a,#__str_10
053A C0E0      1596            push    acc
053C 74C7      1597            mov     a,#(__str_10 >> 8)
053E C0E0      1598            push    acc
0540 7480      1599            mov     a,#0x80
0542 C0E0      1600            push    acc
0544 74D0      1601            mov     a,#_buff
0546 C0E0      1602            push    acc
0548 7416      1603            mov     a,#(_buff >> 8)
054A C0E0      1604            push    acc
054C 7440      1605            mov     a,#0x40
054E C0E0      1606            push    acc
0550 120000    1607            lcall   _sprintf
0553 E581      1608            mov     a,sp
0555 24F0      1609            add     a,#0xf0
0557 F581      1610            mov     sp,a
0559           1611   ;        EFM8_JDY40_Transmitter.c:804: printf("%s",buff);
0559 74D0      1612            mov     a,#_buff
055B C0E0      1613            push    acc
055D 7416      1614            mov     a,#(_buff >> 8)
055F C0E0      1615            push    acc
0561 7440      1616            mov     a,#0x40
0563 C0E0      1617            push    acc
0565 7410      1618            mov     a,#__str_11
0567 C0E0      1619            push    acc
0569 74C8      1620            mov     a,#(__str_11 >> 8)
056B C0E0      1621            push    acc
056D 7480      1622            mov     a,#0x80
056F C0E0      1623            push    acc
0571 120000    1624            lcall   _printf
0574 E581      1625            mov     a,sp
0576 24FA      1626            add     a,#0xfa
0578 F581      1627            mov     sp,a
057A           1628   ;        EFM8_JDY40_Transmitter.c:805: sendstr1(buff);
057A 9016D0    1629            mov     dptr,#_buff
057D 75F040    1630            mov     b,#0x40
0580 120000    1631            lcall   _sendstr1
0583           1632   ;        EFM8_JDY40_Transmitter.c:807: waitms_or_RI1(100);
0583 900064    1633            mov     dptr,#0x0064
0586 120000    1634            lcall   _waitms_or_RI1
0589 020000    1635            ljmp    L021002?
058C           1636            rseg R_CSEG
058C           1637   
0000           1638            rseg R_XINIT
0000           1639   
0000           1640            rseg R_CONST
0000           1641   __str_0:
0000 436F6D6D  1642            db 'Command: %s'
     616E643A
     202573
000B 00        1643            db 0x00
000C           1644   __str_1:
000C 0D        1645            db 0x0D
000D 0A        1646            db 0x0A
000E 4A44592D  1647            db 'JDY-40 test'
     34302074
     657374
0019 0D        1648            db 0x0D
001A 0A        1649            db 0x0A
001B 00        1650            db 0x00
001C           1651   __str_2:
001C 41542B44  1652            db 'AT+DVID2385'
     56494432
     333835
0027 0D        1653            db 0x0D
0028 0A        1654            db 0x0A
0029 00        1655            db 0x00
002A           1656   __str_3:
002A 41542B56  1657            db 'AT+VER'
     4552
0030 0D        1658            db 0x0D
0031 0A        1659            db 0x0A
0032 00        1660            db 0x00
0033           1661   __str_4:
0033 41542B42  1662            db 'AT+BAUD'
     415544
003A 0D        1663            db 0x0D
003B 0A        1664            db 0x0A
003C 00        1665            db 0x00
003D           1666   __str_5:
003D 41542B52  1667            db 'AT+RFID'
     464944
0044 0D        1668            db 0x0D
0045 0A        1669            db 0x0A
0046 00        1670            db 0x00
0047           1671   __str_6:
0047 41542B44  1672            db 'AT+DVID'
     564944
004E 0D        1673            db 0x0D
004F 0A        1674            db 0x0A
0050 00        1675            db 0x00
0051           1676   __str_7:
0051 41542B52  1677            db 'AT+RFC'
     4643
0057 0D        1678            db 0x0D
0058 0A        1679            db 0x0A
0059 00        1680            db 0x00
005A           1681   __str_8:
005A 41542B50  1682            db 'AT+POWE'
     4F5745
0061 0D        1683            db 0x0D
0062 0A        1684            db 0x0A
0063 00        1685            db 0x00
0064           1686   __str_9:
0064 41542B43  1687            db 'AT+CLSS'
     4C5353
006B 0D        1688            db 0x0D
006C 0A        1689            db 0x0A
006D 00        1690            db 0x00
006E           1691   __str_10:
006E 25302A64  1692            db '%0*d %0*d %d'
     2025302A
     64202564
007A 0A        1693            db 0x0A
007B 00        1694            db 0x00
007C           1695   __str_11:
007C 2573      1696            db '%s'
007E 00        1697            db 0x00
007F           1698   
0003           1699            CSEG
0003           1700   
0003           1701   end
