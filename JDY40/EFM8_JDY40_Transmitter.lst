0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Tue Jul 23 16:48:16 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_Transmitter
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _main
0000             28            public _SendATCommand
0000             29            public _waitms_or_RI1
0000             30            public _RXU1
0000             31            public _getstr1
0000             32            public _getchar1_with_timeout
0000             33            public _getchar1
0000             34            public _sendstr1
0000             35            public _putchar1
0000             36            public _UART1_Init
0000             37            public _throttle_control_ADC
0000             38            public _Volts_at_Pin
0000             39            public _ADC_at_Pin
0000             40            public _Get_ADC
0000             41            public _InitPinADC
0000             42            public _waitms
0000             43            public _Timer3us
0000             44            public _TIMER0_Init
0000             45            public _InitADC
0000             46            public __c51_external_startup
0000             47            public _buff
0000             48   ;--------------------------------------------------------
0000             49   ; Special Function Registers
0000             50   ;--------------------------------------------------------
0000             51   _ACC            DATA 0xe0
0000             52   _ADC0ASAH       DATA 0xb6
0000             53   _ADC0ASAL       DATA 0xb5
0000             54   _ADC0ASCF       DATA 0xa1
0000             55   _ADC0ASCT       DATA 0xc7
0000             56   _ADC0CF0        DATA 0xbc
0000             57   _ADC0CF1        DATA 0xb9
0000             58   _ADC0CF2        DATA 0xdf
0000             59   _ADC0CN0        DATA 0xe8
0000             60   _ADC0CN1        DATA 0xb2
0000             61   _ADC0CN2        DATA 0xb3
0000             62   _ADC0GTH        DATA 0xc4
0000             63   _ADC0GTL        DATA 0xc3
0000             64   _ADC0H          DATA 0xbe
0000             65   _ADC0L          DATA 0xbd
0000             66   _ADC0LTH        DATA 0xc6
0000             67   _ADC0LTL        DATA 0xc5
0000             68   _ADC0MX         DATA 0xbb
0000             69   _B              DATA 0xf0
0000             70   _CKCON0         DATA 0x8e
0000             71   _CKCON1         DATA 0xa6
0000             72   _CLEN0          DATA 0xc6
0000             73   _CLIE0          DATA 0xc7
0000             74   _CLIF0          DATA 0xe8
0000             75   _CLKSEL         DATA 0xa9
0000             76   _CLOUT0         DATA 0xd1
0000             77   _CLU0CF         DATA 0xb1
0000             78   _CLU0FN         DATA 0xaf
0000             79   _CLU0MX         DATA 0x84
0000             80   _CLU1CF         DATA 0xb3
0000             81   _CLU1FN         DATA 0xb2
0000             82   _CLU1MX         DATA 0x85
0000             83   _CLU2CF         DATA 0xb6
0000             84   _CLU2FN         DATA 0xb5
0000             85   _CLU2MX         DATA 0x91
0000             86   _CLU3CF         DATA 0xbf
0000             87   _CLU3FN         DATA 0xbe
0000             88   _CLU3MX         DATA 0xae
0000             89   _CMP0CN0        DATA 0x9b
0000             90   _CMP0CN1        DATA 0x99
0000             91   _CMP0MD         DATA 0x9d
0000             92   _CMP0MX         DATA 0x9f
0000             93   _CMP1CN0        DATA 0xbf
0000             94   _CMP1CN1        DATA 0xac
0000             95   _CMP1MD         DATA 0xab
0000             96   _CMP1MX         DATA 0xaa
0000             97   _CRC0CN0        DATA 0xce
0000             98   _CRC0CN1        DATA 0x86
0000             99   _CRC0CNT        DATA 0xd3
0000            100   _CRC0DAT        DATA 0xcb
0000            101   _CRC0FLIP       DATA 0xcf
0000            102   _CRC0IN         DATA 0xca
0000            103   _CRC0ST         DATA 0xd2
0000            104   _DAC0CF0        DATA 0x91
0000            105   _DAC0CF1        DATA 0x92
0000            106   _DAC0H          DATA 0x85
0000            107   _DAC0L          DATA 0x84
0000            108   _DAC1CF0        DATA 0x93
0000            109   _DAC1CF1        DATA 0x94
0000            110   _DAC1H          DATA 0x8a
0000            111   _DAC1L          DATA 0x89
0000            112   _DAC2CF0        DATA 0x95
0000            113   _DAC2CF1        DATA 0x96
0000            114   _DAC2H          DATA 0x8c
0000            115   _DAC2L          DATA 0x8b
0000            116   _DAC3CF0        DATA 0x9a
0000            117   _DAC3CF1        DATA 0x9c
0000            118   _DAC3H          DATA 0x8e
0000            119   _DAC3L          DATA 0x8d
0000            120   _DACGCF0        DATA 0x88
0000            121   _DACGCF1        DATA 0x98
0000            122   _DACGCF2        DATA 0xa2
0000            123   _DERIVID        DATA 0xad
0000            124   _DEVICEID       DATA 0xb5
0000            125   _DPH            DATA 0x83
0000            126   _DPL            DATA 0x82
0000            127   _EIE1           DATA 0xe6
0000            128   _EIE2           DATA 0xf3
0000            129   _EIP1           DATA 0xbb
0000            130   _EIP1H          DATA 0xee
0000            131   _EIP2           DATA 0xed
0000            132   _EIP2H          DATA 0xf6
0000            133   _EMI0CN         DATA 0xe7
0000            134   _FLKEY          DATA 0xb7
0000            135   _HFO0CAL        DATA 0xc7
0000            136   _HFO1CAL        DATA 0xd6
0000            137   _HFOCN          DATA 0xef
0000            138   _I2C0ADM        DATA 0xff
0000            139   _I2C0CN0        DATA 0xba
0000            140   _I2C0DIN        DATA 0xbc
0000            141   _I2C0DOUT       DATA 0xbb
0000            142   _I2C0FCN0       DATA 0xad
0000            143   _I2C0FCN1       DATA 0xab
0000            144   _I2C0FCT        DATA 0xf5
0000            145   _I2C0SLAD       DATA 0xbd
0000            146   _I2C0STAT       DATA 0xb9
0000            147   _IE             DATA 0xa8
0000            148   _IP             DATA 0xb8
0000            149   _IPH            DATA 0xf2
0000            150   _IT01CF         DATA 0xe4
0000            151   _LFO0CN         DATA 0xb1
0000            152   _P0             DATA 0x80
0000            153   _P0MASK         DATA 0xfe
0000            154   _P0MAT          DATA 0xfd
0000            155   _P0MDIN         DATA 0xf1
0000            156   _P0MDOUT        DATA 0xa4
0000            157   _P0SKIP         DATA 0xd4
0000            158   _P1             DATA 0x90
0000            159   _P1MASK         DATA 0xee
0000            160   _P1MAT          DATA 0xed
0000            161   _P1MDIN         DATA 0xf2
0000            162   _P1MDOUT        DATA 0xa5
0000            163   _P1SKIP         DATA 0xd5
0000            164   _P2             DATA 0xa0
0000            165   _P2MASK         DATA 0xfc
0000            166   _P2MAT          DATA 0xfb
0000            167   _P2MDIN         DATA 0xf3
0000            168   _P2MDOUT        DATA 0xa6
0000            169   _P2SKIP         DATA 0xcc
0000            170   _P3             DATA 0xb0
0000            171   _P3MDIN         DATA 0xf4
0000            172   _P3MDOUT        DATA 0x9c
0000            173   _PCA0CENT       DATA 0x9e
0000            174   _PCA0CLR        DATA 0x9c
0000            175   _PCA0CN0        DATA 0xd8
0000            176   _PCA0CPH0       DATA 0xfc
0000            177   _PCA0CPH1       DATA 0xea
0000            178   _PCA0CPH2       DATA 0xec
0000            179   _PCA0CPH3       DATA 0xf5
0000            180   _PCA0CPH4       DATA 0x85
0000            181   _PCA0CPH5       DATA 0xde
0000            182   _PCA0CPL0       DATA 0xfb
0000            183   _PCA0CPL1       DATA 0xe9
0000            184   _PCA0CPL2       DATA 0xeb
0000            185   _PCA0CPL3       DATA 0xf4
0000            186   _PCA0CPL4       DATA 0x84
0000            187   _PCA0CPL5       DATA 0xdd
0000            188   _PCA0CPM0       DATA 0xda
0000            189   _PCA0CPM1       DATA 0xdb
0000            190   _PCA0CPM2       DATA 0xdc
0000            191   _PCA0CPM3       DATA 0xae
0000            192   _PCA0CPM4       DATA 0xaf
0000            193   _PCA0CPM5       DATA 0xcc
0000            194   _PCA0H          DATA 0xfa
0000            195   _PCA0L          DATA 0xf9
0000            196   _PCA0MD         DATA 0xd9
0000            197   _PCA0POL        DATA 0x96
0000            198   _PCA0PWM        DATA 0xf7
0000            199   _PCON0          DATA 0x87
0000            200   _PCON1          DATA 0xcd
0000            201   _PFE0CN         DATA 0xc1
0000            202   _PRTDRV         DATA 0xf6
0000            203   _PSCTL          DATA 0x8f
0000            204   _PSTAT0         DATA 0xaa
0000            205   _PSW            DATA 0xd0
0000            206   _REF0CN         DATA 0xd1
0000            207   _REG0CN         DATA 0xc9
0000            208   _REVID          DATA 0xb6
0000            209   _RSTSRC         DATA 0xef
0000            210   _SBCON1         DATA 0x94
0000            211   _SBRLH1         DATA 0x96
0000            212   _SBRLL1         DATA 0x95
0000            213   _SBUF           DATA 0x99
0000            214   _SBUF0          DATA 0x99
0000            215   _SBUF1          DATA 0x92
0000            216   _SCON           DATA 0x98
0000            217   _SCON0          DATA 0x98
0000            218   _SCON1          DATA 0xc8
0000            219   _SFRPAGE        DATA 0xa7
0000            220   _SFRPGCN        DATA 0xbc
0000            221   _SFRSTACK       DATA 0xd7
0000            222   _SMB0ADM        DATA 0xd6
0000            223   _SMB0ADR        DATA 0xd7
0000            224   _SMB0CF         DATA 0xc1
0000            225   _SMB0CN0        DATA 0xc0
0000            226   _SMB0DAT        DATA 0xc2
0000            227   _SMB0FCN0       DATA 0xc3
0000            228   _SMB0FCN1       DATA 0xc4
0000            229   _SMB0FCT        DATA 0xef
0000            230   _SMB0RXLN       DATA 0xc5
0000            231   _SMB0TC         DATA 0xac
0000            232   _SMOD1          DATA 0x93
0000            233   _SP             DATA 0x81
0000            234   _SPI0CFG        DATA 0xa1
0000            235   _SPI0CKR        DATA 0xa2
0000            236   _SPI0CN0        DATA 0xf8
0000            237   _SPI0DAT        DATA 0xa3
0000            238   _SPI0FCN0       DATA 0x9a
0000            239   _SPI0FCN1       DATA 0x9b
0000            240   _SPI0FCT        DATA 0xf7
0000            241   _SPI0PCF        DATA 0xdf
0000            242   _TCON           DATA 0x88
0000            243   _TH0            DATA 0x8c
0000            244   _TH1            DATA 0x8d
0000            245   _TL0            DATA 0x8a
0000            246   _TL1            DATA 0x8b
0000            247   _TMOD           DATA 0x89
0000            248   _TMR2CN0        DATA 0xc8
0000            249   _TMR2CN1        DATA 0xfd
0000            250   _TMR2H          DATA 0xcf
0000            251   _TMR2L          DATA 0xce
0000            252   _TMR2RLH        DATA 0xcb
0000            253   _TMR2RLL        DATA 0xca
0000            254   _TMR3CN0        DATA 0x91
0000            255   _TMR3CN1        DATA 0xfe
0000            256   _TMR3H          DATA 0x95
0000            257   _TMR3L          DATA 0x94
0000            258   _TMR3RLH        DATA 0x93
0000            259   _TMR3RLL        DATA 0x92
0000            260   _TMR4CN0        DATA 0x98
0000            261   _TMR4CN1        DATA 0xff
0000            262   _TMR4H          DATA 0xa5
0000            263   _TMR4L          DATA 0xa4
0000            264   _TMR4RLH        DATA 0xa3
0000            265   _TMR4RLL        DATA 0xa2
0000            266   _TMR5CN0        DATA 0xc0
0000            267   _TMR5CN1        DATA 0xf1
0000            268   _TMR5H          DATA 0xd5
0000            269   _TMR5L          DATA 0xd4
0000            270   _TMR5RLH        DATA 0xd3
0000            271   _TMR5RLL        DATA 0xd2
0000            272   _UART0PCF       DATA 0xd9
0000            273   _UART1FCN0      DATA 0x9d
0000            274   _UART1FCN1      DATA 0xd8
0000            275   _UART1FCT       DATA 0xfa
0000            276   _UART1LIN       DATA 0x9e
0000            277   _UART1PCF       DATA 0xda
0000            278   _VDM0CN         DATA 0xff
0000            279   _WDTCN          DATA 0x97
0000            280   _XBR0           DATA 0xe1
0000            281   _XBR1           DATA 0xe2
0000            282   _XBR2           DATA 0xe3
0000            283   _XOSC0CN        DATA 0x86
0000            284   _DPTR           DATA 0x8382
0000            285   _TMR2RL         DATA 0xcbca
0000            286   _TMR3RL         DATA 0x9392
0000            287   _TMR4RL         DATA 0xa3a2
0000            288   _TMR5RL         DATA 0xd3d2
0000            289   _TMR0           DATA 0x8c8a
0000            290   _TMR1           DATA 0x8d8b
0000            291   _TMR2           DATA 0xcfce
0000            292   _TMR3           DATA 0x9594
0000            293   _TMR4           DATA 0xa5a4
0000            294   _TMR5           DATA 0xd5d4
0000            295   _SBRL1          DATA 0x9695
0000            296   _PCA0           DATA 0xfaf9
0000            297   _PCA0CP0        DATA 0xfcfb
0000            298   _PCA0CP1        DATA 0xeae9
0000            299   _PCA0CP2        DATA 0xeceb
0000            300   _PCA0CP3        DATA 0xf5f4
0000            301   _PCA0CP4        DATA 0x8584
0000            302   _PCA0CP5        DATA 0xdedd
0000            303   _ADC0ASA        DATA 0xb6b5
0000            304   _ADC0GT         DATA 0xc4c3
0000            305   _ADC0           DATA 0xbebd
0000            306   _ADC0LT         DATA 0xc6c5
0000            307   _DAC0           DATA 0x8584
0000            308   _DAC1           DATA 0x8a89
0000            309   _DAC2           DATA 0x8c8b
0000            310   _DAC3           DATA 0x8e8d
0000            311   ;--------------------------------------------------------
0000            312   ; special function bits
0000            313   ;--------------------------------------------------------
0000            314   _ACC_0          BIT 0xe0
0000            315   _ACC_1          BIT 0xe1
0000            316   _ACC_2          BIT 0xe2
0000            317   _ACC_3          BIT 0xe3
0000            318   _ACC_4          BIT 0xe4
0000            319   _ACC_5          BIT 0xe5
0000            320   _ACC_6          BIT 0xe6
0000            321   _ACC_7          BIT 0xe7
0000            322   _TEMPE          BIT 0xe8
0000            323   _ADGN0          BIT 0xe9
0000            324   _ADGN1          BIT 0xea
0000            325   _ADWINT         BIT 0xeb
0000            326   _ADBUSY         BIT 0xec
0000            327   _ADINT          BIT 0xed
0000            328   _IPOEN          BIT 0xee
0000            329   _ADEN           BIT 0xef
0000            330   _B_0            BIT 0xf0
0000            331   _B_1            BIT 0xf1
0000            332   _B_2            BIT 0xf2
0000            333   _B_3            BIT 0xf3
0000            334   _B_4            BIT 0xf4
0000            335   _B_5            BIT 0xf5
0000            336   _B_6            BIT 0xf6
0000            337   _B_7            BIT 0xf7
0000            338   _C0FIF          BIT 0xe8
0000            339   _C0RIF          BIT 0xe9
0000            340   _C1FIF          BIT 0xea
0000            341   _C1RIF          BIT 0xeb
0000            342   _C2FIF          BIT 0xec
0000            343   _C2RIF          BIT 0xed
0000            344   _C3FIF          BIT 0xee
0000            345   _C3RIF          BIT 0xef
0000            346   _D1SRC0         BIT 0x88
0000            347   _D1SRC1         BIT 0x89
0000            348   _D1AMEN         BIT 0x8a
0000            349   _D01REFSL       BIT 0x8b
0000            350   _D3SRC0         BIT 0x8c
0000            351   _D3SRC1         BIT 0x8d
0000            352   _D3AMEN         BIT 0x8e
0000            353   _D23REFSL       BIT 0x8f
0000            354   _D0UDIS         BIT 0x98
0000            355   _D1UDIS         BIT 0x99
0000            356   _D2UDIS         BIT 0x9a
0000            357   _D3UDIS         BIT 0x9b
0000            358   _EX0            BIT 0xa8
0000            359   _ET0            BIT 0xa9
0000            360   _EX1            BIT 0xaa
0000            361   _ET1            BIT 0xab
0000            362   _ES0            BIT 0xac
0000            363   _ET2            BIT 0xad
0000            364   _ESPI0          BIT 0xae
0000            365   _EA             BIT 0xaf
0000            366   _PX0            BIT 0xb8
0000            367   _PT0            BIT 0xb9
0000            368   _PX1            BIT 0xba
0000            369   _PT1            BIT 0xbb
0000            370   _PS0            BIT 0xbc
0000            371   _PT2            BIT 0xbd
0000            372   _PSPI0          BIT 0xbe
0000            373   _P0_0           BIT 0x80
0000            374   _P0_1           BIT 0x81
0000            375   _P0_2           BIT 0x82
0000            376   _P0_3           BIT 0x83
0000            377   _P0_4           BIT 0x84
0000            378   _P0_5           BIT 0x85
0000            379   _P0_6           BIT 0x86
0000            380   _P0_7           BIT 0x87
0000            381   _P1_0           BIT 0x90
0000            382   _P1_1           BIT 0x91
0000            383   _P1_2           BIT 0x92
0000            384   _P1_3           BIT 0x93
0000            385   _P1_4           BIT 0x94
0000            386   _P1_5           BIT 0x95
0000            387   _P1_6           BIT 0x96
0000            388   _P1_7           BIT 0x97
0000            389   _P2_0           BIT 0xa0
0000            390   _P2_1           BIT 0xa1
0000            391   _P2_2           BIT 0xa2
0000            392   _P2_3           BIT 0xa3
0000            393   _P2_4           BIT 0xa4
0000            394   _P2_5           BIT 0xa5
0000            395   _P2_6           BIT 0xa6
0000            396   _P3_0           BIT 0xb0
0000            397   _P3_1           BIT 0xb1
0000            398   _P3_2           BIT 0xb2
0000            399   _P3_3           BIT 0xb3
0000            400   _P3_4           BIT 0xb4
0000            401   _P3_7           BIT 0xb7
0000            402   _CCF0           BIT 0xd8
0000            403   _CCF1           BIT 0xd9
0000            404   _CCF2           BIT 0xda
0000            405   _CCF3           BIT 0xdb
0000            406   _CCF4           BIT 0xdc
0000            407   _CCF5           BIT 0xdd
0000            408   _CR             BIT 0xde
0000            409   _CF             BIT 0xdf
0000            410   _PARITY         BIT 0xd0
0000            411   _F1             BIT 0xd1
0000            412   _OV             BIT 0xd2
0000            413   _RS0            BIT 0xd3
0000            414   _RS1            BIT 0xd4
0000            415   _F0             BIT 0xd5
0000            416   _AC             BIT 0xd6
0000            417   _CY             BIT 0xd7
0000            418   _RI             BIT 0x98
0000            419   _TI             BIT 0x99
0000            420   _RB8            BIT 0x9a
0000            421   _TB8            BIT 0x9b
0000            422   _REN            BIT 0x9c
0000            423   _CE             BIT 0x9d
0000            424   _SMODE          BIT 0x9e
0000            425   _RI1            BIT 0xc8
0000            426   _TI1            BIT 0xc9
0000            427   _RBX1           BIT 0xca
0000            428   _TBX1           BIT 0xcb
0000            429   _REN1           BIT 0xcc
0000            430   _PERR1          BIT 0xcd
0000            431   _OVR1           BIT 0xce
0000            432   _SI             BIT 0xc0
0000            433   _ACK            BIT 0xc1
0000            434   _ARBLOST        BIT 0xc2
0000            435   _ACKRQ          BIT 0xc3
0000            436   _STO            BIT 0xc4
0000            437   _STA            BIT 0xc5
0000            438   _TXMODE         BIT 0xc6
0000            439   _MASTER         BIT 0xc7
0000            440   _SPIEN          BIT 0xf8
0000            441   _TXNF           BIT 0xf9
0000            442   _NSSMD0         BIT 0xfa
0000            443   _NSSMD1         BIT 0xfb
0000            444   _RXOVRN         BIT 0xfc
0000            445   _MODF           BIT 0xfd
0000            446   _WCOL           BIT 0xfe
0000            447   _SPIF           BIT 0xff
0000            448   _IT0            BIT 0x88
0000            449   _IE0            BIT 0x89
0000            450   _IT1            BIT 0x8a
0000            451   _IE1            BIT 0x8b
0000            452   _TR0            BIT 0x8c
0000            453   _TF0            BIT 0x8d
0000            454   _TR1            BIT 0x8e
0000            455   _TF1            BIT 0x8f
0000            456   _T2XCLK0        BIT 0xc8
0000            457   _T2XCLK1        BIT 0xc9
0000            458   _TR2            BIT 0xca
0000            459   _T2SPLIT        BIT 0xcb
0000            460   _TF2CEN         BIT 0xcc
0000            461   _TF2LEN         BIT 0xcd
0000            462   _TF2L           BIT 0xce
0000            463   _TF2H           BIT 0xcf
0000            464   _T4XCLK0        BIT 0x98
0000            465   _T4XCLK1        BIT 0x99
0000            466   _TR4            BIT 0x9a
0000            467   _T4SPLIT        BIT 0x9b
0000            468   _TF4CEN         BIT 0x9c
0000            469   _TF4LEN         BIT 0x9d
0000            470   _TF4L           BIT 0x9e
0000            471   _TF4H           BIT 0x9f
0000            472   _T5XCLK0        BIT 0xc0
0000            473   _T5XCLK1        BIT 0xc1
0000            474   _TR5            BIT 0xc2
0000            475   _T5SPLIT        BIT 0xc3
0000            476   _TF5CEN         BIT 0xc4
0000            477   _TF5LEN         BIT 0xc5
0000            478   _TF5L           BIT 0xc6
0000            479   _TF5H           BIT 0xc7
0000            480   _RIE            BIT 0xd8
0000            481   _RXTO0          BIT 0xd9
0000            482   _RXTO1          BIT 0xda
0000            483   _RFRQ           BIT 0xdb
0000            484   _TIE            BIT 0xdc
0000            485   _TXHOLD         BIT 0xdd
0000            486   _TXNF1          BIT 0xde
0000            487   _TFRQ           BIT 0xdf
0000            488   ;--------------------------------------------------------
0000            489   ; overlayable register banks
0000            490   ;--------------------------------------------------------
0000            491            rbank0 segment data overlay
0000            492   ;--------------------------------------------------------
0000            493   ; internal ram data
0000            494   ;--------------------------------------------------------
0000            495            rseg R_DSEG
0000            496   _main_Y_pos_L_1_111:
0000            497            ds 4
0004            498   _main_X_pos_L_1_111:
0004            499            ds 4
0008            500   _main_Y_pos_R_1_111:
0008            501            ds 4
000C            502   _main_X_pos_R_1_111:
000C            503            ds 4
0010            504   _main_throttle_level2_1_111:
0010            505            ds 2
0012            506   _main_throttle_level1_1_111:
0012            507            ds 2
0014            508   _main_throttle_level0_1_111:
0014            509            ds 2
0016            510   _main_parachute_deploy_1_111:
0016            511            ds 2
0018            512   ;--------------------------------------------------------
0018            513   ; overlayable items in internal ram 
0018            514   ;--------------------------------------------------------
0000            515            rseg    R_OSEG
0000            516            rseg    R_OSEG
0000            517   _InitPinADC_PARM_2:
0000            518            ds 1
0001            519            rseg    R_OSEG
0001            520            rseg    R_OSEG
0001            521            rseg    R_OSEG
0001            522   ;--------------------------------------------------------
0001            523   ; indirectly addressable internal ram data
0001            524   ;--------------------------------------------------------
0000            525            rseg R_ISEG
0000            526   _buff:
0000            527            ds 20
0014            528   ;--------------------------------------------------------
0014            529   ; absolute internal ram data
0014            530   ;--------------------------------------------------------
0000            531            DSEG
0000            532   ;--------------------------------------------------------
0000            533   ; bit data
0000            534   ;--------------------------------------------------------
0000            535            rseg R_BSEG
0000            536   ;--------------------------------------------------------
0000            537   ; paged external ram data
0000            538   ;--------------------------------------------------------
0000            539            rseg R_PSEG
0000            540   ;--------------------------------------------------------
0000            541   ; external ram data
0000            542   ;--------------------------------------------------------
0000            543            rseg R_XSEG
0000            544   ;--------------------------------------------------------
0000            545   ; absolute external ram data
0000            546   ;--------------------------------------------------------
0000            547            XSEG
0000            548   ;--------------------------------------------------------
0000            549   ; external initialized ram data
0000            550   ;--------------------------------------------------------
0000            551            rseg R_IXSEG
0000            552            rseg R_HOME
0000            553            rseg R_GSINIT
0000            554            rseg R_CSEG
0000            555   ;--------------------------------------------------------
0000            556   ; Reset entry point and interrupt vectors
0000            557   ;--------------------------------------------------------
0000            558            CSEG at 0x0000
0000 020000     559            ljmp    _crt0
0003            560   ;--------------------------------------------------------
0003            561   ; global & static initialisations
0003            562   ;--------------------------------------------------------
0000            563            rseg R_HOME
0000            564            rseg R_GSINIT
0000            565            rseg R_GSINIT
0000            566   ;--------------------------------------------------------
0000            567   ; data variables initialization
0000            568   ;--------------------------------------------------------
0000            569            rseg R_DINIT
0000            570            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            571   ;--------------------------------------------------------
0000            572   ; code
0000            573   ;--------------------------------------------------------
0000            574            rseg R_CSEG
0000            575   ;------------------------------------------------------------
0000            576   ;Allocation info for local variables in function '_c51_external_startup'
0000            577   ;------------------------------------------------------------
0000            578   ;------------------------------------------------------------
0000            579   ;        EFM8_JDY40_Transmitter.c:13: char _c51_external_startup (void)
0000            580   ;        -----------------------------------------
0000            581   ;         function _c51_external_startup
0000            582   ;        -----------------------------------------
0000            583   __c51_external_startup:
0000            584            using   0
0000            585   ;        EFM8_JDY40_Transmitter.c:16: SFRPAGE = 0x00;
0000 75A700     586            mov     _SFRPAGE,#0x00
0003            587   ;        EFM8_JDY40_Transmitter.c:17: WDTCN = 0xDE; //First key
0003 7597DE     588            mov     _WDTCN,#0xDE
0006            589   ;        EFM8_JDY40_Transmitter.c:18: WDTCN = 0xAD; //Second key
0006 7597AD     590            mov     _WDTCN,#0xAD
0009            591   ;        EFM8_JDY40_Transmitter.c:20: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     592            mov     _VDM0CN,#0x80
000C            593   ;        EFM8_JDY40_Transmitter.c:21: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     594            mov     _RSTSRC,#0x06
000F            595   ;        EFM8_JDY40_Transmitter.c:28: SFRPAGE = 0x10;
000F 75A710     596            mov     _SFRPAGE,#0x10
0012            597   ;        EFM8_JDY40_Transmitter.c:29: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     598            mov     _PFE0CN,#0x20
0015            599   ;        EFM8_JDY40_Transmitter.c:30: SFRPAGE = 0x00;
0015 75A700     600            mov     _SFRPAGE,#0x00
0018            601   ;        EFM8_JDY40_Transmitter.c:51: CLKSEL = 0x00;
0018 75A900     602            mov     _CLKSEL,#0x00
001B            603   ;        EFM8_JDY40_Transmitter.c:52: CLKSEL = 0x00;
001B 75A900     604            mov     _CLKSEL,#0x00
001E            605   ;        EFM8_JDY40_Transmitter.c:53: while ((CLKSEL & 0x80) == 0);
001E            606   L002001?:
001E E5A9       607            mov     a,_CLKSEL
0020 30E728     608            jnb     acc.7,L002001?
0023            609   ;        EFM8_JDY40_Transmitter.c:54: CLKSEL = 0x03;
0023 75A903     610            mov     _CLKSEL,#0x03
0026            611   ;        EFM8_JDY40_Transmitter.c:55: CLKSEL = 0x03;
0026 75A903     612            mov     _CLKSEL,#0x03
0029            613   ;        EFM8_JDY40_Transmitter.c:56: while ((CLKSEL & 0x80) == 0);
0029            614   L002004?:
0029 E5A9       615            mov     a,_CLKSEL
002B 30E7A8     616            jnb     acc.7,L002004?
002E            617   ;        EFM8_JDY40_Transmitter.c:61: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     618            orl     _P0MDOUT,#0x11
0031            619   ;        EFM8_JDY40_Transmitter.c:62: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     620            orl     _P2MDOUT,#0x01
0034            621   ;        EFM8_JDY40_Transmitter.c:63: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     622            mov     _XBR0,#0x01
0037            623   ;        EFM8_JDY40_Transmitter.c:64: XBR1     = 0X00;
0037 75E200     624            mov     _XBR1,#0x00
003A            625   ;        EFM8_JDY40_Transmitter.c:65: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     626            mov     _XBR2,#0x41
003D            627   ;        EFM8_JDY40_Transmitter.c:71: SCON0 = 0x10;
003D 759810     628            mov     _SCON0,#0x10
0040            629   ;        EFM8_JDY40_Transmitter.c:72: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     630            mov     _TH1,#0xE6
0043            631   ;        EFM8_JDY40_Transmitter.c:73: TL1 = TH1;      // Init Timer1
0043 858D8B     632            mov     _TL1,_TH1
0046            633   ;        EFM8_JDY40_Transmitter.c:74: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     634            anl     _TMOD,#0x0F
0049            635   ;        EFM8_JDY40_Transmitter.c:75: TMOD |=  0x20;                       
0049 438920     636            orl     _TMOD,#0x20
004C            637   ;        EFM8_JDY40_Transmitter.c:76: TR1 = 1; // START Timer1
004C D28E       638            setb    _TR1
004E            639   ;        EFM8_JDY40_Transmitter.c:77: TI = 1;  // Indicate TX0 ready
004E D299       640            setb    _TI
0050            641   ;        EFM8_JDY40_Transmitter.c:79: return 0;
0050 758200     642            mov     dpl,#0x00
0053 22         643            ret
0054            644   ;------------------------------------------------------------
0054            645   ;Allocation info for local variables in function 'InitADC'
0054            646   ;------------------------------------------------------------
0054            647   ;------------------------------------------------------------
0054            648   ;        EFM8_JDY40_Transmitter.c:82: void InitADC (void)
0054            649   ;        -----------------------------------------
0054            650   ;         function InitADC
0054            651   ;        -----------------------------------------
0054            652   _InitADC:
0054            653   ;        EFM8_JDY40_Transmitter.c:84: SFRPAGE = 0x00;
0054 75A700     654            mov     _SFRPAGE,#0x00
0057            655   ;        EFM8_JDY40_Transmitter.c:85: ADEN=0; // Disable ADC
0057 C2EF       656            clr     _ADEN
0059            657   ;        EFM8_JDY40_Transmitter.c:90: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0059 75B280     658            mov     _ADC0CN1,#0x80
005C            659   ;        EFM8_JDY40_Transmitter.c:94: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
005C 75BC20     660            mov     _ADC0CF0,#0x20
005F            661   ;        EFM8_JDY40_Transmitter.c:98: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005F 75B91E     662            mov     _ADC0CF1,#0x1E
0062            663   ;        EFM8_JDY40_Transmitter.c:107: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0062 75E800     664            mov     _ADC0CN0,#0x00
0065            665   ;        EFM8_JDY40_Transmitter.c:112: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0065 75DF3F     666            mov     _ADC0CF2,#0x3F
0068            667   ;        EFM8_JDY40_Transmitter.c:116: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0068 75B300     668            mov     _ADC0CN2,#0x00
006B            669   ;        EFM8_JDY40_Transmitter.c:118: ADEN=1; // Enable ADC
006B D2EF       670            setb    _ADEN
006D 22         671            ret
006E            672   ;------------------------------------------------------------
006E            673   ;Allocation info for local variables in function 'TIMER0_Init'
006E            674   ;------------------------------------------------------------
006E            675   ;------------------------------------------------------------
006E            676   ;        EFM8_JDY40_Transmitter.c:121: void TIMER0_Init(void)
006E            677   ;        -----------------------------------------
006E            678   ;         function TIMER0_Init
006E            679   ;        -----------------------------------------
006E            680   _TIMER0_Init:
006E            681   ;        EFM8_JDY40_Transmitter.c:123: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
006E 5389F0     682            anl     _TMOD,#0xF0
0071            683   ;        EFM8_JDY40_Transmitter.c:124: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0071 438901     684            orl     _TMOD,#0x01
0074            685   ;        EFM8_JDY40_Transmitter.c:125: TR0=0; // Stop Timer/Counter 0
0074 C28C       686            clr     _TR0
0076 22         687            ret
0077            688   ;------------------------------------------------------------
0077            689   ;Allocation info for local variables in function 'Timer3us'
0077            690   ;------------------------------------------------------------
0077            691   ;us                        Allocated to registers r2 
0077            692   ;i                         Allocated to registers r3 
0077            693   ;------------------------------------------------------------
0077            694   ;        EFM8_JDY40_Transmitter.c:129: void Timer3us(unsigned char us)
0077            695   ;        -----------------------------------------
0077            696   ;         function Timer3us
0077            697   ;        -----------------------------------------
0077            698   _Timer3us:
0077 AA82       699            mov     r2,dpl
0079            700   ;        EFM8_JDY40_Transmitter.c:134: CKCON0|=0b_0100_0000;
0079 438E40     701            orl     _CKCON0,#0x40
007C            702   ;        EFM8_JDY40_Transmitter.c:136: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
007C 7592B8     703            mov     _TMR3RL,#0xB8
007F 7593FF     704            mov     (_TMR3RL >> 8),#0xFF
0082            705   ;        EFM8_JDY40_Transmitter.c:137: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0082 859294     706            mov     _TMR3,_TMR3RL
0085 859395     707            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0088            708   ;        EFM8_JDY40_Transmitter.c:139: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0088 759104     709            mov     _TMR3CN0,#0x04
008B            710   ;        EFM8_JDY40_Transmitter.c:140: for (i = 0; i < us; i++)       // Count <us> overflows
008B 7B00       711            mov     r3,#0x00
008D            712   L005004?:
008D C3         713            clr     c
008E EB         714            mov     a,r3
008F 9A         715            subb    a,r2
0090 5000       716            jnc     L005007?
0092            717   ;        EFM8_JDY40_Transmitter.c:142: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0092            718   L005001?:
0092 E591       719            mov     a,_TMR3CN0
0094 30E7A8     720            jnb     acc.7,L005001?
0097            721   ;        EFM8_JDY40_Transmitter.c:143: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0097 53917F     722            anl     _TMR3CN0,#0x7F
009A            723   ;        EFM8_JDY40_Transmitter.c:140: for (i = 0; i < us; i++)       // Count <us> overflows
009A 0B         724            inc     r3
009B 8000       725            sjmp    L005004?
009D            726   L005007?:
009D            727   ;        EFM8_JDY40_Transmitter.c:145: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
009D 759100     728            mov     _TMR3CN0,#0x00
00A0 22         729            ret
00A1            730   ;------------------------------------------------------------
00A1            731   ;Allocation info for local variables in function 'waitms'
00A1            732   ;------------------------------------------------------------
00A1            733   ;ms                        Allocated to registers r2 r3 
00A1            734   ;j                         Allocated to registers r4 r5 
00A1            735   ;k                         Allocated to registers r6 
00A1            736   ;------------------------------------------------------------
00A1            737   ;        EFM8_JDY40_Transmitter.c:148: void waitms (unsigned int ms)
00A1            738   ;        -----------------------------------------
00A1            739   ;         function waitms
00A1            740   ;        -----------------------------------------
00A1            741   _waitms:
00A1 AA82       742            mov     r2,dpl
00A3 AB83       743            mov     r3,dph
00A5            744   ;        EFM8_JDY40_Transmitter.c:152: for(j=0; j<ms; j++)
00A5 7C00       745            mov     r4,#0x00
00A7 7D00       746            mov     r5,#0x00
00A9            747   L006005?:
00A9 C3         748            clr     c
00AA EC         749            mov     a,r4
00AB 9A         750            subb    a,r2
00AC ED         751            mov     a,r5
00AD 9B         752            subb    a,r3
00AE 5000       753            jnc     L006009?
00B0            754   ;        EFM8_JDY40_Transmitter.c:153: for (k=0; k<4; k++) Timer3us(250);
00B0 7E00       755            mov     r6,#0x00
00B2            756   L006001?:
00B2 BE04E8     757            cjne    r6,#0x04,L006018?
00B5            758   L006018?:
00B5 5000       759            jnc     L006007?
00B7 7582FA     760            mov     dpl,#0xFA
00BA C002       761            push    ar2
00BC C003       762            push    ar3
00BE C004       763            push    ar4
00C0 C005       764            push    ar5
00C2 C006       765            push    ar6
00C4 120000     766            lcall   _Timer3us
00C7 D006       767            pop     ar6
00C9 D005       768            pop     ar5
00CB D004       769            pop     ar4
00CD D003       770            pop     ar3
00CF D002       771            pop     ar2
00D1 0E         772            inc     r6
00D2 8000       773            sjmp    L006001?
00D4            774   L006007?:
00D4            775   ;        EFM8_JDY40_Transmitter.c:152: for(j=0; j<ms; j++)
00D4 0C         776            inc     r4
00D5 BC0028     777            cjne    r4,#0x00,L006005?
00D8 0D         778            inc     r5
00D9 8000       779            sjmp    L006005?
00DB            780   L006009?:
00DB 22         781            ret
00DC            782   ;------------------------------------------------------------
00DC            783   ;Allocation info for local variables in function 'InitPinADC'
00DC            784   ;------------------------------------------------------------
00DC            785   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00DC            786   ;portno                    Allocated to registers r2 
00DC            787   ;mask                      Allocated to registers r3 
00DC            788   ;------------------------------------------------------------
00DC            789   ;        EFM8_JDY40_Transmitter.c:158: void InitPinADC (unsigned char portno, unsigned char pinno)
00DC            790   ;        -----------------------------------------
00DC            791   ;         function InitPinADC
00DC            792   ;        -----------------------------------------
00DC            793   _InitPinADC:
00DC AA82       794            mov     r2,dpl
00DE            795   ;        EFM8_JDY40_Transmitter.c:162: mask=1<<pinno;
00DE 85F0F0     796            mov     b,_InitPinADC_PARM_2
00E1 05F0       797            inc     b
00E3 7401       798            mov     a,#0x01
00E5 8000       799            sjmp    L007013?
00E7            800   L007011?:
00E7 25E0       801            add     a,acc
00E9            802   L007013?:
00E9 D5F0E8     803            djnz    b,L007011?
00EC FB         804            mov     r3,a
00ED            805   ;        EFM8_JDY40_Transmitter.c:164: SFRPAGE = 0x20;
00ED 75A720     806            mov     _SFRPAGE,#0x20
00F0            807   ;        EFM8_JDY40_Transmitter.c:165: switch (portno)
00F0 BA0028     808            cjne    r2,#0x00,L007014?
00F3 8000       809            sjmp    L007001?
00F5            810   L007014?:
00F5 BA01A8     811            cjne    r2,#0x01,L007015?
00F8 8000       812            sjmp    L007002?
00FA            813   L007015?:
00FA            814   ;        EFM8_JDY40_Transmitter.c:167: case 0:
00FA BA0228     815            cjne    r2,#0x02,L007005?
00FD 8000       816            sjmp    L007003?
00FF            817   L007001?:
00FF            818   ;        EFM8_JDY40_Transmitter.c:168: P0MDIN &= (~mask); // Set pin as analog input
00FF EB         819            mov     a,r3
0100 F4         820            cpl     a
0101 FA         821            mov     r2,a
0102 52F1       822            anl     _P0MDIN,a
0104            823   ;        EFM8_JDY40_Transmitter.c:169: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0104 EB         824            mov     a,r3
0105 42D4       825            orl     _P0SKIP,a
0107            826   ;        EFM8_JDY40_Transmitter.c:170: break;
0107            827   ;        EFM8_JDY40_Transmitter.c:171: case 1:
0107 8000       828            sjmp    L007005?
0109            829   L007002?:
0109            830   ;        EFM8_JDY40_Transmitter.c:172: P1MDIN &= (~mask); // Set pin as analog input
0109 EB         831            mov     a,r3
010A F4         832            cpl     a
010B FA         833            mov     r2,a
010C 52F2       834            anl     _P1MDIN,a
010E            835   ;        EFM8_JDY40_Transmitter.c:173: P1SKIP |= mask; // Skip Crossbar decoding for this pin
010E EB         836            mov     a,r3
010F 42D5       837            orl     _P1SKIP,a
0111            838   ;        EFM8_JDY40_Transmitter.c:174: break;
0111            839   ;        EFM8_JDY40_Transmitter.c:175: case 2:
0111 8000       840            sjmp    L007005?
0113            841   L007003?:
0113            842   ;        EFM8_JDY40_Transmitter.c:176: P2MDIN &= (~mask); // Set pin as analog input
0113 EB         843            mov     a,r3
0114 F4         844            cpl     a
0115 FA         845            mov     r2,a
0116 52F3       846            anl     _P2MDIN,a
0118            847   ;        EFM8_JDY40_Transmitter.c:177: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0118 EB         848            mov     a,r3
0119 42CC       849            orl     _P2SKIP,a
011B            850   ;        EFM8_JDY40_Transmitter.c:181: }
011B            851   L007005?:
011B            852   ;        EFM8_JDY40_Transmitter.c:182: SFRPAGE = 0x00;
011B 75A700     853            mov     _SFRPAGE,#0x00
011E 22         854            ret
011F            855   ;------------------------------------------------------------
011F            856   ;Allocation info for local variables in function 'Get_ADC'
011F            857   ;------------------------------------------------------------
011F            858   ;------------------------------------------------------------
011F            859   ;        EFM8_JDY40_Transmitter.c:185: unsigned int Get_ADC (void)
011F            860   ;        -----------------------------------------
011F            861   ;         function Get_ADC
011F            862   ;        -----------------------------------------
011F            863   _Get_ADC:
011F            864   ;        EFM8_JDY40_Transmitter.c:187: ADINT = 0;
011F C2ED       865            clr     _ADINT
0121            866   ;        EFM8_JDY40_Transmitter.c:188: ADBUSY = 1;
0121 D2EC       867            setb    _ADBUSY
0123            868   ;        EFM8_JDY40_Transmitter.c:189: while (!ADINT); // Wait for conversion to complete
0123            869   L008001?:
0123 30EDA8     870            jnb     _ADINT,L008001?
0126            871   ;        EFM8_JDY40_Transmitter.c:190: return (ADC0);
0126 85BD82     872            mov     dpl,_ADC0
0129 85BE83     873            mov     dph,(_ADC0 >> 8)
012C 22         874            ret
012D            875   ;------------------------------------------------------------
012D            876   ;Allocation info for local variables in function 'ADC_at_Pin'
012D            877   ;------------------------------------------------------------
012D            878   ;pin                       Allocated to registers 
012D            879   ;------------------------------------------------------------
012D            880   ;        EFM8_JDY40_Transmitter.c:193: unsigned int ADC_at_Pin(unsigned char pin)
012D            881   ;        -----------------------------------------
012D            882   ;         function ADC_at_Pin
012D            883   ;        -----------------------------------------
012D            884   _ADC_at_Pin:
012D 8582BB     885            mov     _ADC0MX,dpl
0130            886   ;        EFM8_JDY40_Transmitter.c:196: ADINT = 0;
0130 C2ED       887            clr     _ADINT
0132            888   ;        EFM8_JDY40_Transmitter.c:197: ADBUSY = 1;     // Convert voltage at the pin
0132 D2EC       889            setb    _ADBUSY
0134            890   ;        EFM8_JDY40_Transmitter.c:198: while (!ADINT); // Wait for conversion to complete
0134            891   L009001?:
0134 30EDE8     892            jnb     _ADINT,L009001?
0137            893   ;        EFM8_JDY40_Transmitter.c:199: return (ADC0);
0137 85BD82     894            mov     dpl,_ADC0
013A 85BE83     895            mov     dph,(_ADC0 >> 8)
013D 22         896            ret
013E            897   ;------------------------------------------------------------
013E            898   ;Allocation info for local variables in function 'Volts_at_Pin'
013E            899   ;------------------------------------------------------------
013E            900   ;pin                       Allocated to registers r2 
013E            901   ;------------------------------------------------------------
013E            902   ;        EFM8_JDY40_Transmitter.c:202: float Volts_at_Pin(unsigned char pin)
013E            903   ;        -----------------------------------------
013E            904   ;         function Volts_at_Pin
013E            905   ;        -----------------------------------------
013E            906   _Volts_at_Pin:
013E            907   ;        EFM8_JDY40_Transmitter.c:204: return ((ADC_at_Pin(pin)*VDD)/16383.0);
013E 120000     908            lcall   _ADC_at_Pin
0141 120000     909            lcall   ___uint2fs
0144 AA82       910            mov     r2,dpl
0146 AB83       911            mov     r3,dph
0148 ACF0       912            mov     r4,b
014A FD         913            mov     r5,a
014B C002       914            push    ar2
014D C003       915            push    ar3
014F C004       916            push    ar4
0151 C005       917            push    ar5
0153 900000     918            mov     dptr,#0x0000
0156 75F0A0     919            mov     b,#0xA0
0159 7440       920            mov     a,#0x40
015B 120000     921            lcall   ___fsmul
015E AA82       922            mov     r2,dpl
0160 AB83       923            mov     r3,dph
0162 ACF0       924            mov     r4,b
0164 FD         925            mov     r5,a
0165 E581       926            mov     a,sp
0167 24FC       927            add     a,#0xfc
0169 F581       928            mov     sp,a
016B E4         929            clr     a
016C C0E0       930            push    acc
016E 74FC       931            mov     a,#0xFC
0170 C0E0       932            push    acc
0172 747F       933            mov     a,#0x7F
0174 C0E0       934            push    acc
0176 7446       935            mov     a,#0x46
0178 C0E0       936            push    acc
017A 8A82       937            mov     dpl,r2
017C 8B83       938            mov     dph,r3
017E 8CF0       939            mov     b,r4
0180 ED         940            mov     a,r5
0181 120000     941            lcall   ___fsdiv
0184 AA82       942            mov     r2,dpl
0186 AB83       943            mov     r3,dph
0188 ACF0       944            mov     r4,b
018A FD         945            mov     r5,a
018B E581       946            mov     a,sp
018D 24FC       947            add     a,#0xfc
018F F581       948            mov     sp,a
0191 8A82       949            mov     dpl,r2
0193 8B83       950            mov     dph,r3
0195 8CF0       951            mov     b,r4
0197 ED         952            mov     a,r5
0198 22         953            ret
0199            954   ;------------------------------------------------------------
0199            955   ;Allocation info for local variables in function 'throttle_control_ADC'
0199            956   ;------------------------------------------------------------
0199            957   ;pin                       Allocated to registers r2 
0199            958   ;throttle_ADC              Allocated to registers r2 r3 
0199            959   ;------------------------------------------------------------
0199            960   ;        EFM8_JDY40_Transmitter.c:208: float throttle_control_ADC(unsigned char pin)
0199            961   ;        -----------------------------------------
0199            962   ;         function throttle_control_ADC
0199            963   ;        -----------------------------------------
0199            964   _throttle_control_ADC:
0199            965   ;        EFM8_JDY40_Transmitter.c:211: throttle_ADC = ADC_at_Pin(pin);
0199 120000     966            lcall   _ADC_at_Pin
019C AA82       967            mov     r2,dpl
019E AB83       968            mov     r3,dph
01A0            969   ;        EFM8_JDY40_Transmitter.c:213: if(throttle_ADC < 16383/5){
01A0 C3         970            clr     c
01A1 EA         971            mov     a,r2
01A2 94CC       972            subb    a,#0xCC
01A4 EB         973            mov     a,r3
01A5 940C       974            subb    a,#0x0C
01A7 5000       975            jnc     L011002?
01A9            976   ;        EFM8_JDY40_Transmitter.c:214: return 1.0;
01A9 900000     977            mov     dptr,#0x0000
01AC 75F080     978            mov     b,#0x80
01AF 743F       979            mov     a,#0x3F
01B1 22         980            ret
01B2            981   L011002?:
01B2            982   ;        EFM8_JDY40_Transmitter.c:216: return ((throttle_ADC*VDD)/16383.0);
01B2 8A82       983            mov     dpl,r2
01B4 8B83       984            mov     dph,r3
01B6 120000     985            lcall   ___uint2fs
01B9 AA82       986            mov     r2,dpl
01BB AB83       987            mov     r3,dph
01BD ACF0       988            mov     r4,b
01BF FD         989            mov     r5,a
01C0 C002       990            push    ar2
01C2 C003       991            push    ar3
01C4 C004       992            push    ar4
01C6 C005       993            push    ar5
01C8 900000     994            mov     dptr,#0x0000
01CB 75F0A0     995            mov     b,#0xA0
01CE 7440       996            mov     a,#0x40
01D0 120000     997            lcall   ___fsmul
01D3 AA82       998            mov     r2,dpl
01D5 AB83       999            mov     r3,dph
01D7 ACF0      1000            mov     r4,b
01D9 FD        1001            mov     r5,a
01DA E581      1002            mov     a,sp
01DC 24FC      1003            add     a,#0xfc
01DE F581      1004            mov     sp,a
01E0 E4        1005            clr     a
01E1 C0E0      1006            push    acc
01E3 74FC      1007            mov     a,#0xFC
01E5 C0E0      1008            push    acc
01E7 747F      1009            mov     a,#0x7F
01E9 C0E0      1010            push    acc
01EB 7446      1011            mov     a,#0x46
01ED C0E0      1012            push    acc
01EF 8A82      1013            mov     dpl,r2
01F1 8B83      1014            mov     dph,r3
01F3 8CF0      1015            mov     b,r4
01F5 ED        1016            mov     a,r5
01F6 120000    1017            lcall   ___fsdiv
01F9 AA82      1018            mov     r2,dpl
01FB AB83      1019            mov     r3,dph
01FD ACF0      1020            mov     r4,b
01FF FD        1021            mov     r5,a
0200 E581      1022            mov     a,sp
0202 24FC      1023            add     a,#0xfc
0204 F581      1024            mov     sp,a
0206 8A82      1025            mov     dpl,r2
0208 8B83      1026            mov     dph,r3
020A 8CF0      1027            mov     b,r4
020C ED        1028            mov     a,r5
020D 22        1029            ret
020E           1030   ;------------------------------------------------------------
020E           1031   ;Allocation info for local variables in function 'UART1_Init'
020E           1032   ;------------------------------------------------------------
020E           1033   ;baudrate                  Allocated to registers r2 r3 r4 r5 
020E           1034   ;------------------------------------------------------------
020E           1035   ;        EFM8_JDY40_Transmitter.c:220: void UART1_Init (unsigned long baudrate)
020E           1036   ;        -----------------------------------------
020E           1037   ;         function UART1_Init
020E           1038   ;        -----------------------------------------
020E           1039   _UART1_Init:
020E AA82      1040            mov     r2,dpl
0210 AB83      1041            mov     r3,dph
0212 ACF0      1042            mov     r4,b
0214 FD        1043            mov     r5,a
0215           1044   ;        EFM8_JDY40_Transmitter.c:222: SFRPAGE = 0x20;
0215 75A720    1045            mov     _SFRPAGE,#0x20
0218           1046   ;        EFM8_JDY40_Transmitter.c:223: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
0218 75930C    1047            mov     _SMOD1,#0x0C
021B           1048   ;        EFM8_JDY40_Transmitter.c:224: SCON1 = 0x10;
021B 75C810    1049            mov     _SCON1,#0x10
021E           1050   ;        EFM8_JDY40_Transmitter.c:225: SBCON1 =0x00;   // disable baud rate generator
021E 759400    1051            mov     _SBCON1,#0x00
0221           1052   ;        EFM8_JDY40_Transmitter.c:226: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
0221 8A00      1053            mov     __divulong_PARM_2,r2
0223 8B01      1054            mov     (__divulong_PARM_2 + 1),r3
0225 8C02      1055            mov     (__divulong_PARM_2 + 2),r4
0227 8D03      1056            mov     (__divulong_PARM_2 + 3),r5
0229 90A200    1057            mov     dptr,#0xA200
022C 75F04A    1058            mov     b,#0x4A
022F 7404      1059            mov     a,#0x04
0231 120000    1060            lcall   __divulong
0234 AA82      1061            mov     r2,dpl
0236 AB83      1062            mov     r3,dph
0238 ACF0      1063            mov     r4,b
023A FD        1064            mov     r5,a
023B 750018    1065            mov     __divulong_PARM_2,#0x18
023E E4        1066            clr     a
023F F501      1067            mov     (__divulong_PARM_2 + 1),a
0241 F502      1068            mov     (__divulong_PARM_2 + 2),a
0243 F503      1069            mov     (__divulong_PARM_2 + 3),a
0245 8A82      1070            mov     dpl,r2
0247 8B83      1071            mov     dph,r3
0249 8CF0      1072            mov     b,r4
024B ED        1073            mov     a,r5
024C 120000    1074            lcall   __divulong
024F AA82      1075            mov     r2,dpl
0251 AB83      1076            mov     r3,dph
0253 ACF0      1077            mov     r4,b
0255 FD        1078            mov     r5,a
0256 E4        1079            clr     a
0257 C3        1080            clr     c
0258 9A        1081            subb    a,r2
0259 FA        1082            mov     r2,a
025A E4        1083            clr     a
025B 9B        1084            subb    a,r3
025C FB        1085            mov     r3,a
025D 7401      1086            mov     a,#0x01
025F 9C        1087            subb    a,r4
0260 E4        1088            clr     a
0261 9D        1089            subb    a,r5
0262 8A95      1090            mov     _SBRL1,r2
0264 8B96      1091            mov     (_SBRL1 >> 8),r3
0266           1092   ;        EFM8_JDY40_Transmitter.c:227: TI1 = 1; // indicate ready for TX
0266 D2C9      1093            setb    _TI1
0268           1094   ;        EFM8_JDY40_Transmitter.c:228: SBCON1 |= 0x40;   // enable baud rate generator
0268 439440    1095            orl     _SBCON1,#0x40
026B           1096   ;        EFM8_JDY40_Transmitter.c:229: SFRPAGE = 0x00;
026B 75A700    1097            mov     _SFRPAGE,#0x00
026E 22        1098            ret
026F           1099   ;------------------------------------------------------------
026F           1100   ;Allocation info for local variables in function 'putchar1'
026F           1101   ;------------------------------------------------------------
026F           1102   ;c                         Allocated to registers r2 
026F           1103   ;------------------------------------------------------------
026F           1104   ;        EFM8_JDY40_Transmitter.c:232: void putchar1 (char c) 
026F           1105   ;        -----------------------------------------
026F           1106   ;         function putchar1
026F           1107   ;        -----------------------------------------
026F           1108   _putchar1:
026F AA82      1109            mov     r2,dpl
0271           1110   ;        EFM8_JDY40_Transmitter.c:234: SFRPAGE = 0x20;
0271 75A720    1111            mov     _SFRPAGE,#0x20
0274           1112   ;        EFM8_JDY40_Transmitter.c:235: while (!TI1);
0274           1113   L013001?:
0274           1114   ;        EFM8_JDY40_Transmitter.c:236: TI1=0;
0274 10C938    1115            jbc     _TI1,L013008?
0277 8000      1116            sjmp    L013001?
0279           1117   L013008?:
0279           1118   ;        EFM8_JDY40_Transmitter.c:237: SBUF1 = c;
0279 8A92      1119            mov     _SBUF1,r2
027B           1120   ;        EFM8_JDY40_Transmitter.c:238: SFRPAGE = 0x00;
027B 75A700    1121            mov     _SFRPAGE,#0x00
027E 22        1122            ret
027F           1123   ;------------------------------------------------------------
027F           1124   ;Allocation info for local variables in function 'sendstr1'
027F           1125   ;------------------------------------------------------------
027F           1126   ;s                         Allocated to registers r2 r3 r4 
027F           1127   ;------------------------------------------------------------
027F           1128   ;        EFM8_JDY40_Transmitter.c:241: void sendstr1 (char * s)
027F           1129   ;        -----------------------------------------
027F           1130   ;         function sendstr1
027F           1131   ;        -----------------------------------------
027F           1132   _sendstr1:
027F AA82      1133            mov     r2,dpl
0281 AB83      1134            mov     r3,dph
0283 ACF0      1135            mov     r4,b
0285           1136   ;        EFM8_JDY40_Transmitter.c:243: while(*s)
0285           1137   L014001?:
0285 8A82      1138            mov     dpl,r2
0287 8B83      1139            mov     dph,r3
0289 8CF0      1140            mov     b,r4
028B 120000    1141            lcall   __gptrget
028E FD        1142            mov     r5,a
028F 6000      1143            jz      L014004?
0291           1144   ;        EFM8_JDY40_Transmitter.c:245: putchar1(*s);
0291 8D82      1145            mov     dpl,r5
0293 C002      1146            push    ar2
0295 C003      1147            push    ar3
0297 C004      1148            push    ar4
0299 120000    1149            lcall   _putchar1
029C D004      1150            pop     ar4
029E D003      1151            pop     ar3
02A0 D002      1152            pop     ar2
02A2           1153   ;        EFM8_JDY40_Transmitter.c:246: s++;      
02A2 0A        1154            inc     r2
02A3 BA0078    1155            cjne    r2,#0x00,L014001?
02A6 0B        1156            inc     r3
02A7 8000      1157            sjmp    L014001?
02A9           1158   L014004?:
02A9 22        1159            ret
02AA           1160   ;------------------------------------------------------------
02AA           1161   ;Allocation info for local variables in function 'getchar1'
02AA           1162   ;------------------------------------------------------------
02AA           1163   ;c                         Allocated to registers 
02AA           1164   ;------------------------------------------------------------
02AA           1165   ;        EFM8_JDY40_Transmitter.c:250: char getchar1 (void)
02AA           1166   ;        -----------------------------------------
02AA           1167   ;         function getchar1
02AA           1168   ;        -----------------------------------------
02AA           1169   _getchar1:
02AA           1170   ;        EFM8_JDY40_Transmitter.c:253: SFRPAGE = 0x20;
02AA 75A720    1171            mov     _SFRPAGE,#0x20
02AD           1172   ;        EFM8_JDY40_Transmitter.c:254: while (!RI1);
02AD           1173   L015001?:
02AD           1174   ;        EFM8_JDY40_Transmitter.c:255: RI1=0;
02AD 10C878    1175            jbc     _RI1,L015008?
02B0 8000      1176            sjmp    L015001?
02B2           1177   L015008?:
02B2           1178   ;        EFM8_JDY40_Transmitter.c:257: SCON1&=0b_0011_1111;
02B2 53C83F    1179            anl     _SCON1,#0x3F
02B5           1180   ;        EFM8_JDY40_Transmitter.c:258: c = SBUF1;
02B5 859282    1181            mov     dpl,_SBUF1
02B8           1182   ;        EFM8_JDY40_Transmitter.c:259: SFRPAGE = 0x00;
02B8 75A700    1183            mov     _SFRPAGE,#0x00
02BB           1184   ;        EFM8_JDY40_Transmitter.c:260: return (c);
02BB 22        1185            ret
02BC           1186   ;------------------------------------------------------------
02BC           1187   ;Allocation info for local variables in function 'getchar1_with_timeout'
02BC           1188   ;------------------------------------------------------------
02BC           1189   ;c                         Allocated to registers 
02BC           1190   ;timeout                   Allocated to registers r2 r3 
02BC           1191   ;------------------------------------------------------------
02BC           1192   ;        EFM8_JDY40_Transmitter.c:263: char getchar1_with_timeout (void)
02BC           1193   ;        -----------------------------------------
02BC           1194   ;         function getchar1_with_timeout
02BC           1195   ;        -----------------------------------------
02BC           1196   _getchar1_with_timeout:
02BC           1197   ;        EFM8_JDY40_Transmitter.c:267: SFRPAGE = 0x20;
02BC 75A720    1198            mov     _SFRPAGE,#0x20
02BF           1199   ;        EFM8_JDY40_Transmitter.c:269: while (!RI1)
02BF 7A00      1200            mov     r2,#0x00
02C1 7B00      1201            mov     r3,#0x00
02C3           1202   L016003?:
02C3 20C8F8    1203            jb      _RI1,L016005?
02C6           1204   ;        EFM8_JDY40_Transmitter.c:271: SFRPAGE = 0x00;
02C6 75A700    1205            mov     _SFRPAGE,#0x00
02C9           1206   ;        EFM8_JDY40_Transmitter.c:272: Timer3us(20);
02C9 758214    1207            mov     dpl,#0x14
02CC C002      1208            push    ar2
02CE C003      1209            push    ar3
02D0 120000    1210            lcall   _Timer3us
02D3 D003      1211            pop     ar3
02D5 D002      1212            pop     ar2
02D7           1213   ;        EFM8_JDY40_Transmitter.c:273: SFRPAGE = 0x20;
02D7 75A720    1214            mov     _SFRPAGE,#0x20
02DA           1215   ;        EFM8_JDY40_Transmitter.c:274: timeout++;
02DA 0A        1216            inc     r2
02DB BA0038    1217            cjne    r2,#0x00,L016012?
02DE 0B        1218            inc     r3
02DF           1219   L016012?:
02DF           1220   ;        EFM8_JDY40_Transmitter.c:275: if(timeout==25000)
02DF BAA8B8    1221            cjne    r2,#0xA8,L016003?
02E2 BB61B8    1222            cjne    r3,#0x61,L016003?
02E5           1223   ;        EFM8_JDY40_Transmitter.c:277: SFRPAGE = 0x00;
02E5 75A700    1224            mov     _SFRPAGE,#0x00
02E8           1225   ;        EFM8_JDY40_Transmitter.c:278: return ('\n'); // Timeout after half second
02E8 75820A    1226            mov     dpl,#0x0A
02EB 22        1227            ret
02EC           1228   L016005?:
02EC           1229   ;        EFM8_JDY40_Transmitter.c:281: RI1=0;
02EC C2C8      1230            clr     _RI1
02EE           1231   ;        EFM8_JDY40_Transmitter.c:283: SCON1&=0b_0011_1111;
02EE 53C83F    1232            anl     _SCON1,#0x3F
02F1           1233   ;        EFM8_JDY40_Transmitter.c:284: c = SBUF1;
02F1 859282    1234            mov     dpl,_SBUF1
02F4           1235   ;        EFM8_JDY40_Transmitter.c:285: SFRPAGE = 0x00;
02F4 75A700    1236            mov     _SFRPAGE,#0x00
02F7           1237   ;        EFM8_JDY40_Transmitter.c:286: return (c);
02F7 22        1238            ret
02F8           1239   ;------------------------------------------------------------
02F8           1240   ;Allocation info for local variables in function 'getstr1'
02F8           1241   ;------------------------------------------------------------
02F8           1242   ;s                         Allocated to registers r2 r3 r4 
02F8           1243   ;c                         Allocated to registers r5 
02F8           1244   ;------------------------------------------------------------
02F8           1245   ;        EFM8_JDY40_Transmitter.c:289: void getstr1 (char * s)
02F8           1246   ;        -----------------------------------------
02F8           1247   ;         function getstr1
02F8           1248   ;        -----------------------------------------
02F8           1249   _getstr1:
02F8 AA82      1250            mov     r2,dpl
02FA AB83      1251            mov     r3,dph
02FC ACF0      1252            mov     r4,b
02FE           1253   ;        EFM8_JDY40_Transmitter.c:293: while(1)
02FE           1254   L017004?:
02FE           1255   ;        EFM8_JDY40_Transmitter.c:295: c=getchar1_with_timeout();
02FE C002      1256            push    ar2
0300 C003      1257            push    ar3
0302 C004      1258            push    ar4
0304 120000    1259            lcall   _getchar1_with_timeout
0307 AD82      1260            mov     r5,dpl
0309 D004      1261            pop     ar4
030B D003      1262            pop     ar3
030D D002      1263            pop     ar2
030F           1264   ;        EFM8_JDY40_Transmitter.c:296: if(c=='\n')
030F BD0AB8    1265            cjne    r5,#0x0A,L017002?
0312           1266   ;        EFM8_JDY40_Transmitter.c:298: *s=0;
0312 8A82      1267            mov     dpl,r2
0314 8B83      1268            mov     dph,r3
0316 8CF0      1269            mov     b,r4
0318 E4        1270            clr     a
0319           1271   ;        EFM8_JDY40_Transmitter.c:299: return;
0319 020000    1272            ljmp    __gptrput
031C           1273   L017002?:
031C           1274   ;        EFM8_JDY40_Transmitter.c:301: *s=c;
031C 8A82      1275            mov     dpl,r2
031E 8B83      1276            mov     dph,r3
0320 8CF0      1277            mov     b,r4
0322 ED        1278            mov     a,r5
0323 120000    1279            lcall   __gptrput
0326 A3        1280            inc     dptr
0327 AA82      1281            mov     r2,dpl
0329 AB83      1282            mov     r3,dph
032B           1283   ;        EFM8_JDY40_Transmitter.c:302: s++;
032B 8000      1284            sjmp    L017004?
032D           1285   ;------------------------------------------------------------
032D           1286   ;Allocation info for local variables in function 'RXU1'
032D           1287   ;------------------------------------------------------------
032D           1288   ;------------------------------------------------------------
032D           1289   ;        EFM8_JDY40_Transmitter.c:307: bit RXU1 (void)
032D           1290   ;        -----------------------------------------
032D           1291   ;         function RXU1
032D           1292   ;        -----------------------------------------
032D           1293   _RXU1:
032D           1294   ;        EFM8_JDY40_Transmitter.c:310: SFRPAGE = 0x20;
032D 75A720    1295            mov     _SFRPAGE,#0x20
0330           1296   ;        EFM8_JDY40_Transmitter.c:311: mybit=RI1;
0330 A2C8      1297            mov     c,_RI1
0332           1298   ;        EFM8_JDY40_Transmitter.c:312: SFRPAGE = 0x00;
0332 75A700    1299            mov     _SFRPAGE,#0x00
0335           1300   ;        EFM8_JDY40_Transmitter.c:313: return mybit;
0335 22        1301            ret
0336           1302   ;------------------------------------------------------------
0336           1303   ;Allocation info for local variables in function 'waitms_or_RI1'
0336           1304   ;------------------------------------------------------------
0336           1305   ;ms                        Allocated to registers r2 r3 
0336           1306   ;j                         Allocated to registers r4 r5 
0336           1307   ;k                         Allocated to registers r6 
0336           1308   ;------------------------------------------------------------
0336           1309   ;        EFM8_JDY40_Transmitter.c:316: void waitms_or_RI1 (unsigned int ms)
0336           1310   ;        -----------------------------------------
0336           1311   ;         function waitms_or_RI1
0336           1312   ;        -----------------------------------------
0336           1313   _waitms_or_RI1:
0336 AA82      1314            mov     r2,dpl
0338 AB83      1315            mov     r3,dph
033A           1316   ;        EFM8_JDY40_Transmitter.c:320: for(j=0; j<ms; j++)
033A 7C00      1317            mov     r4,#0x00
033C 7D00      1318            mov     r5,#0x00
033E           1319   L019007?:
033E C3        1320            clr     c
033F EC        1321            mov     a,r4
0340 9A        1322            subb    a,r2
0341 ED        1323            mov     a,r5
0342 9B        1324            subb    a,r3
0343 5000      1325            jnc     L019011?
0345           1326   ;        EFM8_JDY40_Transmitter.c:322: for (k=0; k<4; k++)
0345 7E00      1327            mov     r6,#0x00
0347           1328   L019003?:
0347 BE0400    1329            cjne    r6,#0x04,L019019?
034A           1330   L019019?:
034A 5000      1331            jnc     L019009?
034C           1332   ;        EFM8_JDY40_Transmitter.c:324: if(RXU1()) return;
034C C002      1333            push    ar2
034E C003      1334            push    ar3
0350 C004      1335            push    ar4
0352 C005      1336            push    ar5
0354 C006      1337            push    ar6
0356 120000    1338            lcall   _RXU1
0359 E4        1339            clr     a
035A 33        1340            rlc     a
035B D006      1341            pop     ar6
035D D005      1342            pop     ar5
035F D004      1343            pop     ar4
0361 D003      1344            pop     ar3
0363 D002      1345            pop     ar2
0365 6000      1346            jz      L019002?
0367 22        1347            ret
0368           1348   L019002?:
0368           1349   ;        EFM8_JDY40_Transmitter.c:325: Timer3us(250);
0368 7582FA    1350            mov     dpl,#0xFA
036B C002      1351            push    ar2
036D C003      1352            push    ar3
036F C004      1353            push    ar4
0371 C005      1354            push    ar5
0373 C006      1355            push    ar6
0375 120000    1356            lcall   _Timer3us
0378 D006      1357            pop     ar6
037A D005      1358            pop     ar5
037C D004      1359            pop     ar4
037E D003      1360            pop     ar3
0380 D002      1361            pop     ar2
0382           1362   ;        EFM8_JDY40_Transmitter.c:322: for (k=0; k<4; k++)
0382 0E        1363            inc     r6
0383 8000      1364            sjmp    L019003?
0385           1365   L019009?:
0385           1366   ;        EFM8_JDY40_Transmitter.c:320: for(j=0; j<ms; j++)
0385 0C        1367            inc     r4
0386 BC0040    1368            cjne    r4,#0x00,L019007?
0389 0D        1369            inc     r5
038A 8000      1370            sjmp    L019007?
038C           1371   L019011?:
038C 22        1372            ret
038D           1373   ;------------------------------------------------------------
038D           1374   ;Allocation info for local variables in function 'SendATCommand'
038D           1375   ;------------------------------------------------------------
038D           1376   ;s                         Allocated to registers r2 r3 r4 
038D           1377   ;------------------------------------------------------------
038D           1378   ;        EFM8_JDY40_Transmitter.c:330: void SendATCommand (char * s)
038D           1379   ;        -----------------------------------------
038D           1380   ;         function SendATCommand
038D           1381   ;        -----------------------------------------
038D           1382   _SendATCommand:
038D AA82      1383            mov     r2,dpl
038F AB83      1384            mov     r3,dph
0391 ACF0      1385            mov     r4,b
0393           1386   ;        EFM8_JDY40_Transmitter.c:332: printf("Command: %s", s);
0393 C002      1387            push    ar2
0395 C003      1388            push    ar3
0397 C004      1389            push    ar4
0399 C002      1390            push    ar2
039B C003      1391            push    ar3
039D C004      1392            push    ar4
039F 74C0      1393            mov     a,#__str_0
03A1 C0E0      1394            push    acc
03A3 74C1      1395            mov     a,#(__str_0 >> 8)
03A5 C0E0      1396            push    acc
03A7 7480      1397            mov     a,#0x80
03A9 C0E0      1398            push    acc
03AB 120000    1399            lcall   _printf
03AE E581      1400            mov     a,sp
03B0 24FA      1401            add     a,#0xfa
03B2 F581      1402            mov     sp,a
03B4           1403   ;        EFM8_JDY40_Transmitter.c:333: P2_0=0; // 'set' pin to 0 is 'AT' mode.
03B4 C2A0      1404            clr     _P2_0
03B6           1405   ;        EFM8_JDY40_Transmitter.c:334: waitms(5);
03B6 900005    1406            mov     dptr,#0x0005
03B9 120000    1407            lcall   _waitms
03BC D004      1408            pop     ar4
03BE D003      1409            pop     ar3
03C0 D002      1410            pop     ar2
03C2           1411   ;        EFM8_JDY40_Transmitter.c:335: sendstr1(s);
03C2 8A82      1412            mov     dpl,r2
03C4 8B83      1413            mov     dph,r3
03C6 8CF0      1414            mov     b,r4
03C8 120000    1415            lcall   _sendstr1
03CB           1416   ;        EFM8_JDY40_Transmitter.c:336: waitms(10);
03CB 90000A    1417            mov     dptr,#0x000A
03CE 120000    1418            lcall   _waitms
03D1           1419   ;        EFM8_JDY40_Transmitter.c:337: P2_0=1; // 'set' pin to 1 is normal operation mode.
03D1 D2A0      1420            setb    _P2_0
03D3 22        1421            ret
03D4           1422   ;------------------------------------------------------------
03D4           1423   ;Allocation info for local variables in function 'main'
03D4           1424   ;------------------------------------------------------------
03D4           1425   ;Y_pos_L                   Allocated with name '_main_Y_pos_L_1_111'
03D4           1426   ;X_pos_L                   Allocated with name '_main_X_pos_L_1_111'
03D4           1427   ;Y_pos_R                   Allocated with name '_main_Y_pos_R_1_111'
03D4           1428   ;X_pos_R                   Allocated with name '_main_X_pos_R_1_111'
03D4           1429   ;count                     Allocated to registers 
03D4           1430   ;throttle_level2           Allocated with name '_main_throttle_level2_1_111'
03D4           1431   ;throttle_level1           Allocated with name '_main_throttle_level1_1_111'
03D4           1432   ;throttle_level0           Allocated with name '_main_throttle_level0_1_111'
03D4           1433   ;parachute_deploy          Allocated with name '_main_parachute_deploy_1_111'
03D4           1434   ;potentiometer             Allocated to registers 
03D4           1435   ;PWM_DutyCyclePeriod       Allocated to registers 
03D4           1436   ;------------------------------------------------------------
03D4           1437   ;        EFM8_JDY40_Transmitter.c:340: void main (void)
03D4           1438   ;        -----------------------------------------
03D4           1439   ;         function main
03D4           1440   ;        -----------------------------------------
03D4           1441   _main:
03D4           1442   ;        EFM8_JDY40_Transmitter.c:352: int parachute_deploy = 0;
03D4 E4        1443            clr     a
03D5 F5A8      1444            mov     _main_parachute_deploy_1_111,a
03D7 F5A9      1445            mov     (_main_parachute_deploy_1_111 + 1),a
03D9           1446   ;        EFM8_JDY40_Transmitter.c:360: waitms(500);
03D9 9001F4    1447            mov     dptr,#0x01F4
03DC 120000    1448            lcall   _waitms
03DF           1449   ;        EFM8_JDY40_Transmitter.c:361: printf("\r\nJDY-40 test\r\n");
03DF 7440      1450            mov     a,#__str_1
03E1 C0E0      1451            push    acc
03E3 74C2      1452            mov     a,#(__str_1 >> 8)
03E5 C0E0      1453            push    acc
03E7 7480      1454            mov     a,#0x80
03E9 C0E0      1455            push    acc
03EB 120000    1456            lcall   _printf
03EE 1581      1457            dec     sp
03F0 1581      1458            dec     sp
03F2 1581      1459            dec     sp
03F4           1460   ;        EFM8_JDY40_Transmitter.c:362: UART1_Init(9600);
03F4 902580    1461            mov     dptr,#0x2580
03F7 E4        1462            clr     a
03F8 F5F0      1463            mov     b,a
03FA 120000    1464            lcall   _UART1_Init
03FD           1465   ;        EFM8_JDY40_Transmitter.c:364: InitPinADC(2, 2); // Configure P0.1 as analog input
03FD 75F002    1466            mov     _InitPinADC_PARM_2,#0x02
0400 758202    1467            mov     dpl,#0x02
0403 120000    1468            lcall   _InitPinADC
0406           1469   ;        EFM8_JDY40_Transmitter.c:365: InitPinADC(1, 2); // Configure P2.3 as analog input
0406 75F002    1470            mov     _InitPinADC_PARM_2,#0x02
0409 758201    1471            mov     dpl,#0x01
040C 120000    1472            lcall   _InitPinADC
040F           1473   ;        EFM8_JDY40_Transmitter.c:366: InitPinADC(2, 3);
040F 75F003    1474            mov     _InitPinADC_PARM_2,#0x03
0412 758202    1475            mov     dpl,#0x02
0415 120000    1476            lcall   _InitPinADC
0418           1477   ;        EFM8_JDY40_Transmitter.c:367: InitPinADC(2, 1);
0418 75F001    1478            mov     _InitPinADC_PARM_2,#0x01
041B 758202    1479            mov     dpl,#0x02
041E 120000    1480            lcall   _InitPinADC
0421           1481   ;        EFM8_JDY40_Transmitter.c:368: InitADC();
0421 120000    1482            lcall   _InitADC
0424           1483   ;        EFM8_JDY40_Transmitter.c:384: SendATCommand("AT+DVID2385\r\n");  
0424 90C280    1484            mov     dptr,#__str_2
0427 75F080    1485            mov     b,#0x80
042A 120000    1486            lcall   _SendATCommand
042D           1487   ;        EFM8_JDY40_Transmitter.c:387: SendATCommand("AT+VER\r\n");
042D 90C2C0    1488            mov     dptr,#__str_3
0430 75F080    1489            mov     b,#0x80
0433 120000    1490            lcall   _SendATCommand
0436           1491   ;        EFM8_JDY40_Transmitter.c:388: SendATCommand("AT+BAUD\r\n");
0436 90C300    1492            mov     dptr,#__str_4
0439 75F080    1493            mov     b,#0x80
043C 120000    1494            lcall   _SendATCommand
043F           1495   ;        EFM8_JDY40_Transmitter.c:389: SendATCommand("AT+RFID\r\n");
043F 90C340    1496            mov     dptr,#__str_5
0442 75F080    1497            mov     b,#0x80
0445 120000    1498            lcall   _SendATCommand
0448           1499   ;        EFM8_JDY40_Transmitter.c:390: SendATCommand("AT+DVID\r\n");
0448 90C380    1500            mov     dptr,#__str_6
044B 75F080    1501            mov     b,#0x80
044E 120000    1502            lcall   _SendATCommand
0451           1503   ;        EFM8_JDY40_Transmitter.c:391: SendATCommand("AT+RFC\r\n");
0451 90C3C0    1504            mov     dptr,#__str_7
0454 75F080    1505            mov     b,#0x80
0457 120000    1506            lcall   _SendATCommand
045A           1507   ;        EFM8_JDY40_Transmitter.c:392: SendATCommand("AT+POWE\r\n");
045A 90C400    1508            mov     dptr,#__str_8
045D 75F080    1509            mov     b,#0x80
0460 120000    1510            lcall   _SendATCommand
0463           1511   ;        EFM8_JDY40_Transmitter.c:393: SendATCommand("AT+CLSS\r\n");
0463 90C440    1512            mov     dptr,#__str_9
0466 75F080    1513            mov     b,#0x80
0469 120000    1514            lcall   _SendATCommand
046C           1515   ;        EFM8_JDY40_Transmitter.c:396: while(1)
046C           1516   L021022?:
046C           1517   ;        EFM8_JDY40_Transmitter.c:400: Y_pos_L = Volts_at_Pin(QFP32_MUX_P2_4);
046C 758211    1518            mov     dpl,#0x11
046F 120000    1519            lcall   _Volts_at_Pin
0472 858278    1520            mov     _main_Y_pos_L_1_111,dpl
0475 858379    1521            mov     (_main_Y_pos_L_1_111 + 1),dph
0478 85F07A    1522            mov     (_main_Y_pos_L_1_111 + 2),b
047B F57B      1523            mov     (_main_Y_pos_L_1_111 + 3),a
047D           1524   ;        EFM8_JDY40_Transmitter.c:401: X_pos_L = Volts_at_Pin(QFP32_MUX_P2_2);
047D 75820F    1525            mov     dpl,#0x0F
0480 120000    1526            lcall   _Volts_at_Pin
0483 8582C8    1527            mov     _main_X_pos_L_1_111,dpl
0486 8583C9    1528            mov     (_main_X_pos_L_1_111 + 1),dph
0489 85F0CA    1529            mov     (_main_X_pos_L_1_111 + 2),b
048C F5CB      1530            mov     (_main_X_pos_L_1_111 + 3),a
048E           1531   ;        EFM8_JDY40_Transmitter.c:402: Y_pos_R = Volts_at_Pin(QFP32_MUX_P1_2);
048E 758208    1532            mov     dpl,#0x08
0491 120000    1533            lcall   _Volts_at_Pin
0494 858218    1534            mov     _main_Y_pos_R_1_111,dpl
0497 858319    1535            mov     (_main_Y_pos_R_1_111 + 1),dph
049A 85F01A    1536            mov     (_main_Y_pos_R_1_111 + 2),b
049D F51B      1537            mov     (_main_Y_pos_R_1_111 + 3),a
049F           1538   ;        EFM8_JDY40_Transmitter.c:403: X_pos_R = Volts_at_Pin(QFP32_MUX_P2_1);
049F 75820E    1539            mov     dpl,#0x0E
04A2 120000    1540            lcall   _Volts_at_Pin
04A5 858268    1541            mov     _main_X_pos_R_1_111,dpl
04A8 858369    1542            mov     (_main_X_pos_R_1_111 + 1),dph
04AB 85F06A    1543            mov     (_main_X_pos_R_1_111 + 2),b
04AE F56B      1544            mov     (_main_X_pos_R_1_111 + 3),a
04B0           1545   ;        EFM8_JDY40_Transmitter.c:407: X_pos_L *= 1000;
04B0 C0C8      1546            push    _main_X_pos_L_1_111
04B2 C0C9      1547            push    (_main_X_pos_L_1_111 + 1)
04B4 C0CA      1548            push    (_main_X_pos_L_1_111 + 2)
04B6 C0CB      1549            push    (_main_X_pos_L_1_111 + 3)
04B8 900000    1550            mov     dptr,#0x0000
04BB 75F07A    1551            mov     b,#0x7A
04BE 7444      1552            mov     a,#0x44
04C0 120000    1553            lcall   ___fsmul
04C3 8582C8    1554            mov     _main_X_pos_L_1_111,dpl
04C6 8583C9    1555            mov     (_main_X_pos_L_1_111 + 1),dph
04C9 85F0CA    1556            mov     (_main_X_pos_L_1_111 + 2),b
04CC F5CB      1557            mov     (_main_X_pos_L_1_111 + 3),a
04CE E581      1558            mov     a,sp
04D0 24FC      1559            add     a,#0xfc
04D2 F581      1560            mov     sp,a
04D4           1561   ;        EFM8_JDY40_Transmitter.c:408: Y_pos_R *= 1000;
04D4 C018      1562            push    _main_Y_pos_R_1_111
04D6 C019      1563            push    (_main_Y_pos_R_1_111 + 1)
04D8 C01A      1564            push    (_main_Y_pos_R_1_111 + 2)
04DA C01B      1565            push    (_main_Y_pos_R_1_111 + 3)
04DC 900000    1566            mov     dptr,#0x0000
04DF 75F07A    1567            mov     b,#0x7A
04E2 7444      1568            mov     a,#0x44
04E4 120000    1569            lcall   ___fsmul
04E7 858218    1570            mov     _main_Y_pos_R_1_111,dpl
04EA 858319    1571            mov     (_main_Y_pos_R_1_111 + 1),dph
04ED 85F01A    1572            mov     (_main_Y_pos_R_1_111 + 2),b
04F0 F51B      1573            mov     (_main_Y_pos_R_1_111 + 3),a
04F2 E581      1574            mov     a,sp
04F4 24FC      1575            add     a,#0xfc
04F6 F581      1576            mov     sp,a
04F8           1577   ;        EFM8_JDY40_Transmitter.c:409: X_pos_R *= 1000;
04F8 C068      1578            push    _main_X_pos_R_1_111
04FA C069      1579            push    (_main_X_pos_R_1_111 + 1)
04FC C06A      1580            push    (_main_X_pos_R_1_111 + 2)
04FE C06B      1581            push    (_main_X_pos_R_1_111 + 3)
0500 900000    1582            mov     dptr,#0x0000
0503 75F07A    1583            mov     b,#0x7A
0506 7444      1584            mov     a,#0x44
0508 120000    1585            lcall   ___fsmul
050B 858268    1586            mov     _main_X_pos_R_1_111,dpl
050E 858369    1587            mov     (_main_X_pos_R_1_111 + 1),dph
0511 85F06A    1588            mov     (_main_X_pos_R_1_111 + 2),b
0514 F56B      1589            mov     (_main_X_pos_R_1_111 + 3),a
0516 E581      1590            mov     a,sp
0518 24FC      1591            add     a,#0xfc
051A F581      1592            mov     sp,a
051C           1593   ;        EFM8_JDY40_Transmitter.c:419: if(P0_4 == 0){
051C 2084C0    1594            jb      _P0_4,L021002?
051F           1595   ;        EFM8_JDY40_Transmitter.c:422: parachute_deploy = 1;
051F 75A801    1596            mov     _main_parachute_deploy_1_111,#0x01
0522 E4        1597            clr     a
0523 F5A9      1598            mov     (_main_parachute_deploy_1_111 + 1),a
0525           1599   L021002?:
0525           1600   ;        EFM8_JDY40_Transmitter.c:436: if(Y_pos_L < 5.0/7.0){ // if the throttle joystick is at lowest position
0525 746E      1601            mov     a,#0x6E
0527 C0E0      1602            push    acc
0529 74DB      1603            mov     a,#0xDB
052B C0E0      1604            push    acc
052D 7436      1605            mov     a,#0x36
052F C0E0      1606            push    acc
0531 743F      1607            mov     a,#0x3F
0533 C0E0      1608            push    acc
0535 857882    1609            mov     dpl,_main_Y_pos_L_1_111
0538 857983    1610            mov     dph,(_main_Y_pos_L_1_111 + 1)
053B 857AF0    1611            mov     b,(_main_Y_pos_L_1_111 + 2)
053E E57B      1612            mov     a,(_main_Y_pos_L_1_111 + 3)
0540 120000    1613            lcall   ___fslt
0543 AE82      1614            mov     r6,dpl
0545 E581      1615            mov     a,sp
0547 24FC      1616            add     a,#0xfc
0549 F581      1617            mov     sp,a
054B EE        1618            mov     a,r6
054C 6000      1619            jz      L021019?
054E           1620   ;        EFM8_JDY40_Transmitter.c:437: throttle_level2 = 1;
054E 75B801    1621            mov     _main_throttle_level2_1_111,#0x01
0551 E4        1622            clr     a
0552 F5B9      1623            mov     (_main_throttle_level2_1_111 + 1),a
0554           1624   ;        EFM8_JDY40_Transmitter.c:438: throttle_level1 = 1;
0554 750801    1625            mov     _main_throttle_level1_1_111,#0x01
0557 E4        1626            clr     a
0558 F509      1627            mov     (_main_throttle_level1_1_111 + 1),a
055A           1628   ;        EFM8_JDY40_Transmitter.c:439: throttle_level0 = 0;
055A E4        1629            clr     a
055B F558      1630            mov     _main_throttle_level0_1_111,a
055D F559      1631            mov     (_main_throttle_level0_1_111 + 1),a
055F 020000    1632            ljmp    L021020?
0562           1633   L021019?:
0562           1634   ;        EFM8_JDY40_Transmitter.c:440: }else if(Y_pos_L < 5.0/7.0*2.0){
0562 746E      1635            mov     a,#0x6E
0564 C0E0      1636            push    acc
0566 74DB      1637            mov     a,#0xDB
0568 C0E0      1638            push    acc
056A 74B6      1639            mov     a,#0xB6
056C C0E0      1640            push    acc
056E 743F      1641            mov     a,#0x3F
0570 C0E0      1642            push    acc
0572 857882    1643            mov     dpl,_main_Y_pos_L_1_111
0575 857983    1644            mov     dph,(_main_Y_pos_L_1_111 + 1)
0578 857AF0    1645            mov     b,(_main_Y_pos_L_1_111 + 2)
057B E57B      1646            mov     a,(_main_Y_pos_L_1_111 + 3)
057D 120000    1647            lcall   ___fslt
0580 AA82      1648            mov     r2,dpl
0582 E581      1649            mov     a,sp
0584 24FC      1650            add     a,#0xfc
0586 F581      1651            mov     sp,a
0588 EA        1652            mov     a,r2
0589 6000      1653            jz      L021016?
058B           1654   ;        EFM8_JDY40_Transmitter.c:441: throttle_level2 = 1;
058B 75B801    1655            mov     _main_throttle_level2_1_111,#0x01
058E E4        1656            clr     a
058F F5B9      1657            mov     (_main_throttle_level2_1_111 + 1),a
0591           1658   ;        EFM8_JDY40_Transmitter.c:442: throttle_level1 = 0;
0591 E4        1659            clr     a
0592 F508      1660            mov     _main_throttle_level1_1_111,a
0594 F509      1661            mov     (_main_throttle_level1_1_111 + 1),a
0596           1662   ;        EFM8_JDY40_Transmitter.c:443: throttle_level0 = 1;
0596 755801    1663            mov     _main_throttle_level0_1_111,#0x01
0599 E4        1664            clr     a
059A F559      1665            mov     (_main_throttle_level0_1_111 + 1),a
059C 020000    1666            ljmp    L021020?
059F           1667   L021016?:
059F           1668   ;        EFM8_JDY40_Transmitter.c:444: }else if(Y_pos_L < 5.0/7.0*3.0){
059F 7492      1669            mov     a,#0x92
05A1 C0E0      1670            push    acc
05A3 7424      1671            mov     a,#0x24
05A5 C0E0      1672            push    acc
05A7 7409      1673            mov     a,#0x09
05A9 C0E0      1674            push    acc
05AB 7440      1675            mov     a,#0x40
05AD C0E0      1676            push    acc
05AF 857882    1677            mov     dpl,_main_Y_pos_L_1_111
05B2 857983    1678            mov     dph,(_main_Y_pos_L_1_111 + 1)
05B5 857AF0    1679            mov     b,(_main_Y_pos_L_1_111 + 2)
05B8 E57B      1680            mov     a,(_main_Y_pos_L_1_111 + 3)
05BA 120000    1681            lcall   ___fslt
05BD AA82      1682            mov     r2,dpl
05BF E581      1683            mov     a,sp
05C1 24FC      1684            add     a,#0xfc
05C3 F581      1685            mov     sp,a
05C5 EA        1686            mov     a,r2
05C6 6000      1687            jz      L021013?
05C8           1688   ;        EFM8_JDY40_Transmitter.c:445: throttle_level2 = 1;
05C8 75B801    1689            mov     _main_throttle_level2_1_111,#0x01
05CB E4        1690            clr     a
05CC F5B9      1691            mov     (_main_throttle_level2_1_111 + 1),a
05CE           1692   ;        EFM8_JDY40_Transmitter.c:446: throttle_level1 = 0;
05CE           1693   ;        EFM8_JDY40_Transmitter.c:447: throttle_level0 = 0;
05CE E4        1694            clr     a
05CF F508      1695            mov     _main_throttle_level1_1_111,a
05D1 F509      1696            mov     (_main_throttle_level1_1_111 + 1),a
05D3 F558      1697            mov     _main_throttle_level0_1_111,a
05D5 F559      1698            mov     (_main_throttle_level0_1_111 + 1),a
05D7 020000    1699            ljmp    L021020?
05DA           1700   L021013?:
05DA           1701   ;        EFM8_JDY40_Transmitter.c:448: }else if(Y_pos_L < 5.0/7.0*4.0){
05DA 746E      1702            mov     a,#0x6E
05DC C0E0      1703            push    acc
05DE 74DB      1704            mov     a,#0xDB
05E0 C0E0      1705            push    acc
05E2 7436      1706            mov     a,#0x36
05E4 C0E0      1707            push    acc
05E6 7440      1708            mov     a,#0x40
05E8 C0E0      1709            push    acc
05EA 857882    1710            mov     dpl,_main_Y_pos_L_1_111
05ED 857983    1711            mov     dph,(_main_Y_pos_L_1_111 + 1)
05F0 857AF0    1712            mov     b,(_main_Y_pos_L_1_111 + 2)
05F3 E57B      1713            mov     a,(_main_Y_pos_L_1_111 + 3)
05F5 120000    1714            lcall   ___fslt
05F8 AA82      1715            mov     r2,dpl
05FA E581      1716            mov     a,sp
05FC 24FC      1717            add     a,#0xfc
05FE F581      1718            mov     sp,a
0600 EA        1719            mov     a,r2
0601 6000      1720            jz      L021010?
0603           1721   ;        EFM8_JDY40_Transmitter.c:449: throttle_level2 = 0;
0603 E4        1722            clr     a
0604 F5B8      1723            mov     _main_throttle_level2_1_111,a
0606 F5B9      1724            mov     (_main_throttle_level2_1_111 + 1),a
0608           1725   ;        EFM8_JDY40_Transmitter.c:450: throttle_level1 = 1;
0608 750801    1726            mov     _main_throttle_level1_1_111,#0x01
060B E4        1727            clr     a
060C F509      1728            mov     (_main_throttle_level1_1_111 + 1),a
060E           1729   ;        EFM8_JDY40_Transmitter.c:451: throttle_level0 = 1;
060E 755801    1730            mov     _main_throttle_level0_1_111,#0x01
0611 E4        1731            clr     a
0612 F559      1732            mov     (_main_throttle_level0_1_111 + 1),a
0614 020000    1733            ljmp    L021020?
0617           1734   L021010?:
0617           1735   ;        EFM8_JDY40_Transmitter.c:452: }else if(Y_pos_L < 5.0/7.0*5.0){
0617 7449      1736            mov     a,#0x49
0619 C0E0      1737            push    acc
061B 7492      1738            mov     a,#0x92
061D C0E0      1739            push    acc
061F 7464      1740            mov     a,#0x64
0621 C0E0      1741            push    acc
0623 7440      1742            mov     a,#0x40
0625 C0E0      1743            push    acc
0627 857882    1744            mov     dpl,_main_Y_pos_L_1_111
062A 857983    1745            mov     dph,(_main_Y_pos_L_1_111 + 1)
062D 857AF0    1746            mov     b,(_main_Y_pos_L_1_111 + 2)
0630 E57B      1747            mov     a,(_main_Y_pos_L_1_111 + 3)
0632 120000    1748            lcall   ___fslt
0635 AA82      1749            mov     r2,dpl
0637 E581      1750            mov     a,sp
0639 24FC      1751            add     a,#0xfc
063B F581      1752            mov     sp,a
063D EA        1753            mov     a,r2
063E 6000      1754            jz      L021007?
0640           1755   ;        EFM8_JDY40_Transmitter.c:453: throttle_level2 = 0;
0640 E4        1756            clr     a
0641 F5B8      1757            mov     _main_throttle_level2_1_111,a
0643 F5B9      1758            mov     (_main_throttle_level2_1_111 + 1),a
0645           1759   ;        EFM8_JDY40_Transmitter.c:454: throttle_level1 = 1;
0645 750801    1760            mov     _main_throttle_level1_1_111,#0x01
0648 E4        1761            clr     a
0649 F509      1762            mov     (_main_throttle_level1_1_111 + 1),a
064B           1763   ;        EFM8_JDY40_Transmitter.c:455: throttle_level0 = 0;
064B E4        1764            clr     a
064C F558      1765            mov     _main_throttle_level0_1_111,a
064E F559      1766            mov     (_main_throttle_level0_1_111 + 1),a
0650 8000      1767            sjmp    L021020?
0652           1768   L021007?:
0652           1769   ;        EFM8_JDY40_Transmitter.c:456: }else if(Y_pos_L < 5.0/7.0*6.0){
0652 7492      1770            mov     a,#0x92
0654 C0E0      1771            push    acc
0656 7424      1772            mov     a,#0x24
0658 C0E0      1773            push    acc
065A 7489      1774            mov     a,#0x89
065C C0E0      1775            push    acc
065E 7440      1776            mov     a,#0x40
0660 C0E0      1777            push    acc
0662 857882    1778            mov     dpl,_main_Y_pos_L_1_111
0665 857983    1779            mov     dph,(_main_Y_pos_L_1_111 + 1)
0668 857AF0    1780            mov     b,(_main_Y_pos_L_1_111 + 2)
066B E57B      1781            mov     a,(_main_Y_pos_L_1_111 + 3)
066D 120000    1782            lcall   ___fslt
0670 AA82      1783            mov     r2,dpl
0672 E581      1784            mov     a,sp
0674 24FC      1785            add     a,#0xfc
0676 F581      1786            mov     sp,a
0678 EA        1787            mov     a,r2
0679 6000      1788            jz      L021004?
067B           1789   ;        EFM8_JDY40_Transmitter.c:457: throttle_level2 = 0;
067B           1790   ;        EFM8_JDY40_Transmitter.c:458: throttle_level1 = 0;
067B E4        1791            clr     a
067C F5B8      1792            mov     _main_throttle_level2_1_111,a
067E F5B9      1793            mov     (_main_throttle_level2_1_111 + 1),a
0680 F508      1794            mov     _main_throttle_level1_1_111,a
0682 F509      1795            mov     (_main_throttle_level1_1_111 + 1),a
0684           1796   ;        EFM8_JDY40_Transmitter.c:459: throttle_level0 = 1;
0684 755801    1797            mov     _main_throttle_level0_1_111,#0x01
0687 E4        1798            clr     a
0688 F559      1799            mov     (_main_throttle_level0_1_111 + 1),a
068A 8000      1800            sjmp    L021020?
068C           1801   L021004?:
068C           1802   ;        EFM8_JDY40_Transmitter.c:461: throttle_level2 = 0;
068C           1803   ;        EFM8_JDY40_Transmitter.c:462: throttle_level1 = 0;
068C           1804   ;        EFM8_JDY40_Transmitter.c:463: throttle_level0 = 0;
068C E4        1805            clr     a
068D F5B8      1806            mov     _main_throttle_level2_1_111,a
068F F5B9      1807            mov     (_main_throttle_level2_1_111 + 1),a
0691 F508      1808            mov     _main_throttle_level1_1_111,a
0693 F509      1809            mov     (_main_throttle_level1_1_111 + 1),a
0695 F558      1810            mov     _main_throttle_level0_1_111,a
0697 F559      1811            mov     (_main_throttle_level0_1_111 + 1),a
0699           1812   L021020?:
0699           1813   ;        EFM8_JDY40_Transmitter.c:467: 4, (int)X_pos_L, 4, (int)X_pos_R, 4, (int)Y_pos_R, 
0699 851882    1814            mov     dpl,_main_Y_pos_R_1_111
069C 851983    1815            mov     dph,(_main_Y_pos_R_1_111 + 1)
069F 851AF0    1816            mov     b,(_main_Y_pos_R_1_111 + 2)
06A2 E51B      1817            mov     a,(_main_Y_pos_R_1_111 + 3)
06A4 120000    1818            lcall   ___fs2sint
06A7 AA82      1819            mov     r2,dpl
06A9 AB83      1820            mov     r3,dph
06AB 856882    1821            mov     dpl,_main_X_pos_R_1_111
06AE 856983    1822            mov     dph,(_main_X_pos_R_1_111 + 1)
06B1 856AF0    1823            mov     b,(_main_X_pos_R_1_111 + 2)
06B4 E56B      1824            mov     a,(_main_X_pos_R_1_111 + 3)
06B6 C002      1825            push    ar2
06B8 C003      1826            push    ar3
06BA 120000    1827            lcall   ___fs2sint
06BD AC82      1828            mov     r4,dpl
06BF AD83      1829            mov     r5,dph
06C1 85C882    1830            mov     dpl,_main_X_pos_L_1_111
06C4 85C983    1831            mov     dph,(_main_X_pos_L_1_111 + 1)
06C7 85CAF0    1832            mov     b,(_main_X_pos_L_1_111 + 2)
06CA E5CB      1833            mov     a,(_main_X_pos_L_1_111 + 3)
06CC C004      1834            push    ar4
06CE C005      1835            push    ar5
06D0 120000    1836            lcall   ___fs2sint
06D3 AE82      1837            mov     r6,dpl
06D5 AF83      1838            mov     r7,dph
06D7 D005      1839            pop     ar5
06D9 D004      1840            pop     ar4
06DB D003      1841            pop     ar3
06DD D002      1842            pop     ar2
06DF           1843   ;        EFM8_JDY40_Transmitter.c:466: sprintf(buff, "%0*d %0*d %0*d %d %d %d %d\n",
06DF C058      1844            push    _main_throttle_level0_1_111
06E1 C059      1845            push    (_main_throttle_level0_1_111 + 1)
06E3 C008      1846            push    _main_throttle_level1_1_111
06E5 C009      1847            push    (_main_throttle_level1_1_111 + 1)
06E7 C0B8      1848            push    _main_throttle_level2_1_111
06E9 C0B9      1849            push    (_main_throttle_level2_1_111 + 1)
06EB C0A8      1850            push    _main_parachute_deploy_1_111
06ED C0A9      1851            push    (_main_parachute_deploy_1_111 + 1)
06EF C002      1852            push    ar2
06F1 C003      1853            push    ar3
06F3 7404      1854            mov     a,#0x04
06F5 C0E0      1855            push    acc
06F7 E4        1856            clr     a
06F8 C0E0      1857            push    acc
06FA C004      1858            push    ar4
06FC C005      1859            push    ar5
06FE 7404      1860            mov     a,#0x04
0700 C0E0      1861            push    acc
0702 E4        1862            clr     a
0703 C0E0      1863            push    acc
0705 C006      1864            push    ar6
0707 C007      1865            push    ar7
0709 7404      1866            mov     a,#0x04
070B C0E0      1867            push    acc
070D E4        1868            clr     a
070E C0E0      1869            push    acc
0710 7440      1870            mov     a,#__str_10
0712 C0E0      1871            push    acc
0714 74C7      1872            mov     a,#(__str_10 >> 8)
0716 C0E0      1873            push    acc
0718 7480      1874            mov     a,#0x80
071A C0E0      1875            push    acc
071C 7460      1876            mov     a,#_buff
071E C0E0      1877            push    acc
0720 7445      1878            mov     a,#(_buff >> 8)
0722 C0E0      1879            push    acc
0724 7440      1880            mov     a,#0x40
0726 C0E0      1881            push    acc
0728 120000    1882            lcall   _sprintf
072B E581      1883            mov     a,sp
072D 24E6      1884            add     a,#0xe6
072F F581      1885            mov     sp,a
0731           1886   ;        EFM8_JDY40_Transmitter.c:471: sendstr1(buff);
0731 904560    1887            mov     dptr,#_buff
0734 75F040    1888            mov     b,#0x40
0737 120000    1889            lcall   _sendstr1
073A           1890   ;        EFM8_JDY40_Transmitter.c:472: printf("%s",buff);
073A 7460      1891            mov     a,#_buff
073C C0E0      1892            push    acc
073E 7445      1893            mov     a,#(_buff >> 8)
0740 C0E0      1894            push    acc
0742 7440      1895            mov     a,#0x40
0744 C0E0      1896            push    acc
0746 74C0      1897            mov     a,#__str_11
0748 C0E0      1898            push    acc
074A 74C7      1899            mov     a,#(__str_11 >> 8)
074C C0E0      1900            push    acc
074E 7480      1901            mov     a,#0x80
0750 C0E0      1902            push    acc
0752 120000    1903            lcall   _printf
0755 E581      1904            mov     a,sp
0757 24FA      1905            add     a,#0xfa
0759 F581      1906            mov     sp,a
075B           1907   ;        EFM8_JDY40_Transmitter.c:474: waitms_or_RI1(20);
075B 900014    1908            mov     dptr,#0x0014
075E 120000    1909            lcall   _waitms_or_RI1
0761 020000    1910            ljmp    L021022?
0764           1911            rseg R_CSEG
0764           1912   
0000           1913            rseg R_XINIT
0000           1914   
0000           1915            rseg R_CONST
0000           1916   __str_0:
0000 436F6D6D  1917            db 'Command: %s'
     616E643A
     202573
000B 00        1918            db 0x00
000C           1919   __str_1:
000C 0D        1920            db 0x0D
000D 0A        1921            db 0x0A
000E 4A44592D  1922            db 'JDY-40 test'
     34302074
     657374
0019 0D        1923            db 0x0D
001A 0A        1924            db 0x0A
001B 00        1925            db 0x00
001C           1926   __str_2:
001C 41542B44  1927            db 'AT+DVID2385'
     56494432
     333835
0027 0D        1928            db 0x0D
0028 0A        1929            db 0x0A
0029 00        1930            db 0x00
002A           1931   __str_3:
002A 41542B56  1932            db 'AT+VER'
     4552
0030 0D        1933            db 0x0D
0031 0A        1934            db 0x0A
0032 00        1935            db 0x00
0033           1936   __str_4:
0033 41542B42  1937            db 'AT+BAUD'
     415544
003A 0D        1938            db 0x0D
003B 0A        1939            db 0x0A
003C 00        1940            db 0x00
003D           1941   __str_5:
003D 41542B52  1942            db 'AT+RFID'
     464944
0044 0D        1943            db 0x0D
0045 0A        1944            db 0x0A
0046 00        1945            db 0x00
0047           1946   __str_6:
0047 41542B44  1947            db 'AT+DVID'
     564944
004E 0D        1948            db 0x0D
004F 0A        1949            db 0x0A
0050 00        1950            db 0x00
0051           1951   __str_7:
0051 41542B52  1952            db 'AT+RFC'
     4643
0057 0D        1953            db 0x0D
0058 0A        1954            db 0x0A
0059 00        1955            db 0x00
005A           1956   __str_8:
005A 41542B50  1957            db 'AT+POWE'
     4F5745
0061 0D        1958            db 0x0D
0062 0A        1959            db 0x0A
0063 00        1960            db 0x00
0064           1961   __str_9:
0064 41542B43  1962            db 'AT+CLSS'
     4C5353
006B 0D        1963            db 0x0D
006C 0A        1964            db 0x0A
006D 00        1965            db 0x00
006E           1966   __str_10:
006E 25302A64  1967            db '%0*d %0*d %0*d %d %d %d %d'
     2025302A
     64202530
     2A642025
     64202564
     20256420
     2564
0088 0A        1968            db 0x0A
0089 00        1969            db 0x00
008A           1970   __str_11:
008A 2573      1971            db '%s'
008C 00        1972            db 0x00
008D           1973   
0003           1974            CSEG
0003           1975   
0003           1976   end
