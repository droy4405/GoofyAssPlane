0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Sun Apr 14 18:35:37 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_Transmitter
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _main
0000             28            public _SendATCommand
0000             29            public _waitms_or_RI1
0000             30            public _RXU1
0000             31            public _getstr1
0000             32            public _getchar1_with_timeout
0000             33            public _getchar1
0000             34            public _sendstr1
0000             35            public _putchar1
0000             36            public _UART1_Init
0000             37            public _throttle_control_ADC
0000             38            public _Volts_at_Pin
0000             39            public _ADC_at_Pin
0000             40            public _Get_ADC
0000             41            public _InitPinADC
0000             42            public _waitms
0000             43            public _Timer3us
0000             44            public _TIMER0_Init
0000             45            public _InitADC
0000             46            public __c51_external_startup
0000             47            public _buff
0000             48   ;--------------------------------------------------------
0000             49   ; Special Function Registers
0000             50   ;--------------------------------------------------------
0000             51   _ACC            DATA 0xe0
0000             52   _ADC0ASAH       DATA 0xb6
0000             53   _ADC0ASAL       DATA 0xb5
0000             54   _ADC0ASCF       DATA 0xa1
0000             55   _ADC0ASCT       DATA 0xc7
0000             56   _ADC0CF0        DATA 0xbc
0000             57   _ADC0CF1        DATA 0xb9
0000             58   _ADC0CF2        DATA 0xdf
0000             59   _ADC0CN0        DATA 0xe8
0000             60   _ADC0CN1        DATA 0xb2
0000             61   _ADC0CN2        DATA 0xb3
0000             62   _ADC0GTH        DATA 0xc4
0000             63   _ADC0GTL        DATA 0xc3
0000             64   _ADC0H          DATA 0xbe
0000             65   _ADC0L          DATA 0xbd
0000             66   _ADC0LTH        DATA 0xc6
0000             67   _ADC0LTL        DATA 0xc5
0000             68   _ADC0MX         DATA 0xbb
0000             69   _B              DATA 0xf0
0000             70   _CKCON0         DATA 0x8e
0000             71   _CKCON1         DATA 0xa6
0000             72   _CLEN0          DATA 0xc6
0000             73   _CLIE0          DATA 0xc7
0000             74   _CLIF0          DATA 0xe8
0000             75   _CLKSEL         DATA 0xa9
0000             76   _CLOUT0         DATA 0xd1
0000             77   _CLU0CF         DATA 0xb1
0000             78   _CLU0FN         DATA 0xaf
0000             79   _CLU0MX         DATA 0x84
0000             80   _CLU1CF         DATA 0xb3
0000             81   _CLU1FN         DATA 0xb2
0000             82   _CLU1MX         DATA 0x85
0000             83   _CLU2CF         DATA 0xb6
0000             84   _CLU2FN         DATA 0xb5
0000             85   _CLU2MX         DATA 0x91
0000             86   _CLU3CF         DATA 0xbf
0000             87   _CLU3FN         DATA 0xbe
0000             88   _CLU3MX         DATA 0xae
0000             89   _CMP0CN0        DATA 0x9b
0000             90   _CMP0CN1        DATA 0x99
0000             91   _CMP0MD         DATA 0x9d
0000             92   _CMP0MX         DATA 0x9f
0000             93   _CMP1CN0        DATA 0xbf
0000             94   _CMP1CN1        DATA 0xac
0000             95   _CMP1MD         DATA 0xab
0000             96   _CMP1MX         DATA 0xaa
0000             97   _CRC0CN0        DATA 0xce
0000             98   _CRC0CN1        DATA 0x86
0000             99   _CRC0CNT        DATA 0xd3
0000            100   _CRC0DAT        DATA 0xcb
0000            101   _CRC0FLIP       DATA 0xcf
0000            102   _CRC0IN         DATA 0xca
0000            103   _CRC0ST         DATA 0xd2
0000            104   _DAC0CF0        DATA 0x91
0000            105   _DAC0CF1        DATA 0x92
0000            106   _DAC0H          DATA 0x85
0000            107   _DAC0L          DATA 0x84
0000            108   _DAC1CF0        DATA 0x93
0000            109   _DAC1CF1        DATA 0x94
0000            110   _DAC1H          DATA 0x8a
0000            111   _DAC1L          DATA 0x89
0000            112   _DAC2CF0        DATA 0x95
0000            113   _DAC2CF1        DATA 0x96
0000            114   _DAC2H          DATA 0x8c
0000            115   _DAC2L          DATA 0x8b
0000            116   _DAC3CF0        DATA 0x9a
0000            117   _DAC3CF1        DATA 0x9c
0000            118   _DAC3H          DATA 0x8e
0000            119   _DAC3L          DATA 0x8d
0000            120   _DACGCF0        DATA 0x88
0000            121   _DACGCF1        DATA 0x98
0000            122   _DACGCF2        DATA 0xa2
0000            123   _DERIVID        DATA 0xad
0000            124   _DEVICEID       DATA 0xb5
0000            125   _DPH            DATA 0x83
0000            126   _DPL            DATA 0x82
0000            127   _EIE1           DATA 0xe6
0000            128   _EIE2           DATA 0xf3
0000            129   _EIP1           DATA 0xbb
0000            130   _EIP1H          DATA 0xee
0000            131   _EIP2           DATA 0xed
0000            132   _EIP2H          DATA 0xf6
0000            133   _EMI0CN         DATA 0xe7
0000            134   _FLKEY          DATA 0xb7
0000            135   _HFO0CAL        DATA 0xc7
0000            136   _HFO1CAL        DATA 0xd6
0000            137   _HFOCN          DATA 0xef
0000            138   _I2C0ADM        DATA 0xff
0000            139   _I2C0CN0        DATA 0xba
0000            140   _I2C0DIN        DATA 0xbc
0000            141   _I2C0DOUT       DATA 0xbb
0000            142   _I2C0FCN0       DATA 0xad
0000            143   _I2C0FCN1       DATA 0xab
0000            144   _I2C0FCT        DATA 0xf5
0000            145   _I2C0SLAD       DATA 0xbd
0000            146   _I2C0STAT       DATA 0xb9
0000            147   _IE             DATA 0xa8
0000            148   _IP             DATA 0xb8
0000            149   _IPH            DATA 0xf2
0000            150   _IT01CF         DATA 0xe4
0000            151   _LFO0CN         DATA 0xb1
0000            152   _P0             DATA 0x80
0000            153   _P0MASK         DATA 0xfe
0000            154   _P0MAT          DATA 0xfd
0000            155   _P0MDIN         DATA 0xf1
0000            156   _P0MDOUT        DATA 0xa4
0000            157   _P0SKIP         DATA 0xd4
0000            158   _P1             DATA 0x90
0000            159   _P1MASK         DATA 0xee
0000            160   _P1MAT          DATA 0xed
0000            161   _P1MDIN         DATA 0xf2
0000            162   _P1MDOUT        DATA 0xa5
0000            163   _P1SKIP         DATA 0xd5
0000            164   _P2             DATA 0xa0
0000            165   _P2MASK         DATA 0xfc
0000            166   _P2MAT          DATA 0xfb
0000            167   _P2MDIN         DATA 0xf3
0000            168   _P2MDOUT        DATA 0xa6
0000            169   _P2SKIP         DATA 0xcc
0000            170   _P3             DATA 0xb0
0000            171   _P3MDIN         DATA 0xf4
0000            172   _P3MDOUT        DATA 0x9c
0000            173   _PCA0CENT       DATA 0x9e
0000            174   _PCA0CLR        DATA 0x9c
0000            175   _PCA0CN0        DATA 0xd8
0000            176   _PCA0CPH0       DATA 0xfc
0000            177   _PCA0CPH1       DATA 0xea
0000            178   _PCA0CPH2       DATA 0xec
0000            179   _PCA0CPH3       DATA 0xf5
0000            180   _PCA0CPH4       DATA 0x85
0000            181   _PCA0CPH5       DATA 0xde
0000            182   _PCA0CPL0       DATA 0xfb
0000            183   _PCA0CPL1       DATA 0xe9
0000            184   _PCA0CPL2       DATA 0xeb
0000            185   _PCA0CPL3       DATA 0xf4
0000            186   _PCA0CPL4       DATA 0x84
0000            187   _PCA0CPL5       DATA 0xdd
0000            188   _PCA0CPM0       DATA 0xda
0000            189   _PCA0CPM1       DATA 0xdb
0000            190   _PCA0CPM2       DATA 0xdc
0000            191   _PCA0CPM3       DATA 0xae
0000            192   _PCA0CPM4       DATA 0xaf
0000            193   _PCA0CPM5       DATA 0xcc
0000            194   _PCA0H          DATA 0xfa
0000            195   _PCA0L          DATA 0xf9
0000            196   _PCA0MD         DATA 0xd9
0000            197   _PCA0POL        DATA 0x96
0000            198   _PCA0PWM        DATA 0xf7
0000            199   _PCON0          DATA 0x87
0000            200   _PCON1          DATA 0xcd
0000            201   _PFE0CN         DATA 0xc1
0000            202   _PRTDRV         DATA 0xf6
0000            203   _PSCTL          DATA 0x8f
0000            204   _PSTAT0         DATA 0xaa
0000            205   _PSW            DATA 0xd0
0000            206   _REF0CN         DATA 0xd1
0000            207   _REG0CN         DATA 0xc9
0000            208   _REVID          DATA 0xb6
0000            209   _RSTSRC         DATA 0xef
0000            210   _SBCON1         DATA 0x94
0000            211   _SBRLH1         DATA 0x96
0000            212   _SBRLL1         DATA 0x95
0000            213   _SBUF           DATA 0x99
0000            214   _SBUF0          DATA 0x99
0000            215   _SBUF1          DATA 0x92
0000            216   _SCON           DATA 0x98
0000            217   _SCON0          DATA 0x98
0000            218   _SCON1          DATA 0xc8
0000            219   _SFRPAGE        DATA 0xa7
0000            220   _SFRPGCN        DATA 0xbc
0000            221   _SFRSTACK       DATA 0xd7
0000            222   _SMB0ADM        DATA 0xd6
0000            223   _SMB0ADR        DATA 0xd7
0000            224   _SMB0CF         DATA 0xc1
0000            225   _SMB0CN0        DATA 0xc0
0000            226   _SMB0DAT        DATA 0xc2
0000            227   _SMB0FCN0       DATA 0xc3
0000            228   _SMB0FCN1       DATA 0xc4
0000            229   _SMB0FCT        DATA 0xef
0000            230   _SMB0RXLN       DATA 0xc5
0000            231   _SMB0TC         DATA 0xac
0000            232   _SMOD1          DATA 0x93
0000            233   _SP             DATA 0x81
0000            234   _SPI0CFG        DATA 0xa1
0000            235   _SPI0CKR        DATA 0xa2
0000            236   _SPI0CN0        DATA 0xf8
0000            237   _SPI0DAT        DATA 0xa3
0000            238   _SPI0FCN0       DATA 0x9a
0000            239   _SPI0FCN1       DATA 0x9b
0000            240   _SPI0FCT        DATA 0xf7
0000            241   _SPI0PCF        DATA 0xdf
0000            242   _TCON           DATA 0x88
0000            243   _TH0            DATA 0x8c
0000            244   _TH1            DATA 0x8d
0000            245   _TL0            DATA 0x8a
0000            246   _TL1            DATA 0x8b
0000            247   _TMOD           DATA 0x89
0000            248   _TMR2CN0        DATA 0xc8
0000            249   _TMR2CN1        DATA 0xfd
0000            250   _TMR2H          DATA 0xcf
0000            251   _TMR2L          DATA 0xce
0000            252   _TMR2RLH        DATA 0xcb
0000            253   _TMR2RLL        DATA 0xca
0000            254   _TMR3CN0        DATA 0x91
0000            255   _TMR3CN1        DATA 0xfe
0000            256   _TMR3H          DATA 0x95
0000            257   _TMR3L          DATA 0x94
0000            258   _TMR3RLH        DATA 0x93
0000            259   _TMR3RLL        DATA 0x92
0000            260   _TMR4CN0        DATA 0x98
0000            261   _TMR4CN1        DATA 0xff
0000            262   _TMR4H          DATA 0xa5
0000            263   _TMR4L          DATA 0xa4
0000            264   _TMR4RLH        DATA 0xa3
0000            265   _TMR4RLL        DATA 0xa2
0000            266   _TMR5CN0        DATA 0xc0
0000            267   _TMR5CN1        DATA 0xf1
0000            268   _TMR5H          DATA 0xd5
0000            269   _TMR5L          DATA 0xd4
0000            270   _TMR5RLH        DATA 0xd3
0000            271   _TMR5RLL        DATA 0xd2
0000            272   _UART0PCF       DATA 0xd9
0000            273   _UART1FCN0      DATA 0x9d
0000            274   _UART1FCN1      DATA 0xd8
0000            275   _UART1FCT       DATA 0xfa
0000            276   _UART1LIN       DATA 0x9e
0000            277   _UART1PCF       DATA 0xda
0000            278   _VDM0CN         DATA 0xff
0000            279   _WDTCN          DATA 0x97
0000            280   _XBR0           DATA 0xe1
0000            281   _XBR1           DATA 0xe2
0000            282   _XBR2           DATA 0xe3
0000            283   _XOSC0CN        DATA 0x86
0000            284   _DPTR           DATA 0x8382
0000            285   _TMR2RL         DATA 0xcbca
0000            286   _TMR3RL         DATA 0x9392
0000            287   _TMR4RL         DATA 0xa3a2
0000            288   _TMR5RL         DATA 0xd3d2
0000            289   _TMR0           DATA 0x8c8a
0000            290   _TMR1           DATA 0x8d8b
0000            291   _TMR2           DATA 0xcfce
0000            292   _TMR3           DATA 0x9594
0000            293   _TMR4           DATA 0xa5a4
0000            294   _TMR5           DATA 0xd5d4
0000            295   _SBRL1          DATA 0x9695
0000            296   _PCA0           DATA 0xfaf9
0000            297   _PCA0CP0        DATA 0xfcfb
0000            298   _PCA0CP1        DATA 0xeae9
0000            299   _PCA0CP2        DATA 0xeceb
0000            300   _PCA0CP3        DATA 0xf5f4
0000            301   _PCA0CP4        DATA 0x8584
0000            302   _PCA0CP5        DATA 0xdedd
0000            303   _ADC0ASA        DATA 0xb6b5
0000            304   _ADC0GT         DATA 0xc4c3
0000            305   _ADC0           DATA 0xbebd
0000            306   _ADC0LT         DATA 0xc6c5
0000            307   _DAC0           DATA 0x8584
0000            308   _DAC1           DATA 0x8a89
0000            309   _DAC2           DATA 0x8c8b
0000            310   _DAC3           DATA 0x8e8d
0000            311   ;--------------------------------------------------------
0000            312   ; special function bits
0000            313   ;--------------------------------------------------------
0000            314   _ACC_0          BIT 0xe0
0000            315   _ACC_1          BIT 0xe1
0000            316   _ACC_2          BIT 0xe2
0000            317   _ACC_3          BIT 0xe3
0000            318   _ACC_4          BIT 0xe4
0000            319   _ACC_5          BIT 0xe5
0000            320   _ACC_6          BIT 0xe6
0000            321   _ACC_7          BIT 0xe7
0000            322   _TEMPE          BIT 0xe8
0000            323   _ADGN0          BIT 0xe9
0000            324   _ADGN1          BIT 0xea
0000            325   _ADWINT         BIT 0xeb
0000            326   _ADBUSY         BIT 0xec
0000            327   _ADINT          BIT 0xed
0000            328   _IPOEN          BIT 0xee
0000            329   _ADEN           BIT 0xef
0000            330   _B_0            BIT 0xf0
0000            331   _B_1            BIT 0xf1
0000            332   _B_2            BIT 0xf2
0000            333   _B_3            BIT 0xf3
0000            334   _B_4            BIT 0xf4
0000            335   _B_5            BIT 0xf5
0000            336   _B_6            BIT 0xf6
0000            337   _B_7            BIT 0xf7
0000            338   _C0FIF          BIT 0xe8
0000            339   _C0RIF          BIT 0xe9
0000            340   _C1FIF          BIT 0xea
0000            341   _C1RIF          BIT 0xeb
0000            342   _C2FIF          BIT 0xec
0000            343   _C2RIF          BIT 0xed
0000            344   _C3FIF          BIT 0xee
0000            345   _C3RIF          BIT 0xef
0000            346   _D1SRC0         BIT 0x88
0000            347   _D1SRC1         BIT 0x89
0000            348   _D1AMEN         BIT 0x8a
0000            349   _D01REFSL       BIT 0x8b
0000            350   _D3SRC0         BIT 0x8c
0000            351   _D3SRC1         BIT 0x8d
0000            352   _D3AMEN         BIT 0x8e
0000            353   _D23REFSL       BIT 0x8f
0000            354   _D0UDIS         BIT 0x98
0000            355   _D1UDIS         BIT 0x99
0000            356   _D2UDIS         BIT 0x9a
0000            357   _D3UDIS         BIT 0x9b
0000            358   _EX0            BIT 0xa8
0000            359   _ET0            BIT 0xa9
0000            360   _EX1            BIT 0xaa
0000            361   _ET1            BIT 0xab
0000            362   _ES0            BIT 0xac
0000            363   _ET2            BIT 0xad
0000            364   _ESPI0          BIT 0xae
0000            365   _EA             BIT 0xaf
0000            366   _PX0            BIT 0xb8
0000            367   _PT0            BIT 0xb9
0000            368   _PX1            BIT 0xba
0000            369   _PT1            BIT 0xbb
0000            370   _PS0            BIT 0xbc
0000            371   _PT2            BIT 0xbd
0000            372   _PSPI0          BIT 0xbe
0000            373   _P0_0           BIT 0x80
0000            374   _P0_1           BIT 0x81
0000            375   _P0_2           BIT 0x82
0000            376   _P0_3           BIT 0x83
0000            377   _P0_4           BIT 0x84
0000            378   _P0_5           BIT 0x85
0000            379   _P0_6           BIT 0x86
0000            380   _P0_7           BIT 0x87
0000            381   _P1_0           BIT 0x90
0000            382   _P1_1           BIT 0x91
0000            383   _P1_2           BIT 0x92
0000            384   _P1_3           BIT 0x93
0000            385   _P1_4           BIT 0x94
0000            386   _P1_5           BIT 0x95
0000            387   _P1_6           BIT 0x96
0000            388   _P1_7           BIT 0x97
0000            389   _P2_0           BIT 0xa0
0000            390   _P2_1           BIT 0xa1
0000            391   _P2_2           BIT 0xa2
0000            392   _P2_3           BIT 0xa3
0000            393   _P2_4           BIT 0xa4
0000            394   _P2_5           BIT 0xa5
0000            395   _P2_6           BIT 0xa6
0000            396   _P3_0           BIT 0xb0
0000            397   _P3_1           BIT 0xb1
0000            398   _P3_2           BIT 0xb2
0000            399   _P3_3           BIT 0xb3
0000            400   _P3_4           BIT 0xb4
0000            401   _P3_7           BIT 0xb7
0000            402   _CCF0           BIT 0xd8
0000            403   _CCF1           BIT 0xd9
0000            404   _CCF2           BIT 0xda
0000            405   _CCF3           BIT 0xdb
0000            406   _CCF4           BIT 0xdc
0000            407   _CCF5           BIT 0xdd
0000            408   _CR             BIT 0xde
0000            409   _CF             BIT 0xdf
0000            410   _PARITY         BIT 0xd0
0000            411   _F1             BIT 0xd1
0000            412   _OV             BIT 0xd2
0000            413   _RS0            BIT 0xd3
0000            414   _RS1            BIT 0xd4
0000            415   _F0             BIT 0xd5
0000            416   _AC             BIT 0xd6
0000            417   _CY             BIT 0xd7
0000            418   _RI             BIT 0x98
0000            419   _TI             BIT 0x99
0000            420   _RB8            BIT 0x9a
0000            421   _TB8            BIT 0x9b
0000            422   _REN            BIT 0x9c
0000            423   _CE             BIT 0x9d
0000            424   _SMODE          BIT 0x9e
0000            425   _RI1            BIT 0xc8
0000            426   _TI1            BIT 0xc9
0000            427   _RBX1           BIT 0xca
0000            428   _TBX1           BIT 0xcb
0000            429   _REN1           BIT 0xcc
0000            430   _PERR1          BIT 0xcd
0000            431   _OVR1           BIT 0xce
0000            432   _SI             BIT 0xc0
0000            433   _ACK            BIT 0xc1
0000            434   _ARBLOST        BIT 0xc2
0000            435   _ACKRQ          BIT 0xc3
0000            436   _STO            BIT 0xc4
0000            437   _STA            BIT 0xc5
0000            438   _TXMODE         BIT 0xc6
0000            439   _MASTER         BIT 0xc7
0000            440   _SPIEN          BIT 0xf8
0000            441   _TXNF           BIT 0xf9
0000            442   _NSSMD0         BIT 0xfa
0000            443   _NSSMD1         BIT 0xfb
0000            444   _RXOVRN         BIT 0xfc
0000            445   _MODF           BIT 0xfd
0000            446   _WCOL           BIT 0xfe
0000            447   _SPIF           BIT 0xff
0000            448   _IT0            BIT 0x88
0000            449   _IE0            BIT 0x89
0000            450   _IT1            BIT 0x8a
0000            451   _IE1            BIT 0x8b
0000            452   _TR0            BIT 0x8c
0000            453   _TF0            BIT 0x8d
0000            454   _TR1            BIT 0x8e
0000            455   _TF1            BIT 0x8f
0000            456   _T2XCLK0        BIT 0xc8
0000            457   _T2XCLK1        BIT 0xc9
0000            458   _TR2            BIT 0xca
0000            459   _T2SPLIT        BIT 0xcb
0000            460   _TF2CEN         BIT 0xcc
0000            461   _TF2LEN         BIT 0xcd
0000            462   _TF2L           BIT 0xce
0000            463   _TF2H           BIT 0xcf
0000            464   _T4XCLK0        BIT 0x98
0000            465   _T4XCLK1        BIT 0x99
0000            466   _TR4            BIT 0x9a
0000            467   _T4SPLIT        BIT 0x9b
0000            468   _TF4CEN         BIT 0x9c
0000            469   _TF4LEN         BIT 0x9d
0000            470   _TF4L           BIT 0x9e
0000            471   _TF4H           BIT 0x9f
0000            472   _T5XCLK0        BIT 0xc0
0000            473   _T5XCLK1        BIT 0xc1
0000            474   _TR5            BIT 0xc2
0000            475   _T5SPLIT        BIT 0xc3
0000            476   _TF5CEN         BIT 0xc4
0000            477   _TF5LEN         BIT 0xc5
0000            478   _TF5L           BIT 0xc6
0000            479   _TF5H           BIT 0xc7
0000            480   _RIE            BIT 0xd8
0000            481   _RXTO0          BIT 0xd9
0000            482   _RXTO1          BIT 0xda
0000            483   _RFRQ           BIT 0xdb
0000            484   _TIE            BIT 0xdc
0000            485   _TXHOLD         BIT 0xdd
0000            486   _TXNF1          BIT 0xde
0000            487   _TFRQ           BIT 0xdf
0000            488   ;--------------------------------------------------------
0000            489   ; overlayable register banks
0000            490   ;--------------------------------------------------------
0000            491            rbank0 segment data overlay
0000            492   ;--------------------------------------------------------
0000            493   ; internal ram data
0000            494   ;--------------------------------------------------------
0000            495            rseg R_DSEG
0000            496   _main_Y_pos_L_1_111:
0000            497            ds 4
0004            498   _main_Y_pos_R_1_111:
0004            499            ds 4
0008            500   _main_X_pos_R_1_111:
0008            501            ds 4
000C            502   _main_parachute_deploy_1_111:
000C            503            ds 2
000E            504   _main_sloc0_1_0:
000E            505            ds 2
0010            506   ;--------------------------------------------------------
0010            507   ; overlayable items in internal ram 
0010            508   ;--------------------------------------------------------
0000            509            rseg    R_OSEG
0000            510            rseg    R_OSEG
0000            511   _InitPinADC_PARM_2:
0000            512            ds 1
0001            513            rseg    R_OSEG
0001            514            rseg    R_OSEG
0001            515            rseg    R_OSEG
0001            516   ;--------------------------------------------------------
0001            517   ; indirectly addressable internal ram data
0001            518   ;--------------------------------------------------------
0000            519            rseg R_ISEG
0000            520   _buff:
0000            521            ds 20
0014            522   ;--------------------------------------------------------
0014            523   ; absolute internal ram data
0014            524   ;--------------------------------------------------------
0000            525            DSEG
0000            526   ;--------------------------------------------------------
0000            527   ; bit data
0000            528   ;--------------------------------------------------------
0000            529            rseg R_BSEG
0000            530   ;--------------------------------------------------------
0000            531   ; paged external ram data
0000            532   ;--------------------------------------------------------
0000            533            rseg R_PSEG
0000            534   ;--------------------------------------------------------
0000            535   ; external ram data
0000            536   ;--------------------------------------------------------
0000            537            rseg R_XSEG
0000            538   ;--------------------------------------------------------
0000            539   ; absolute external ram data
0000            540   ;--------------------------------------------------------
0000            541            XSEG
0000            542   ;--------------------------------------------------------
0000            543   ; external initialized ram data
0000            544   ;--------------------------------------------------------
0000            545            rseg R_IXSEG
0000            546            rseg R_HOME
0000            547            rseg R_GSINIT
0000            548            rseg R_CSEG
0000            549   ;--------------------------------------------------------
0000            550   ; Reset entry point and interrupt vectors
0000            551   ;--------------------------------------------------------
0000            552            CSEG at 0x0000
0000 020000     553            ljmp    _crt0
0003            554   ;--------------------------------------------------------
0003            555   ; global & static initialisations
0003            556   ;--------------------------------------------------------
0000            557            rseg R_HOME
0000            558            rseg R_GSINIT
0000            559            rseg R_GSINIT
0000            560   ;--------------------------------------------------------
0000            561   ; data variables initialization
0000            562   ;--------------------------------------------------------
0000            563            rseg R_DINIT
0000            564            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            565   ;--------------------------------------------------------
0000            566   ; code
0000            567   ;--------------------------------------------------------
0000            568            rseg R_CSEG
0000            569   ;------------------------------------------------------------
0000            570   ;Allocation info for local variables in function '_c51_external_startup'
0000            571   ;------------------------------------------------------------
0000            572   ;------------------------------------------------------------
0000            573   ;        EFM8_JDY40_Transmitter.c:13: char _c51_external_startup (void)
0000            574   ;        -----------------------------------------
0000            575   ;         function _c51_external_startup
0000            576   ;        -----------------------------------------
0000            577   __c51_external_startup:
0000            578            using   0
0000            579   ;        EFM8_JDY40_Transmitter.c:16: SFRPAGE = 0x00;
0000 75A700     580            mov     _SFRPAGE,#0x00
0003            581   ;        EFM8_JDY40_Transmitter.c:17: WDTCN = 0xDE; //First key
0003 7597DE     582            mov     _WDTCN,#0xDE
0006            583   ;        EFM8_JDY40_Transmitter.c:18: WDTCN = 0xAD; //Second key
0006 7597AD     584            mov     _WDTCN,#0xAD
0009            585   ;        EFM8_JDY40_Transmitter.c:20: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     586            mov     _VDM0CN,#0x80
000C            587   ;        EFM8_JDY40_Transmitter.c:21: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     588            mov     _RSTSRC,#0x06
000F            589   ;        EFM8_JDY40_Transmitter.c:28: SFRPAGE = 0x10;
000F 75A710     590            mov     _SFRPAGE,#0x10
0012            591   ;        EFM8_JDY40_Transmitter.c:29: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     592            mov     _PFE0CN,#0x20
0015            593   ;        EFM8_JDY40_Transmitter.c:30: SFRPAGE = 0x00;
0015 75A700     594            mov     _SFRPAGE,#0x00
0018            595   ;        EFM8_JDY40_Transmitter.c:51: CLKSEL = 0x00;
0018 75A900     596            mov     _CLKSEL,#0x00
001B            597   ;        EFM8_JDY40_Transmitter.c:52: CLKSEL = 0x00;
001B 75A900     598            mov     _CLKSEL,#0x00
001E            599   ;        EFM8_JDY40_Transmitter.c:53: while ((CLKSEL & 0x80) == 0);
001E            600   L002001?:
001E E5A9       601            mov     a,_CLKSEL
0020 30E790     602            jnb     acc.7,L002001?
0023            603   ;        EFM8_JDY40_Transmitter.c:54: CLKSEL = 0x03;
0023 75A903     604            mov     _CLKSEL,#0x03
0026            605   ;        EFM8_JDY40_Transmitter.c:55: CLKSEL = 0x03;
0026 75A903     606            mov     _CLKSEL,#0x03
0029            607   ;        EFM8_JDY40_Transmitter.c:56: while ((CLKSEL & 0x80) == 0);
0029            608   L002004?:
0029 E5A9       609            mov     a,_CLKSEL
002B 30E710     610            jnb     acc.7,L002004?
002E            611   ;        EFM8_JDY40_Transmitter.c:61: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     612            orl     _P0MDOUT,#0x11
0031            613   ;        EFM8_JDY40_Transmitter.c:62: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     614            orl     _P2MDOUT,#0x01
0034            615   ;        EFM8_JDY40_Transmitter.c:63: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     616            mov     _XBR0,#0x01
0037            617   ;        EFM8_JDY40_Transmitter.c:64: XBR1     = 0X00;
0037 75E200     618            mov     _XBR1,#0x00
003A            619   ;        EFM8_JDY40_Transmitter.c:65: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     620            mov     _XBR2,#0x41
003D            621   ;        EFM8_JDY40_Transmitter.c:71: SCON0 = 0x10;
003D 759810     622            mov     _SCON0,#0x10
0040            623   ;        EFM8_JDY40_Transmitter.c:72: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     624            mov     _TH1,#0xE6
0043            625   ;        EFM8_JDY40_Transmitter.c:73: TL1 = TH1;      // Init Timer1
0043 858D8B     626            mov     _TL1,_TH1
0046            627   ;        EFM8_JDY40_Transmitter.c:74: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     628            anl     _TMOD,#0x0F
0049            629   ;        EFM8_JDY40_Transmitter.c:75: TMOD |=  0x20;                       
0049 438920     630            orl     _TMOD,#0x20
004C            631   ;        EFM8_JDY40_Transmitter.c:76: TR1 = 1; // START Timer1
004C D28E       632            setb    _TR1
004E            633   ;        EFM8_JDY40_Transmitter.c:77: TI = 1;  // Indicate TX0 ready
004E D299       634            setb    _TI
0050            635   ;        EFM8_JDY40_Transmitter.c:79: return 0;
0050 758200     636            mov     dpl,#0x00
0053 22         637            ret
0054            638   ;------------------------------------------------------------
0054            639   ;Allocation info for local variables in function 'InitADC'
0054            640   ;------------------------------------------------------------
0054            641   ;------------------------------------------------------------
0054            642   ;        EFM8_JDY40_Transmitter.c:82: void InitADC (void)
0054            643   ;        -----------------------------------------
0054            644   ;         function InitADC
0054            645   ;        -----------------------------------------
0054            646   _InitADC:
0054            647   ;        EFM8_JDY40_Transmitter.c:84: SFRPAGE = 0x00;
0054 75A700     648            mov     _SFRPAGE,#0x00
0057            649   ;        EFM8_JDY40_Transmitter.c:85: ADEN=0; // Disable ADC
0057 C2EF       650            clr     _ADEN
0059            651   ;        EFM8_JDY40_Transmitter.c:90: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0059 75B280     652            mov     _ADC0CN1,#0x80
005C            653   ;        EFM8_JDY40_Transmitter.c:94: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
005C 75BC20     654            mov     _ADC0CF0,#0x20
005F            655   ;        EFM8_JDY40_Transmitter.c:98: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005F 75B91E     656            mov     _ADC0CF1,#0x1E
0062            657   ;        EFM8_JDY40_Transmitter.c:107: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0062 75E800     658            mov     _ADC0CN0,#0x00
0065            659   ;        EFM8_JDY40_Transmitter.c:112: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0065 75DF3F     660            mov     _ADC0CF2,#0x3F
0068            661   ;        EFM8_JDY40_Transmitter.c:116: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0068 75B300     662            mov     _ADC0CN2,#0x00
006B            663   ;        EFM8_JDY40_Transmitter.c:118: ADEN=1; // Enable ADC
006B D2EF       664            setb    _ADEN
006D 22         665            ret
006E            666   ;------------------------------------------------------------
006E            667   ;Allocation info for local variables in function 'TIMER0_Init'
006E            668   ;------------------------------------------------------------
006E            669   ;------------------------------------------------------------
006E            670   ;        EFM8_JDY40_Transmitter.c:121: void TIMER0_Init(void)
006E            671   ;        -----------------------------------------
006E            672   ;         function TIMER0_Init
006E            673   ;        -----------------------------------------
006E            674   _TIMER0_Init:
006E            675   ;        EFM8_JDY40_Transmitter.c:123: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
006E 5389F0     676            anl     _TMOD,#0xF0
0071            677   ;        EFM8_JDY40_Transmitter.c:124: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0071 438901     678            orl     _TMOD,#0x01
0074            679   ;        EFM8_JDY40_Transmitter.c:125: TR0=0; // Stop Timer/Counter 0
0074 C28C       680            clr     _TR0
0076 22         681            ret
0077            682   ;------------------------------------------------------------
0077            683   ;Allocation info for local variables in function 'Timer3us'
0077            684   ;------------------------------------------------------------
0077            685   ;us                        Allocated to registers r2 
0077            686   ;i                         Allocated to registers r3 
0077            687   ;------------------------------------------------------------
0077            688   ;        EFM8_JDY40_Transmitter.c:129: void Timer3us(unsigned char us)
0077            689   ;        -----------------------------------------
0077            690   ;         function Timer3us
0077            691   ;        -----------------------------------------
0077            692   _Timer3us:
0077 AA82       693            mov     r2,dpl
0079            694   ;        EFM8_JDY40_Transmitter.c:134: CKCON0|=0b_0100_0000;
0079 438E40     695            orl     _CKCON0,#0x40
007C            696   ;        EFM8_JDY40_Transmitter.c:136: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
007C 7592B8     697            mov     _TMR3RL,#0xB8
007F 7593FF     698            mov     (_TMR3RL >> 8),#0xFF
0082            699   ;        EFM8_JDY40_Transmitter.c:137: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0082 859294     700            mov     _TMR3,_TMR3RL
0085 859395     701            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0088            702   ;        EFM8_JDY40_Transmitter.c:139: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0088 759104     703            mov     _TMR3CN0,#0x04
008B            704   ;        EFM8_JDY40_Transmitter.c:140: for (i = 0; i < us; i++)       // Count <us> overflows
008B 7B00       705            mov     r3,#0x00
008D            706   L005004?:
008D C3         707            clr     c
008E EB         708            mov     a,r3
008F 9A         709            subb    a,r2
0090 5000       710            jnc     L005007?
0092            711   ;        EFM8_JDY40_Transmitter.c:142: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0092            712   L005001?:
0092 E591       713            mov     a,_TMR3CN0
0094 30E710     714            jnb     acc.7,L005001?
0097            715   ;        EFM8_JDY40_Transmitter.c:143: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0097 53917F     716            anl     _TMR3CN0,#0x7F
009A            717   ;        EFM8_JDY40_Transmitter.c:140: for (i = 0; i < us; i++)       // Count <us> overflows
009A 0B         718            inc     r3
009B 8000       719            sjmp    L005004?
009D            720   L005007?:
009D            721   ;        EFM8_JDY40_Transmitter.c:145: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
009D 759100     722            mov     _TMR3CN0,#0x00
00A0 22         723            ret
00A1            724   ;------------------------------------------------------------
00A1            725   ;Allocation info for local variables in function 'waitms'
00A1            726   ;------------------------------------------------------------
00A1            727   ;ms                        Allocated to registers r2 r3 
00A1            728   ;j                         Allocated to registers r4 r5 
00A1            729   ;k                         Allocated to registers r6 
00A1            730   ;------------------------------------------------------------
00A1            731   ;        EFM8_JDY40_Transmitter.c:148: void waitms (unsigned int ms)
00A1            732   ;        -----------------------------------------
00A1            733   ;         function waitms
00A1            734   ;        -----------------------------------------
00A1            735   _waitms:
00A1 AA82       736            mov     r2,dpl
00A3 AB83       737            mov     r3,dph
00A5            738   ;        EFM8_JDY40_Transmitter.c:152: for(j=0; j<ms; j++)
00A5 7C00       739            mov     r4,#0x00
00A7 7D00       740            mov     r5,#0x00
00A9            741   L006005?:
00A9 C3         742            clr     c
00AA EC         743            mov     a,r4
00AB 9A         744            subb    a,r2
00AC ED         745            mov     a,r5
00AD 9B         746            subb    a,r3
00AE 5000       747            jnc     L006009?
00B0            748   ;        EFM8_JDY40_Transmitter.c:153: for (k=0; k<4; k++) Timer3us(250);
00B0 7E00       749            mov     r6,#0x00
00B2            750   L006001?:
00B2 BE0450     751            cjne    r6,#0x04,L006018?
00B5            752   L006018?:
00B5 5000       753            jnc     L006007?
00B7 7582FA     754            mov     dpl,#0xFA
00BA C002       755            push    ar2
00BC C003       756            push    ar3
00BE C004       757            push    ar4
00C0 C005       758            push    ar5
00C2 C006       759            push    ar6
00C4 120000     760            lcall   _Timer3us
00C7 D006       761            pop     ar6
00C9 D005       762            pop     ar5
00CB D004       763            pop     ar4
00CD D003       764            pop     ar3
00CF D002       765            pop     ar2
00D1 0E         766            inc     r6
00D2 8000       767            sjmp    L006001?
00D4            768   L006007?:
00D4            769   ;        EFM8_JDY40_Transmitter.c:152: for(j=0; j<ms; j++)
00D4 0C         770            inc     r4
00D5 BC0090     771            cjne    r4,#0x00,L006005?
00D8 0D         772            inc     r5
00D9 8000       773            sjmp    L006005?
00DB            774   L006009?:
00DB 22         775            ret
00DC            776   ;------------------------------------------------------------
00DC            777   ;Allocation info for local variables in function 'InitPinADC'
00DC            778   ;------------------------------------------------------------
00DC            779   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00DC            780   ;portno                    Allocated to registers r2 
00DC            781   ;mask                      Allocated to registers r3 
00DC            782   ;------------------------------------------------------------
00DC            783   ;        EFM8_JDY40_Transmitter.c:158: void InitPinADC (unsigned char portno, unsigned char pinno)
00DC            784   ;        -----------------------------------------
00DC            785   ;         function InitPinADC
00DC            786   ;        -----------------------------------------
00DC            787   _InitPinADC:
00DC AA82       788            mov     r2,dpl
00DE            789   ;        EFM8_JDY40_Transmitter.c:162: mask=1<<pinno;
00DE 8560F0     790            mov     b,_InitPinADC_PARM_2
00E1 05F0       791            inc     b
00E3 7401       792            mov     a,#0x01
00E5 8000       793            sjmp    L007013?
00E7            794   L007011?:
00E7 25E0       795            add     a,acc
00E9            796   L007013?:
00E9 D5F050     797            djnz    b,L007011?
00EC FB         798            mov     r3,a
00ED            799   ;        EFM8_JDY40_Transmitter.c:164: SFRPAGE = 0x20;
00ED 75A720     800            mov     _SFRPAGE,#0x20
00F0            801   ;        EFM8_JDY40_Transmitter.c:165: switch (portno)
00F0 BA0090     802            cjne    r2,#0x00,L007014?
00F3 8000       803            sjmp    L007001?
00F5            804   L007014?:
00F5 BA0110     805            cjne    r2,#0x01,L007015?
00F8 8000       806            sjmp    L007002?
00FA            807   L007015?:
00FA            808   ;        EFM8_JDY40_Transmitter.c:167: case 0:
00FA BA0290     809            cjne    r2,#0x02,L007005?
00FD 8000       810            sjmp    L007003?
00FF            811   L007001?:
00FF            812   ;        EFM8_JDY40_Transmitter.c:168: P0MDIN &= (~mask); // Set pin as analog input
00FF EB         813            mov     a,r3
0100 F4         814            cpl     a
0101 FA         815            mov     r2,a
0102 52F1       816            anl     _P0MDIN,a
0104            817   ;        EFM8_JDY40_Transmitter.c:169: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0104 EB         818            mov     a,r3
0105 42D4       819            orl     _P0SKIP,a
0107            820   ;        EFM8_JDY40_Transmitter.c:170: break;
0107            821   ;        EFM8_JDY40_Transmitter.c:171: case 1:
0107 8000       822            sjmp    L007005?
0109            823   L007002?:
0109            824   ;        EFM8_JDY40_Transmitter.c:172: P1MDIN &= (~mask); // Set pin as analog input
0109 EB         825            mov     a,r3
010A F4         826            cpl     a
010B FA         827            mov     r2,a
010C 52F2       828            anl     _P1MDIN,a
010E            829   ;        EFM8_JDY40_Transmitter.c:173: P1SKIP |= mask; // Skip Crossbar decoding for this pin
010E EB         830            mov     a,r3
010F 42D5       831            orl     _P1SKIP,a
0111            832   ;        EFM8_JDY40_Transmitter.c:174: break;
0111            833   ;        EFM8_JDY40_Transmitter.c:175: case 2:
0111 8000       834            sjmp    L007005?
0113            835   L007003?:
0113            836   ;        EFM8_JDY40_Transmitter.c:176: P2MDIN &= (~mask); // Set pin as analog input
0113 EB         837            mov     a,r3
0114 F4         838            cpl     a
0115 FA         839            mov     r2,a
0116 52F3       840            anl     _P2MDIN,a
0118            841   ;        EFM8_JDY40_Transmitter.c:177: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0118 EB         842            mov     a,r3
0119 42CC       843            orl     _P2SKIP,a
011B            844   ;        EFM8_JDY40_Transmitter.c:181: }
011B            845   L007005?:
011B            846   ;        EFM8_JDY40_Transmitter.c:182: SFRPAGE = 0x00;
011B 75A700     847            mov     _SFRPAGE,#0x00
011E 22         848            ret
011F            849   ;------------------------------------------------------------
011F            850   ;Allocation info for local variables in function 'Get_ADC'
011F            851   ;------------------------------------------------------------
011F            852   ;------------------------------------------------------------
011F            853   ;        EFM8_JDY40_Transmitter.c:185: unsigned int Get_ADC (void)
011F            854   ;        -----------------------------------------
011F            855   ;         function Get_ADC
011F            856   ;        -----------------------------------------
011F            857   _Get_ADC:
011F            858   ;        EFM8_JDY40_Transmitter.c:187: ADINT = 0;
011F C2ED       859            clr     _ADINT
0121            860   ;        EFM8_JDY40_Transmitter.c:188: ADBUSY = 1;
0121 D2EC       861            setb    _ADBUSY
0123            862   ;        EFM8_JDY40_Transmitter.c:189: while (!ADINT); // Wait for conversion to complete
0123            863   L008001?:
0123 30ED10     864            jnb     _ADINT,L008001?
0126            865   ;        EFM8_JDY40_Transmitter.c:190: return (ADC0);
0126 85BD82     866            mov     dpl,_ADC0
0129 85BE83     867            mov     dph,(_ADC0 >> 8)
012C 22         868            ret
012D            869   ;------------------------------------------------------------
012D            870   ;Allocation info for local variables in function 'ADC_at_Pin'
012D            871   ;------------------------------------------------------------
012D            872   ;pin                       Allocated to registers 
012D            873   ;------------------------------------------------------------
012D            874   ;        EFM8_JDY40_Transmitter.c:193: unsigned int ADC_at_Pin(unsigned char pin)
012D            875   ;        -----------------------------------------
012D            876   ;         function ADC_at_Pin
012D            877   ;        -----------------------------------------
012D            878   _ADC_at_Pin:
012D 8582BB     879            mov     _ADC0MX,dpl
0130            880   ;        EFM8_JDY40_Transmitter.c:196: ADINT = 0;
0130 C2ED       881            clr     _ADINT
0132            882   ;        EFM8_JDY40_Transmitter.c:197: ADBUSY = 1;     // Convert voltage at the pin
0132 D2EC       883            setb    _ADBUSY
0134            884   ;        EFM8_JDY40_Transmitter.c:198: while (!ADINT); // Wait for conversion to complete
0134            885   L009001?:
0134 30ED50     886            jnb     _ADINT,L009001?
0137            887   ;        EFM8_JDY40_Transmitter.c:199: return (ADC0);
0137 85BD82     888            mov     dpl,_ADC0
013A 85BE83     889            mov     dph,(_ADC0 >> 8)
013D 22         890            ret
013E            891   ;------------------------------------------------------------
013E            892   ;Allocation info for local variables in function 'Volts_at_Pin'
013E            893   ;------------------------------------------------------------
013E            894   ;pin                       Allocated to registers r2 
013E            895   ;------------------------------------------------------------
013E            896   ;        EFM8_JDY40_Transmitter.c:202: float Volts_at_Pin(unsigned char pin)
013E            897   ;        -----------------------------------------
013E            898   ;         function Volts_at_Pin
013E            899   ;        -----------------------------------------
013E            900   _Volts_at_Pin:
013E            901   ;        EFM8_JDY40_Transmitter.c:204: return ((ADC_at_Pin(pin)*VDD)/16383.0);
013E 120000     902            lcall   _ADC_at_Pin
0141 120000     903            lcall   ___uint2fs
0144 AA82       904            mov     r2,dpl
0146 AB83       905            mov     r3,dph
0148 ACF0       906            mov     r4,b
014A FD         907            mov     r5,a
014B C002       908            push    ar2
014D C003       909            push    ar3
014F C004       910            push    ar4
0151 C005       911            push    ar5
0153 900000     912            mov     dptr,#0x0000
0156 75F0A0     913            mov     b,#0xA0
0159 7440       914            mov     a,#0x40
015B 120000     915            lcall   ___fsmul
015E AA82       916            mov     r2,dpl
0160 AB83       917            mov     r3,dph
0162 ACF0       918            mov     r4,b
0164 FD         919            mov     r5,a
0165 E581       920            mov     a,sp
0167 24FC       921            add     a,#0xfc
0169 F581       922            mov     sp,a
016B E4         923            clr     a
016C C0E0       924            push    acc
016E 74FC       925            mov     a,#0xFC
0170 C0E0       926            push    acc
0172 747F       927            mov     a,#0x7F
0174 C0E0       928            push    acc
0176 7446       929            mov     a,#0x46
0178 C0E0       930            push    acc
017A 8A82       931            mov     dpl,r2
017C 8B83       932            mov     dph,r3
017E 8CF0       933            mov     b,r4
0180 ED         934            mov     a,r5
0181 120000     935            lcall   ___fsdiv
0184 AA82       936            mov     r2,dpl
0186 AB83       937            mov     r3,dph
0188 ACF0       938            mov     r4,b
018A FD         939            mov     r5,a
018B E581       940            mov     a,sp
018D 24FC       941            add     a,#0xfc
018F F581       942            mov     sp,a
0191 8A82       943            mov     dpl,r2
0193 8B83       944            mov     dph,r3
0195 8CF0       945            mov     b,r4
0197 ED         946            mov     a,r5
0198 22         947            ret
0199            948   ;------------------------------------------------------------
0199            949   ;Allocation info for local variables in function 'throttle_control_ADC'
0199            950   ;------------------------------------------------------------
0199            951   ;pin                       Allocated to registers r2 
0199            952   ;throttle_ADC              Allocated to registers r2 r3 
0199            953   ;------------------------------------------------------------
0199            954   ;        EFM8_JDY40_Transmitter.c:208: float throttle_control_ADC(unsigned char pin)
0199            955   ;        -----------------------------------------
0199            956   ;         function throttle_control_ADC
0199            957   ;        -----------------------------------------
0199            958   _throttle_control_ADC:
0199            959   ;        EFM8_JDY40_Transmitter.c:211: throttle_ADC = ADC_at_Pin(pin);
0199 120000     960            lcall   _ADC_at_Pin
019C AA82       961            mov     r2,dpl
019E AB83       962            mov     r3,dph
01A0            963   ;        EFM8_JDY40_Transmitter.c:213: if(throttle_ADC < 16383/5){
01A0 C3         964            clr     c
01A1 EA         965            mov     a,r2
01A2 94CC       966            subb    a,#0xCC
01A4 EB         967            mov     a,r3
01A5 940C       968            subb    a,#0x0C
01A7 5000       969            jnc     L011002?
01A9            970   ;        EFM8_JDY40_Transmitter.c:214: return 1.0;
01A9 900000     971            mov     dptr,#0x0000
01AC 75F080     972            mov     b,#0x80
01AF 743F       973            mov     a,#0x3F
01B1 22         974            ret
01B2            975   L011002?:
01B2            976   ;        EFM8_JDY40_Transmitter.c:216: return ((throttle_ADC*VDD)/16383.0);
01B2 8A82       977            mov     dpl,r2
01B4 8B83       978            mov     dph,r3
01B6 120000     979            lcall   ___uint2fs
01B9 AA82       980            mov     r2,dpl
01BB AB83       981            mov     r3,dph
01BD ACF0       982            mov     r4,b
01BF FD         983            mov     r5,a
01C0 C002       984            push    ar2
01C2 C003       985            push    ar3
01C4 C004       986            push    ar4
01C6 C005       987            push    ar5
01C8 900000     988            mov     dptr,#0x0000
01CB 75F0A0     989            mov     b,#0xA0
01CE 7440       990            mov     a,#0x40
01D0 120000     991            lcall   ___fsmul
01D3 AA82       992            mov     r2,dpl
01D5 AB83       993            mov     r3,dph
01D7 ACF0       994            mov     r4,b
01D9 FD         995            mov     r5,a
01DA E581       996            mov     a,sp
01DC 24FC       997            add     a,#0xfc
01DE F581       998            mov     sp,a
01E0 E4         999            clr     a
01E1 C0E0      1000            push    acc
01E3 74FC      1001            mov     a,#0xFC
01E5 C0E0      1002            push    acc
01E7 747F      1003            mov     a,#0x7F
01E9 C0E0      1004            push    acc
01EB 7446      1005            mov     a,#0x46
01ED C0E0      1006            push    acc
01EF 8A82      1007            mov     dpl,r2
01F1 8B83      1008            mov     dph,r3
01F3 8CF0      1009            mov     b,r4
01F5 ED        1010            mov     a,r5
01F6 120000    1011            lcall   ___fsdiv
01F9 AA82      1012            mov     r2,dpl
01FB AB83      1013            mov     r3,dph
01FD ACF0      1014            mov     r4,b
01FF FD        1015            mov     r5,a
0200 E581      1016            mov     a,sp
0202 24FC      1017            add     a,#0xfc
0204 F581      1018            mov     sp,a
0206 8A82      1019            mov     dpl,r2
0208 8B83      1020            mov     dph,r3
020A 8CF0      1021            mov     b,r4
020C ED        1022            mov     a,r5
020D 22        1023            ret
020E           1024   ;------------------------------------------------------------
020E           1025   ;Allocation info for local variables in function 'UART1_Init'
020E           1026   ;------------------------------------------------------------
020E           1027   ;baudrate                  Allocated to registers r2 r3 r4 r5 
020E           1028   ;------------------------------------------------------------
020E           1029   ;        EFM8_JDY40_Transmitter.c:220: void UART1_Init (unsigned long baudrate)
020E           1030   ;        -----------------------------------------
020E           1031   ;         function UART1_Init
020E           1032   ;        -----------------------------------------
020E           1033   _UART1_Init:
020E AA82      1034            mov     r2,dpl
0210 AB83      1035            mov     r3,dph
0212 ACF0      1036            mov     r4,b
0214 FD        1037            mov     r5,a
0215           1038   ;        EFM8_JDY40_Transmitter.c:222: SFRPAGE = 0x20;
0215 75A720    1039            mov     _SFRPAGE,#0x20
0218           1040   ;        EFM8_JDY40_Transmitter.c:223: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
0218 75930C    1041            mov     _SMOD1,#0x0C
021B           1042   ;        EFM8_JDY40_Transmitter.c:224: SCON1 = 0x10;
021B 75C810    1043            mov     _SCON1,#0x10
021E           1044   ;        EFM8_JDY40_Transmitter.c:225: SBCON1 =0x00;   // disable baud rate generator
021E 759400    1045            mov     _SBCON1,#0x00
0221           1046   ;        EFM8_JDY40_Transmitter.c:226: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
0221 8A00      1047            mov     __divulong_PARM_2,r2
0223 8B01      1048            mov     (__divulong_PARM_2 + 1),r3
0225 8C02      1049            mov     (__divulong_PARM_2 + 2),r4
0227 8D03      1050            mov     (__divulong_PARM_2 + 3),r5
0229 90A200    1051            mov     dptr,#0xA200
022C 75F04A    1052            mov     b,#0x4A
022F 7404      1053            mov     a,#0x04
0231 120000    1054            lcall   __divulong
0234 AA82      1055            mov     r2,dpl
0236 AB83      1056            mov     r3,dph
0238 ACF0      1057            mov     r4,b
023A FD        1058            mov     r5,a
023B 750018    1059            mov     __divulong_PARM_2,#0x18
023E E4        1060            clr     a
023F F501      1061            mov     (__divulong_PARM_2 + 1),a
0241 F502      1062            mov     (__divulong_PARM_2 + 2),a
0243 F503      1063            mov     (__divulong_PARM_2 + 3),a
0245 8A82      1064            mov     dpl,r2
0247 8B83      1065            mov     dph,r3
0249 8CF0      1066            mov     b,r4
024B ED        1067            mov     a,r5
024C 120000    1068            lcall   __divulong
024F AA82      1069            mov     r2,dpl
0251 AB83      1070            mov     r3,dph
0253 ACF0      1071            mov     r4,b
0255 FD        1072            mov     r5,a
0256 E4        1073            clr     a
0257 C3        1074            clr     c
0258 9A        1075            subb    a,r2
0259 FA        1076            mov     r2,a
025A E4        1077            clr     a
025B 9B        1078            subb    a,r3
025C FB        1079            mov     r3,a
025D 7401      1080            mov     a,#0x01
025F 9C        1081            subb    a,r4
0260 E4        1082            clr     a
0261 9D        1083            subb    a,r5
0262 8A95      1084            mov     _SBRL1,r2
0264 8B96      1085            mov     (_SBRL1 >> 8),r3
0266           1086   ;        EFM8_JDY40_Transmitter.c:227: TI1 = 1; // indicate ready for TX
0266 D2C9      1087            setb    _TI1
0268           1088   ;        EFM8_JDY40_Transmitter.c:228: SBCON1 |= 0x40;   // enable baud rate generator
0268 439440    1089            orl     _SBCON1,#0x40
026B           1090   ;        EFM8_JDY40_Transmitter.c:229: SFRPAGE = 0x00;
026B 75A700    1091            mov     _SFRPAGE,#0x00
026E 22        1092            ret
026F           1093   ;------------------------------------------------------------
026F           1094   ;Allocation info for local variables in function 'putchar1'
026F           1095   ;------------------------------------------------------------
026F           1096   ;c                         Allocated to registers r2 
026F           1097   ;------------------------------------------------------------
026F           1098   ;        EFM8_JDY40_Transmitter.c:232: void putchar1 (char c) 
026F           1099   ;        -----------------------------------------
026F           1100   ;         function putchar1
026F           1101   ;        -----------------------------------------
026F           1102   _putchar1:
026F AA82      1103            mov     r2,dpl
0271           1104   ;        EFM8_JDY40_Transmitter.c:234: SFRPAGE = 0x20;
0271 75A720    1105            mov     _SFRPAGE,#0x20
0274           1106   ;        EFM8_JDY40_Transmitter.c:235: while (!TI1);
0274           1107   L013001?:
0274           1108   ;        EFM8_JDY40_Transmitter.c:236: TI1=0;
0274 10C9A8    1109            jbc     _TI1,L013008?
0277 8000      1110            sjmp    L013001?
0279           1111   L013008?:
0279           1112   ;        EFM8_JDY40_Transmitter.c:237: SBUF1 = c;
0279 8A92      1113            mov     _SBUF1,r2
027B           1114   ;        EFM8_JDY40_Transmitter.c:238: SFRPAGE = 0x00;
027B 75A700    1115            mov     _SFRPAGE,#0x00
027E 22        1116            ret
027F           1117   ;------------------------------------------------------------
027F           1118   ;Allocation info for local variables in function 'sendstr1'
027F           1119   ;------------------------------------------------------------
027F           1120   ;s                         Allocated to registers r2 r3 r4 
027F           1121   ;------------------------------------------------------------
027F           1122   ;        EFM8_JDY40_Transmitter.c:241: void sendstr1 (char * s)
027F           1123   ;        -----------------------------------------
027F           1124   ;         function sendstr1
027F           1125   ;        -----------------------------------------
027F           1126   _sendstr1:
027F AA82      1127            mov     r2,dpl
0281 AB83      1128            mov     r3,dph
0283 ACF0      1129            mov     r4,b
0285           1130   ;        EFM8_JDY40_Transmitter.c:243: while(*s)
0285           1131   L014001?:
0285 8A82      1132            mov     dpl,r2
0287 8B83      1133            mov     dph,r3
0289 8CF0      1134            mov     b,r4
028B 120000    1135            lcall   __gptrget
028E FD        1136            mov     r5,a
028F 6000      1137            jz      L014004?
0291           1138   ;        EFM8_JDY40_Transmitter.c:245: putchar1(*s);
0291 8D82      1139            mov     dpl,r5
0293 C002      1140            push    ar2
0295 C003      1141            push    ar3
0297 C004      1142            push    ar4
0299 120000    1143            lcall   _putchar1
029C D004      1144            pop     ar4
029E D003      1145            pop     ar3
02A0 D002      1146            pop     ar2
02A2           1147   ;        EFM8_JDY40_Transmitter.c:246: s++;      
02A2 0A        1148            inc     r2
02A3 BA00E8    1149            cjne    r2,#0x00,L014001?
02A6 0B        1150            inc     r3
02A7 8000      1151            sjmp    L014001?
02A9           1152   L014004?:
02A9 22        1153            ret
02AA           1154   ;------------------------------------------------------------
02AA           1155   ;Allocation info for local variables in function 'getchar1'
02AA           1156   ;------------------------------------------------------------
02AA           1157   ;c                         Allocated to registers 
02AA           1158   ;------------------------------------------------------------
02AA           1159   ;        EFM8_JDY40_Transmitter.c:250: char getchar1 (void)
02AA           1160   ;        -----------------------------------------
02AA           1161   ;         function getchar1
02AA           1162   ;        -----------------------------------------
02AA           1163   _getchar1:
02AA           1164   ;        EFM8_JDY40_Transmitter.c:253: SFRPAGE = 0x20;
02AA 75A720    1165            mov     _SFRPAGE,#0x20
02AD           1166   ;        EFM8_JDY40_Transmitter.c:254: while (!RI1);
02AD           1167   L015001?:
02AD           1168   ;        EFM8_JDY40_Transmitter.c:255: RI1=0;
02AD 10C8E8    1169            jbc     _RI1,L015008?
02B0 8000      1170            sjmp    L015001?
02B2           1171   L015008?:
02B2           1172   ;        EFM8_JDY40_Transmitter.c:257: SCON1&=0b_0011_1111;
02B2 53C83F    1173            anl     _SCON1,#0x3F
02B5           1174   ;        EFM8_JDY40_Transmitter.c:258: c = SBUF1;
02B5 859282    1175            mov     dpl,_SBUF1
02B8           1176   ;        EFM8_JDY40_Transmitter.c:259: SFRPAGE = 0x00;
02B8 75A700    1177            mov     _SFRPAGE,#0x00
02BB           1178   ;        EFM8_JDY40_Transmitter.c:260: return (c);
02BB 22        1179            ret
02BC           1180   ;------------------------------------------------------------
02BC           1181   ;Allocation info for local variables in function 'getchar1_with_timeout'
02BC           1182   ;------------------------------------------------------------
02BC           1183   ;c                         Allocated to registers 
02BC           1184   ;timeout                   Allocated to registers r2 r3 
02BC           1185   ;------------------------------------------------------------
02BC           1186   ;        EFM8_JDY40_Transmitter.c:263: char getchar1_with_timeout (void)
02BC           1187   ;        -----------------------------------------
02BC           1188   ;         function getchar1_with_timeout
02BC           1189   ;        -----------------------------------------
02BC           1190   _getchar1_with_timeout:
02BC           1191   ;        EFM8_JDY40_Transmitter.c:267: SFRPAGE = 0x20;
02BC 75A720    1192            mov     _SFRPAGE,#0x20
02BF           1193   ;        EFM8_JDY40_Transmitter.c:269: while (!RI1)
02BF 7A00      1194            mov     r2,#0x00
02C1 7B00      1195            mov     r3,#0x00
02C3           1196   L016003?:
02C3 20C868    1197            jb      _RI1,L016005?
02C6           1198   ;        EFM8_JDY40_Transmitter.c:271: SFRPAGE = 0x00;
02C6 75A700    1199            mov     _SFRPAGE,#0x00
02C9           1200   ;        EFM8_JDY40_Transmitter.c:272: Timer3us(20);
02C9 758214    1201            mov     dpl,#0x14
02CC C002      1202            push    ar2
02CE C003      1203            push    ar3
02D0 120000    1204            lcall   _Timer3us
02D3 D003      1205            pop     ar3
02D5 D002      1206            pop     ar2
02D7           1207   ;        EFM8_JDY40_Transmitter.c:273: SFRPAGE = 0x20;
02D7 75A720    1208            mov     _SFRPAGE,#0x20
02DA           1209   ;        EFM8_JDY40_Transmitter.c:274: timeout++;
02DA 0A        1210            inc     r2
02DB BA00A8    1211            cjne    r2,#0x00,L016012?
02DE 0B        1212            inc     r3
02DF           1213   L016012?:
02DF           1214   ;        EFM8_JDY40_Transmitter.c:275: if(timeout==25000)
02DF BAA828    1215            cjne    r2,#0xA8,L016003?
02E2 BB6128    1216            cjne    r3,#0x61,L016003?
02E5           1217   ;        EFM8_JDY40_Transmitter.c:277: SFRPAGE = 0x00;
02E5 75A700    1218            mov     _SFRPAGE,#0x00
02E8           1219   ;        EFM8_JDY40_Transmitter.c:278: return ('\n'); // Timeout after half second
02E8 75820A    1220            mov     dpl,#0x0A
02EB 22        1221            ret
02EC           1222   L016005?:
02EC           1223   ;        EFM8_JDY40_Transmitter.c:281: RI1=0;
02EC C2C8      1224            clr     _RI1
02EE           1225   ;        EFM8_JDY40_Transmitter.c:283: SCON1&=0b_0011_1111;
02EE 53C83F    1226            anl     _SCON1,#0x3F
02F1           1227   ;        EFM8_JDY40_Transmitter.c:284: c = SBUF1;
02F1 859282    1228            mov     dpl,_SBUF1
02F4           1229   ;        EFM8_JDY40_Transmitter.c:285: SFRPAGE = 0x00;
02F4 75A700    1230            mov     _SFRPAGE,#0x00
02F7           1231   ;        EFM8_JDY40_Transmitter.c:286: return (c);
02F7 22        1232            ret
02F8           1233   ;------------------------------------------------------------
02F8           1234   ;Allocation info for local variables in function 'getstr1'
02F8           1235   ;------------------------------------------------------------
02F8           1236   ;s                         Allocated to registers r2 r3 r4 
02F8           1237   ;c                         Allocated to registers r5 
02F8           1238   ;------------------------------------------------------------
02F8           1239   ;        EFM8_JDY40_Transmitter.c:289: void getstr1 (char * s)
02F8           1240   ;        -----------------------------------------
02F8           1241   ;         function getstr1
02F8           1242   ;        -----------------------------------------
02F8           1243   _getstr1:
02F8 AA82      1244            mov     r2,dpl
02FA AB83      1245            mov     r3,dph
02FC ACF0      1246            mov     r4,b
02FE           1247   ;        EFM8_JDY40_Transmitter.c:293: while(1)
02FE           1248   L017004?:
02FE           1249   ;        EFM8_JDY40_Transmitter.c:295: c=getchar1_with_timeout();
02FE C002      1250            push    ar2
0300 C003      1251            push    ar3
0302 C004      1252            push    ar4
0304 120000    1253            lcall   _getchar1_with_timeout
0307 AD82      1254            mov     r5,dpl
0309 D004      1255            pop     ar4
030B D003      1256            pop     ar3
030D D002      1257            pop     ar2
030F           1258   ;        EFM8_JDY40_Transmitter.c:296: if(c=='\n')
030F BD0A28    1259            cjne    r5,#0x0A,L017002?
0312           1260   ;        EFM8_JDY40_Transmitter.c:298: *s=0;
0312 8A82      1261            mov     dpl,r2
0314 8B83      1262            mov     dph,r3
0316 8CF0      1263            mov     b,r4
0318 E4        1264            clr     a
0319           1265   ;        EFM8_JDY40_Transmitter.c:299: return;
0319 020000    1266            ljmp    __gptrput
031C           1267   L017002?:
031C           1268   ;        EFM8_JDY40_Transmitter.c:301: *s=c;
031C 8A82      1269            mov     dpl,r2
031E 8B83      1270            mov     dph,r3
0320 8CF0      1271            mov     b,r4
0322 ED        1272            mov     a,r5
0323 120000    1273            lcall   __gptrput
0326 A3        1274            inc     dptr
0327 AA82      1275            mov     r2,dpl
0329 AB83      1276            mov     r3,dph
032B           1277   ;        EFM8_JDY40_Transmitter.c:302: s++;
032B 8000      1278            sjmp    L017004?
032D           1279   ;------------------------------------------------------------
032D           1280   ;Allocation info for local variables in function 'RXU1'
032D           1281   ;------------------------------------------------------------
032D           1282   ;------------------------------------------------------------
032D           1283   ;        EFM8_JDY40_Transmitter.c:307: bit RXU1 (void)
032D           1284   ;        -----------------------------------------
032D           1285   ;         function RXU1
032D           1286   ;        -----------------------------------------
032D           1287   _RXU1:
032D           1288   ;        EFM8_JDY40_Transmitter.c:310: SFRPAGE = 0x20;
032D 75A720    1289            mov     _SFRPAGE,#0x20
0330           1290   ;        EFM8_JDY40_Transmitter.c:311: mybit=RI1;
0330 A2C8      1291            mov     c,_RI1
0332           1292   ;        EFM8_JDY40_Transmitter.c:312: SFRPAGE = 0x00;
0332 75A700    1293            mov     _SFRPAGE,#0x00
0335           1294   ;        EFM8_JDY40_Transmitter.c:313: return mybit;
0335 22        1295            ret
0336           1296   ;------------------------------------------------------------
0336           1297   ;Allocation info for local variables in function 'waitms_or_RI1'
0336           1298   ;------------------------------------------------------------
0336           1299   ;ms                        Allocated to registers r2 r3 
0336           1300   ;j                         Allocated to registers r4 r5 
0336           1301   ;k                         Allocated to registers r6 
0336           1302   ;------------------------------------------------------------
0336           1303   ;        EFM8_JDY40_Transmitter.c:316: void waitms_or_RI1 (unsigned int ms)
0336           1304   ;        -----------------------------------------
0336           1305   ;         function waitms_or_RI1
0336           1306   ;        -----------------------------------------
0336           1307   _waitms_or_RI1:
0336 AA82      1308            mov     r2,dpl
0338 AB83      1309            mov     r3,dph
033A           1310   ;        EFM8_JDY40_Transmitter.c:320: for(j=0; j<ms; j++)
033A 7C00      1311            mov     r4,#0x00
033C 7D00      1312            mov     r5,#0x00
033E           1313   L019007?:
033E C3        1314            clr     c
033F EC        1315            mov     a,r4
0340 9A        1316            subb    a,r2
0341 ED        1317            mov     a,r5
0342 9B        1318            subb    a,r3
0343 5000      1319            jnc     L019011?
0345           1320   ;        EFM8_JDY40_Transmitter.c:322: for (k=0; k<4; k++)
0345 7E00      1321            mov     r6,#0x00
0347           1322   L019003?:
0347 BE0468    1323            cjne    r6,#0x04,L019019?
034A           1324   L019019?:
034A 5000      1325            jnc     L019009?
034C           1326   ;        EFM8_JDY40_Transmitter.c:324: if(RXU1()) return;
034C C002      1327            push    ar2
034E C003      1328            push    ar3
0350 C004      1329            push    ar4
0352 C005      1330            push    ar5
0354 C006      1331            push    ar6
0356 120000    1332            lcall   _RXU1
0359 E4        1333            clr     a
035A 33        1334            rlc     a
035B D006      1335            pop     ar6
035D D005      1336            pop     ar5
035F D004      1337            pop     ar4
0361 D003      1338            pop     ar3
0363 D002      1339            pop     ar2
0365 6000      1340            jz      L019002?
0367 22        1341            ret
0368           1342   L019002?:
0368           1343   ;        EFM8_JDY40_Transmitter.c:325: Timer3us(250);
0368 7582FA    1344            mov     dpl,#0xFA
036B C002      1345            push    ar2
036D C003      1346            push    ar3
036F C004      1347            push    ar4
0371 C005      1348            push    ar5
0373 C006      1349            push    ar6
0375 120000    1350            lcall   _Timer3us
0378 D006      1351            pop     ar6
037A D005      1352            pop     ar5
037C D004      1353            pop     ar4
037E D003      1354            pop     ar3
0380 D002      1355            pop     ar2
0382           1356   ;        EFM8_JDY40_Transmitter.c:322: for (k=0; k<4; k++)
0382 0E        1357            inc     r6
0383 8000      1358            sjmp    L019003?
0385           1359   L019009?:
0385           1360   ;        EFM8_JDY40_Transmitter.c:320: for(j=0; j<ms; j++)
0385 0C        1361            inc     r4
0386 BC00A8    1362            cjne    r4,#0x00,L019007?
0389 0D        1363            inc     r5
038A 8000      1364            sjmp    L019007?
038C           1365   L019011?:
038C 22        1366            ret
038D           1367   ;------------------------------------------------------------
038D           1368   ;Allocation info for local variables in function 'SendATCommand'
038D           1369   ;------------------------------------------------------------
038D           1370   ;s                         Allocated to registers r2 r3 r4 
038D           1371   ;------------------------------------------------------------
038D           1372   ;        EFM8_JDY40_Transmitter.c:330: void SendATCommand (char * s)
038D           1373   ;        -----------------------------------------
038D           1374   ;         function SendATCommand
038D           1375   ;        -----------------------------------------
038D           1376   _SendATCommand:
038D AA82      1377            mov     r2,dpl
038F AB83      1378            mov     r3,dph
0391 ACF0      1379            mov     r4,b
0393           1380   ;        EFM8_JDY40_Transmitter.c:332: printf("Command: %s", s);
0393 C002      1381            push    ar2
0395 C003      1382            push    ar3
0397 C004      1383            push    ar4
0399 C002      1384            push    ar2
039B C003      1385            push    ar3
039D C004      1386            push    ar4
039F 7428      1387            mov     a,#__str_0
03A1 C0E0      1388            push    acc
03A3 74C5      1389            mov     a,#(__str_0 >> 8)
03A5 C0E0      1390            push    acc
03A7 7480      1391            mov     a,#0x80
03A9 C0E0      1392            push    acc
03AB 120000    1393            lcall   _printf
03AE E581      1394            mov     a,sp
03B0 24FA      1395            add     a,#0xfa
03B2 F581      1396            mov     sp,a
03B4           1397   ;        EFM8_JDY40_Transmitter.c:333: P2_0=0; // 'set' pin to 0 is 'AT' mode.
03B4 C2A0      1398            clr     _P2_0
03B6           1399   ;        EFM8_JDY40_Transmitter.c:334: waitms(5);
03B6 900005    1400            mov     dptr,#0x0005
03B9 120000    1401            lcall   _waitms
03BC D004      1402            pop     ar4
03BE D003      1403            pop     ar3
03C0 D002      1404            pop     ar2
03C2           1405   ;        EFM8_JDY40_Transmitter.c:335: sendstr1(s);
03C2 8A82      1406            mov     dpl,r2
03C4 8B83      1407            mov     dph,r3
03C6 8CF0      1408            mov     b,r4
03C8 120000    1409            lcall   _sendstr1
03CB           1410   ;        EFM8_JDY40_Transmitter.c:336: waitms(10);
03CB 90000A    1411            mov     dptr,#0x000A
03CE 120000    1412            lcall   _waitms
03D1           1413   ;        EFM8_JDY40_Transmitter.c:337: P2_0=1; // 'set' pin to 1 is normal operation mode.
03D1 D2A0      1414            setb    _P2_0
03D3 22        1415            ret
03D4           1416   ;------------------------------------------------------------
03D4           1417   ;Allocation info for local variables in function 'main'
03D4           1418   ;------------------------------------------------------------
03D4           1419   ;Y_pos_L                   Allocated with name '_main_Y_pos_L_1_111'
03D4           1420   ;Y_pos_R                   Allocated with name '_main_Y_pos_R_1_111'
03D4           1421   ;X_pos_R                   Allocated with name '_main_X_pos_R_1_111'
03D4           1422   ;count                     Allocated to registers 
03D4           1423   ;parachute_deploy          Allocated with name '_main_parachute_deploy_1_111'
03D4           1424   ;potentiometer             Allocated to registers r4 r5 r2 r3 
03D4           1425   ;PWM_DutyCyclePeriod       Allocated to registers 
03D4           1426   ;sloc0                     Allocated with name '_main_sloc0_1_0'
03D4           1427   ;------------------------------------------------------------
03D4           1428   ;        EFM8_JDY40_Transmitter.c:340: void main (void)
03D4           1429   ;        -----------------------------------------
03D4           1430   ;         function main
03D4           1431   ;        -----------------------------------------
03D4           1432   _main:
03D4           1433   ;        EFM8_JDY40_Transmitter.c:347: int parachute_deploy = 0;
03D4 E4        1434            clr     a
03D5 F5D0      1435            mov     _main_parachute_deploy_1_111,a
03D7 F5D1      1436            mov     (_main_parachute_deploy_1_111 + 1),a
03D9           1437   ;        EFM8_JDY40_Transmitter.c:355: waitms(500);
03D9 9001F4    1438            mov     dptr,#0x01F4
03DC 120000    1439            lcall   _waitms
03DF           1440   ;        EFM8_JDY40_Transmitter.c:356: printf("\r\nJDY-40 test\r\n");
03DF 74A8      1441            mov     a,#__str_1
03E1 C0E0      1442            push    acc
03E3 74C5      1443            mov     a,#(__str_1 >> 8)
03E5 C0E0      1444            push    acc
03E7 7480      1445            mov     a,#0x80
03E9 C0E0      1446            push    acc
03EB 120000    1447            lcall   _printf
03EE 1581      1448            dec     sp
03F0 1581      1449            dec     sp
03F2 1581      1450            dec     sp
03F4           1451   ;        EFM8_JDY40_Transmitter.c:357: UART1_Init(9600);
03F4 902580    1452            mov     dptr,#0x2580
03F7 E4        1453            clr     a
03F8 F5F0      1454            mov     b,a
03FA 120000    1455            lcall   _UART1_Init
03FD           1456   ;        EFM8_JDY40_Transmitter.c:359: InitPinADC(2, 2); // Configure P0.1 as analog input
03FD 756002    1457            mov     _InitPinADC_PARM_2,#0x02
0400 758202    1458            mov     dpl,#0x02
0403 120000    1459            lcall   _InitPinADC
0406           1460   ;        EFM8_JDY40_Transmitter.c:360: InitPinADC(1, 2); // Configure P2.3 as analog input
0406 756002    1461            mov     _InitPinADC_PARM_2,#0x02
0409 758201    1462            mov     dpl,#0x01
040C 120000    1463            lcall   _InitPinADC
040F           1464   ;        EFM8_JDY40_Transmitter.c:361: InitPinADC(2, 3);
040F 756003    1465            mov     _InitPinADC_PARM_2,#0x03
0412 758202    1466            mov     dpl,#0x02
0415 120000    1467            lcall   _InitPinADC
0418           1468   ;        EFM8_JDY40_Transmitter.c:362: InitPinADC(2, 1);
0418 756001    1469            mov     _InitPinADC_PARM_2,#0x01
041B 758202    1470            mov     dpl,#0x02
041E 120000    1471            lcall   _InitPinADC
0421           1472   ;        EFM8_JDY40_Transmitter.c:363: InitADC();
0421 120000    1473            lcall   _InitADC
0424           1474   ;        EFM8_JDY40_Transmitter.c:379: SendATCommand("AT+DVID2385\r\n");  
0424 90C5E8    1475            mov     dptr,#__str_2
0427 75F080    1476            mov     b,#0x80
042A 120000    1477            lcall   _SendATCommand
042D           1478   ;        EFM8_JDY40_Transmitter.c:382: SendATCommand("AT+VER\r\n");
042D 90C628    1479            mov     dptr,#__str_3
0430 75F080    1480            mov     b,#0x80
0433 120000    1481            lcall   _SendATCommand
0436           1482   ;        EFM8_JDY40_Transmitter.c:383: SendATCommand("AT+BAUD\r\n");
0436 90C668    1483            mov     dptr,#__str_4
0439 75F080    1484            mov     b,#0x80
043C 120000    1485            lcall   _SendATCommand
043F           1486   ;        EFM8_JDY40_Transmitter.c:384: SendATCommand("AT+RFID\r\n");
043F 90C6A8    1487            mov     dptr,#__str_5
0442 75F080    1488            mov     b,#0x80
0445 120000    1489            lcall   _SendATCommand
0448           1490   ;        EFM8_JDY40_Transmitter.c:385: SendATCommand("AT+DVID\r\n");
0448 90C6E8    1491            mov     dptr,#__str_6
044B 75F080    1492            mov     b,#0x80
044E 120000    1493            lcall   _SendATCommand
0451           1494   ;        EFM8_JDY40_Transmitter.c:386: SendATCommand("AT+RFC\r\n");
0451 90C728    1495            mov     dptr,#__str_7
0454 75F080    1496            mov     b,#0x80
0457 120000    1497            lcall   _SendATCommand
045A           1498   ;        EFM8_JDY40_Transmitter.c:387: SendATCommand("AT+POWE\r\n");
045A 90C768    1499            mov     dptr,#__str_8
045D 75F080    1500            mov     b,#0x80
0460 120000    1501            lcall   _SendATCommand
0463           1502   ;        EFM8_JDY40_Transmitter.c:388: SendATCommand("AT+CLSS\r\n");
0463 90C7A8    1503            mov     dptr,#__str_9
0466 75F080    1504            mov     b,#0x80
0469 120000    1505            lcall   _SendATCommand
046C           1506   ;        EFM8_JDY40_Transmitter.c:391: while(1)
046C           1507   L021004?:
046C           1508   ;        EFM8_JDY40_Transmitter.c:395: Y_pos_L = Volts_at_Pin(QFP32_MUX_P2_2);
046C 75820F    1509            mov     dpl,#0x0F
046F 120000    1510            lcall   _Volts_at_Pin
0472 8582E0    1511            mov     _main_Y_pos_L_1_111,dpl
0475 8583E1    1512            mov     (_main_Y_pos_L_1_111 + 1),dph
0478 85F0E2    1513            mov     (_main_Y_pos_L_1_111 + 2),b
047B F5E3      1514            mov     (_main_Y_pos_L_1_111 + 3),a
047D           1515   ;        EFM8_JDY40_Transmitter.c:396: Y_pos_R = Volts_at_Pin(QFP32_MUX_P1_2);
047D 758208    1516            mov     dpl,#0x08
0480 120000    1517            lcall   _Volts_at_Pin
0483 858230    1518            mov     _main_Y_pos_R_1_111,dpl
0486 858331    1519            mov     (_main_Y_pos_R_1_111 + 1),dph
0489 85F032    1520            mov     (_main_Y_pos_R_1_111 + 2),b
048C F533      1521            mov     (_main_Y_pos_R_1_111 + 3),a
048E           1522   ;        EFM8_JDY40_Transmitter.c:397: X_pos_R = Volts_at_Pin(QFP32_MUX_P2_1);
048E 75820E    1523            mov     dpl,#0x0E
0491 120000    1524            lcall   _Volts_at_Pin
0494 858280    1525            mov     _main_X_pos_R_1_111,dpl
0497 858381    1526            mov     (_main_X_pos_R_1_111 + 1),dph
049A 85F082    1527            mov     (_main_X_pos_R_1_111 + 2),b
049D F583      1528            mov     (_main_X_pos_R_1_111 + 3),a
049F           1529   ;        EFM8_JDY40_Transmitter.c:400: Y_pos_L *= 1000;
049F C0E0      1530            push    _main_Y_pos_L_1_111
04A1 C0E1      1531            push    (_main_Y_pos_L_1_111 + 1)
04A3 C0E2      1532            push    (_main_Y_pos_L_1_111 + 2)
04A5 C0E3      1533            push    (_main_Y_pos_L_1_111 + 3)
04A7 900000    1534            mov     dptr,#0x0000
04AA 75F07A    1535            mov     b,#0x7A
04AD 7444      1536            mov     a,#0x44
04AF 120000    1537            lcall   ___fsmul
04B2 8582E0    1538            mov     _main_Y_pos_L_1_111,dpl
04B5 8583E1    1539            mov     (_main_Y_pos_L_1_111 + 1),dph
04B8 85F0E2    1540            mov     (_main_Y_pos_L_1_111 + 2),b
04BB F5E3      1541            mov     (_main_Y_pos_L_1_111 + 3),a
04BD E581      1542            mov     a,sp
04BF 24FC      1543            add     a,#0xfc
04C1 F581      1544            mov     sp,a
04C3           1545   ;        EFM8_JDY40_Transmitter.c:401: Y_pos_R *= 1000;
04C3 C030      1546            push    _main_Y_pos_R_1_111
04C5 C031      1547            push    (_main_Y_pos_R_1_111 + 1)
04C7 C032      1548            push    (_main_Y_pos_R_1_111 + 2)
04C9 C033      1549            push    (_main_Y_pos_R_1_111 + 3)
04CB 900000    1550            mov     dptr,#0x0000
04CE 75F07A    1551            mov     b,#0x7A
04D1 7444      1552            mov     a,#0x44
04D3 120000    1553            lcall   ___fsmul
04D6 858230    1554            mov     _main_Y_pos_R_1_111,dpl
04D9 858331    1555            mov     (_main_Y_pos_R_1_111 + 1),dph
04DC 85F032    1556            mov     (_main_Y_pos_R_1_111 + 2),b
04DF F533      1557            mov     (_main_Y_pos_R_1_111 + 3),a
04E1 E581      1558            mov     a,sp
04E3 24FC      1559            add     a,#0xfc
04E5 F581      1560            mov     sp,a
04E7           1561   ;        EFM8_JDY40_Transmitter.c:402: X_pos_R *= 1000;
04E7 C080      1562            push    _main_X_pos_R_1_111
04E9 C081      1563            push    (_main_X_pos_R_1_111 + 1)
04EB C082      1564            push    (_main_X_pos_R_1_111 + 2)
04ED C083      1565            push    (_main_X_pos_R_1_111 + 3)
04EF 900000    1566            mov     dptr,#0x0000
04F2 75F07A    1567            mov     b,#0x7A
04F5 7444      1568            mov     a,#0x44
04F7 120000    1569            lcall   ___fsmul
04FA 858280    1570            mov     _main_X_pos_R_1_111,dpl
04FD 858381    1571            mov     (_main_X_pos_R_1_111 + 1),dph
0500 85F082    1572            mov     (_main_X_pos_R_1_111 + 2),b
0503 F583      1573            mov     (_main_X_pos_R_1_111 + 3),a
0505 E581      1574            mov     a,sp
0507 24FC      1575            add     a,#0xfc
0509 F581      1576            mov     sp,a
050B           1577   ;        EFM8_JDY40_Transmitter.c:405: potentiometer = throttle_control_ADC(QFP32_MUX_P2_3);
050B 758210    1578            mov     dpl,#0x10
050E 120000    1579            lcall   _throttle_control_ADC
0511 AC82      1580            mov     r4,dpl
0513 AD83      1581            mov     r5,dph
0515 AAF0      1582            mov     r2,b
0517 FB        1583            mov     r3,a
0518           1584   ;        EFM8_JDY40_Transmitter.c:408: potentiometer *= 1000;
0518 C004      1585            push    ar4
051A C005      1586            push    ar5
051C C002      1587            push    ar2
051E C003      1588            push    ar3
0520 900000    1589            mov     dptr,#0x0000
0523 75F07A    1590            mov     b,#0x7A
0526 7444      1591            mov     a,#0x44
0528 120000    1592            lcall   ___fsmul
052B AC82      1593            mov     r4,dpl
052D AD83      1594            mov     r5,dph
052F AAF0      1595            mov     r2,b
0531 FB        1596            mov     r3,a
0532 E581      1597            mov     a,sp
0534 24FC      1598            add     a,#0xfc
0536 F581      1599            mov     sp,a
0538           1600   ;        EFM8_JDY40_Transmitter.c:412: if(P0_4 == 0){
0538 208428    1601            jb      _P0_4,L021002?
053B           1602   ;        EFM8_JDY40_Transmitter.c:415: parachute_deploy = 1;
053B 75D001    1603            mov     _main_parachute_deploy_1_111,#0x01
053E E4        1604            clr     a
053F F5D1      1605            mov     (_main_parachute_deploy_1_111 + 1),a
0541           1606   L021002?:
0541           1607   ;        EFM8_JDY40_Transmitter.c:419: 4, (int)Y_pos_L, 4, (int)X_pos_R, 4, (int)Y_pos_R, 4, (int)potentiometer, parachute_deploy);
0541 8C82      1608            mov     dpl,r4
0543 8D83      1609            mov     dph,r5
0545 8AF0      1610            mov     b,r2
0547 EB        1611            mov     a,r3
0548 120000    1612            lcall   ___fs2sint
054B AA82      1613            mov     r2,dpl
054D AB83      1614            mov     r3,dph
054F 853082    1615            mov     dpl,_main_Y_pos_R_1_111
0552 853183    1616            mov     dph,(_main_Y_pos_R_1_111 + 1)
0555 8532F0    1617            mov     b,(_main_Y_pos_R_1_111 + 2)
0558 E533      1618            mov     a,(_main_Y_pos_R_1_111 + 3)
055A C002      1619            push    ar2
055C C003      1620            push    ar3
055E 120000    1621            lcall   ___fs2sint
0561 AC82      1622            mov     r4,dpl
0563 AD83      1623            mov     r5,dph
0565 858082    1624            mov     dpl,_main_X_pos_R_1_111
0568 858183    1625            mov     dph,(_main_X_pos_R_1_111 + 1)
056B 8582F0    1626            mov     b,(_main_X_pos_R_1_111 + 2)
056E E583      1627            mov     a,(_main_X_pos_R_1_111 + 3)
0570 C004      1628            push    ar4
0572 C005      1629            push    ar5
0574 120000    1630            lcall   ___fs2sint
0577 858210    1631            mov     _main_sloc0_1_0,dpl
057A 858311    1632            mov     (_main_sloc0_1_0 + 1),dph
057D 85E082    1633            mov     dpl,_main_Y_pos_L_1_111
0580 85E183    1634            mov     dph,(_main_Y_pos_L_1_111 + 1)
0583 85E2F0    1635            mov     b,(_main_Y_pos_L_1_111 + 2)
0586 E5E3      1636            mov     a,(_main_Y_pos_L_1_111 + 3)
0588 120000    1637            lcall   ___fs2sint
058B AE82      1638            mov     r6,dpl
058D AF83      1639            mov     r7,dph
058F D005      1640            pop     ar5
0591 D004      1641            pop     ar4
0593 D003      1642            pop     ar3
0595 D002      1643            pop     ar2
0597           1644   ;        EFM8_JDY40_Transmitter.c:418: sprintf(buff, "%0*d %0*d %0*d %0*d %d\n",
0597 C0D0      1645            push    _main_parachute_deploy_1_111
0599 C0D1      1646            push    (_main_parachute_deploy_1_111 + 1)
059B C002      1647            push    ar2
059D C003      1648            push    ar3
059F 7404      1649            mov     a,#0x04
05A1 C0E0      1650            push    acc
05A3 E4        1651            clr     a
05A4 C0E0      1652            push    acc
05A6 C004      1653            push    ar4
05A8 C005      1654            push    ar5
05AA 7404      1655            mov     a,#0x04
05AC C0E0      1656            push    acc
05AE E4        1657            clr     a
05AF C0E0      1658            push    acc
05B1 C010      1659            push    _main_sloc0_1_0
05B3 C011      1660            push    (_main_sloc0_1_0 + 1)
05B5 7404      1661            mov     a,#0x04
05B7 C0E0      1662            push    acc
05B9 E4        1663            clr     a
05BA C0E0      1664            push    acc
05BC C006      1665            push    ar6
05BE C007      1666            push    ar7
05C0 7404      1667            mov     a,#0x04
05C2 C0E0      1668            push    acc
05C4 E4        1669            clr     a
05C5 C0E0      1670            push    acc
05C7 74A8      1671            mov     a,#__str_10
05C9 C0E0      1672            push    acc
05CB 74C8      1673            mov     a,#(__str_10 >> 8)
05CD C0E0      1674            push    acc
05CF 7480      1675            mov     a,#0x80
05D1 C0E0      1676            push    acc
05D3 74D0      1677            mov     a,#_buff
05D5 C0E0      1678            push    acc
05D7 7416      1679            mov     a,#(_buff >> 8)
05D9 C0E0      1680            push    acc
05DB 7440      1681            mov     a,#0x40
05DD C0E0      1682            push    acc
05DF 120000    1683            lcall   _sprintf
05E2 E581      1684            mov     a,sp
05E4 24E8      1685            add     a,#0xe8
05E6 F581      1686            mov     sp,a
05E8           1687   ;        EFM8_JDY40_Transmitter.c:422: sendstr1(buff);
05E8 9016D0    1688            mov     dptr,#_buff
05EB 75F040    1689            mov     b,#0x40
05EE 120000    1690            lcall   _sendstr1
05F1           1691   ;        EFM8_JDY40_Transmitter.c:425: waitms_or_RI1(20);
05F1 900014    1692            mov     dptr,#0x0014
05F4 120000    1693            lcall   _waitms_or_RI1
05F7 020000    1694            ljmp    L021004?
05FA           1695            rseg R_CSEG
05FA           1696   
0000           1697            rseg R_XINIT
0000           1698   
0000           1699            rseg R_CONST
0000           1700   __str_0:
0000 436F6D6D  1701            db 'Command: %s'
     616E643A
     202573
000B 00        1702            db 0x00
000C           1703   __str_1:
000C 0D        1704            db 0x0D
000D 0A        1705            db 0x0A
000E 4A44592D  1706            db 'JDY-40 test'
     34302074
     657374
0019 0D        1707            db 0x0D
001A 0A        1708            db 0x0A
001B 00        1709            db 0x00
001C           1710   __str_2:
001C 41542B44  1711            db 'AT+DVID2385'
     56494432
     333835
0027 0D        1712            db 0x0D
0028 0A        1713            db 0x0A
0029 00        1714            db 0x00
002A           1715   __str_3:
002A 41542B56  1716            db 'AT+VER'
     4552
0030 0D        1717            db 0x0D
0031 0A        1718            db 0x0A
0032 00        1719            db 0x00
0033           1720   __str_4:
0033 41542B42  1721            db 'AT+BAUD'
     415544
003A 0D        1722            db 0x0D
003B 0A        1723            db 0x0A
003C 00        1724            db 0x00
003D           1725   __str_5:
003D 41542B52  1726            db 'AT+RFID'
     464944
0044 0D        1727            db 0x0D
0045 0A        1728            db 0x0A
0046 00        1729            db 0x00
0047           1730   __str_6:
0047 41542B44  1731            db 'AT+DVID'
     564944
004E 0D        1732            db 0x0D
004F 0A        1733            db 0x0A
0050 00        1734            db 0x00
0051           1735   __str_7:
0051 41542B52  1736            db 'AT+RFC'
     4643
0057 0D        1737            db 0x0D
0058 0A        1738            db 0x0A
0059 00        1739            db 0x00
005A           1740   __str_8:
005A 41542B50  1741            db 'AT+POWE'
     4F5745
0061 0D        1742            db 0x0D
0062 0A        1743            db 0x0A
0063 00        1744            db 0x00
0064           1745   __str_9:
0064 41542B43  1746            db 'AT+CLSS'
     4C5353
006B 0D        1747            db 0x0D
006C 0A        1748            db 0x0A
006D 00        1749            db 0x00
006E           1750   __str_10:
006E 25302A64  1751            db '%0*d %0*d %0*d %0*d %d'
     2025302A
     64202530
     2A642025
     302A6420
     2564
0084 0A        1752            db 0x0A
0085 00        1753            db 0x00
0086           1754   
0003           1755            CSEG
0003           1756   
0003           1757   end
